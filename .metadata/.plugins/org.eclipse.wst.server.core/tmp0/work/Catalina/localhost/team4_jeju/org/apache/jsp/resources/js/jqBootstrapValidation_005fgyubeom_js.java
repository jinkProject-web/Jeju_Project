/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.20
 * Generated at: 2019-07-15 07:27:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.resources.js;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class jqBootstrapValidation_005fgyubeom_js extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("/* jqBootstrapValidation\n");
      out.write(" * A plugin for automating validation on Twitter Bootstrap formatted forms.\n");
      out.write(" *\n");
      out.write(" * v1.3.6\n");
      out.write(" *\n");
      out.write(" * License: MIT <http://opensource.org/licenses/mit-license.php> - see LICENSE file\n");
      out.write(" *\n");
      out.write(" * http://ReactiveRaven.github.com/jqBootstrapValidation/\n");
      out.write(" */\n");
      out.write("\n");
      out.write("(function( $ ){\n");
      out.write("\n");
      out.write("\tvar createdElements = [];\n");
      out.write("\n");
      out.write("\tvar defaults = {\n");
      out.write("\t\toptions: {\n");
      out.write("\t\t\tprependExistingHelpBlock: false,\n");
      out.write("\t\t\tsniffHtml: true, // sniff for 'required', 'maxlength', etc\n");
      out.write("\t\t\tpreventSubmit: true, // stop the form submit event from firing if validation fails\n");
      out.write("\t\t\tsubmitError: false, // function called if there is an error when trying to submit\n");
      out.write("\t\t\tsubmitSuccess: false, // function called just before a successful submit event is sent to the server\n");
      out.write("            semanticallyStrict: false, // set to true to tidy up generated HTML output\n");
      out.write("\t\t\tautoAdd: {\n");
      out.write("\t\t\t\thelpBlocks: true\n");
      out.write("\t\t\t},\n");
      out.write("            filter: function () {\n");
      out.write("                // return $(this).is(\":visible\"); // only validate elements you can see\n");
      out.write("                return true; // validate everything\n");
      out.write("            }\n");
      out.write("\t\t},\n");
      out.write("    methods: {\n");
      out.write("      init : function( options ) {\n");
      out.write("\n");
      out.write("        var settings = $.extend(true, {}, defaults);\n");
      out.write("\n");
      out.write("        settings.options = $.extend(true, settings.options, options);\n");
      out.write("\n");
      out.write("        var $siblingElements = this;\n");
      out.write("\n");
      out.write("        var uniqueForms = $.unique(\n");
      out.write("          $siblingElements.map( function () {\n");
      out.write("            return $(this).parents(\"form\")[0];\n");
      out.write("          }).toArray()\n");
      out.write("        );\n");
      out.write("\n");
      out.write("        $(uniqueForms).bind(\"submit\", function (e) {\n");
      out.write("          var $form = $(this);\n");
      out.write("          var warningsFound = 0;\n");
      out.write("          var $inputs = $form.find(\"input,textarea,select\").not(\"[type=submit],[type=image]\").filter(settings.options.filter);\n");
      out.write("          $inputs.trigger(\"submit.validation\").trigger(\"validationLostFocus.validation\");\n");
      out.write("\n");
      out.write("          $inputs.each(function (i, el) {\n");
      out.write("            var $this = $(el),\n");
      out.write("              $controlGroup = $this.parents(\".control-group\").first();\n");
      out.write("            if (\n");
      out.write("              $controlGroup.hasClass(\"warning\")\n");
      out.write("            ) {\n");
      out.write("              $controlGroup.removeClass(\"warning\").addClass(\"error\");\n");
      out.write("              warningsFound++;\n");
      out.write("            }\n");
      out.write("          });\n");
      out.write("\n");
      out.write("          $inputs.trigger(\"validationLostFocus.validation\");\n");
      out.write("\n");
      out.write("          if (warningsFound) {\n");
      out.write("            if (settings.options.preventSubmit) {\n");
      out.write("              e.preventDefault();\n");
      out.write("            }\n");
      out.write("            $form.addClass(\"error\");\n");
      out.write("            if ($.isFunction(settings.options.submitError)) {\n");
      out.write("              settings.options.submitError($form, e, $inputs.jqBootstrapValidation(\"collectErrors\", true));\n");
      out.write("            }\n");
      out.write("          } else {\n");
      out.write("            $form.removeClass(\"error\");\n");
      out.write("            if ($.isFunction(settings.options.submitSuccess)) {\n");
      out.write("              settings.options.submitSuccess($form, e);\n");
      out.write("            }\n");
      out.write("          }\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        return this.each(function(){\n");
      out.write("\n");
      out.write("          // Get references to everything we're interested in\n");
      out.write("          var $this = $(this),\n");
      out.write("            $controlGroup = $this.parents(\".control-group\").first(),\n");
      out.write("            $helpBlock = $controlGroup.find(\".help-block\").first(),\n");
      out.write("            $form = $this.parents(\"form\").first(),\n");
      out.write("            validatorNames = [];\n");
      out.write("\n");
      out.write("          // create message container if not exists\n");
      out.write("          if (!$helpBlock.length && settings.options.autoAdd && settings.options.autoAdd.helpBlocks) {\n");
      out.write("              $helpBlock = $('<div class=\"help-block\" />');\n");
      out.write("              $controlGroup.find('.controls').append($helpBlock);\n");
      out.write("\t\t\t\t\t\t\tcreatedElements.push($helpBlock[0]);\n");
      out.write("          }\n");
      out.write("\n");
      out.write("          // =============================================================\n");
      out.write("          //                                     SNIFF HTML FOR VALIDATORS\n");
      out.write("          // =============================================================\n");
      out.write("\n");
      out.write("          // *snort sniff snuffle*\n");
      out.write("\n");
      out.write("          if (settings.options.sniffHtml) {\n");
      out.write("            var message = \"\";\n");
      out.write("            // ---------------------------------------------------------\n");
      out.write("            //                                                   PATTERN\n");
      out.write("            // ---------------------------------------------------------\n");
      out.write("            if ($this.attr(\"pattern\") !== undefined) {\n");
      out.write("              message = \"Not in the expected format<!-- data-validation-pattern-message to override -->\";\n");
      out.write("              if ($this.data(\"validationPatternMessage\")) {\n");
      out.write("                message = $this.data(\"validationPatternMessage\");\n");
      out.write("              }\n");
      out.write("              $this.data(\"validationPatternMessage\", message);\n");
      out.write("              $this.data(\"validationPatternRegex\", $this.attr(\"pattern\"));\n");
      out.write("            }\n");
      out.write("            // ---------------------------------------------------------\n");
      out.write("            //                                                       MAX\n");
      out.write("            // ---------------------------------------------------------\n");
      out.write("            if ($this.attr(\"max\") !== undefined || $this.attr(\"aria-valuemax\") !== undefined) {\n");
      out.write("              var max = ($this.attr(\"max\") !== undefined ? $this.attr(\"max\") : $this.attr(\"aria-valuemax\"));\n");
      out.write("              message = \"Too high: Maximum of '\" + max + \"'<!-- data-validation-max-message to override -->\";\n");
      out.write("              if ($this.data(\"validationMaxMessage\")) {\n");
      out.write("                message = $this.data(\"validationMaxMessage\");\n");
      out.write("              }\n");
      out.write("              $this.data(\"validationMaxMessage\", message);\n");
      out.write("              $this.data(\"validationMaxMax\", max);\n");
      out.write("            }\n");
      out.write("            // ---------------------------------------------------------\n");
      out.write("            //                                                       MIN\n");
      out.write("            // ---------------------------------------------------------\n");
      out.write("            if ($this.attr(\"min\") !== undefined || $this.attr(\"aria-valuemin\") !== undefined) {\n");
      out.write("              var min = ($this.attr(\"min\") !== undefined ? $this.attr(\"min\") : $this.attr(\"aria-valuemin\"));\n");
      out.write("              message = \"Too low: Minimum of '\" + min + \"'<!-- data-validation-min-message to override -->\";\n");
      out.write("              if ($this.data(\"validationMinMessage\")) {\n");
      out.write("                message = $this.data(\"validationMinMessage\");\n");
      out.write("              }\n");
      out.write("              $this.data(\"validationMinMessage\", message);\n");
      out.write("              $this.data(\"validationMinMin\", min);\n");
      out.write("            }\n");
      out.write("            // ---------------------------------------------------------\n");
      out.write("            //                                                 MAXLENGTH\n");
      out.write("            // ---------------------------------------------------------\n");
      out.write("            if ($this.attr(\"maxlength\") !== undefined) {\n");
      out.write("              message = \"Too long: Maximum of '\" + $this.attr(\"maxlength\") + \"' characters<!-- data-validation-maxlength-message to override -->\";\n");
      out.write("              if ($this.data(\"validationMaxlengthMessage\")) {\n");
      out.write("                message = $this.data(\"validationMaxlengthMessage\");\n");
      out.write("              }\n");
      out.write("              $this.data(\"validationMaxlengthMessage\", message);\n");
      out.write("              $this.data(\"validationMaxlengthMaxlength\", $this.attr(\"maxlength\"));\n");
      out.write("            }\n");
      out.write("            // ---------------------------------------------------------\n");
      out.write("            //                                                 MINLENGTH\n");
      out.write("            // ---------------------------------------------------------\n");
      out.write("            if ($this.attr(\"minlength\") !== undefined) {\n");
      out.write("              message = \"Too short: Minimum of '\" + $this.attr(\"minlength\") + \"' characters<!-- data-validation-minlength-message to override -->\";\n");
      out.write("              if ($this.data(\"validationMinlengthMessage\")) {\n");
      out.write("                message = $this.data(\"validationMinlengthMessage\");\n");
      out.write("              }\n");
      out.write("              $this.data(\"validationMinlengthMessage\", message);\n");
      out.write("              $this.data(\"validationMinlengthMinlength\", $this.attr(\"minlength\"));\n");
      out.write("            }\n");
      out.write("            // ---------------------------------------------------------\n");
      out.write("            //                                                  REQUIRED\n");
      out.write("            // ---------------------------------------------------------\n");
      out.write("            if ($this.attr(\"required\") !== undefined || $this.attr(\"aria-required\") !== undefined) {\n");
      out.write("              message = settings.builtInValidators.required.message;\n");
      out.write("              if ($this.data(\"validationRequiredMessage\")) {\n");
      out.write("                message = $this.data(\"validationRequiredMessage\");\n");
      out.write("              }\n");
      out.write("              $this.data(\"validationRequiredMessage\", message);\n");
      out.write("            }\n");
      out.write("            // ---------------------------------------------------------\n");
      out.write("            //                                                    NUMBER\n");
      out.write("            // ---------------------------------------------------------\n");
      out.write("            if ($this.attr(\"type\") !== undefined && $this.attr(\"type\").toLowerCase() === \"number\") {\n");
      out.write("              message = settings.builtInValidators.number.message;\n");
      out.write("              if ($this.data(\"validationNumberMessage\")) {\n");
      out.write("                message = $this.data(\"validationNumberMessage\");\n");
      out.write("              }\n");
      out.write("              $this.data(\"validationNumberMessage\", message);\n");
      out.write("            }\n");
      out.write("            // ---------------------------------------------------------\n");
      out.write("            //                                                     EMAIL\n");
      out.write("            // ---------------------------------------------------------\n");
      out.write("            if ($this.attr(\"type\") !== undefined && $this.attr(\"type\").toLowerCase() === \"email\") {\n");
      out.write("              message = \"Not a valid email address<!-- data-validator-validemail-message to override -->\";\n");
      out.write("              if ($this.data(\"validationValidemailMessage\")) {\n");
      out.write("                message = $this.data(\"validationValidemailMessage\");\n");
      out.write("              } else if ($this.data(\"validationEmailMessage\")) {\n");
      out.write("                message = $this.data(\"validationEmailMessage\");\n");
      out.write("              }\n");
      out.write("              $this.data(\"validationValidemailMessage\", message);\n");
      out.write("            }\n");
      out.write("            // ---------------------------------------------------------\n");
      out.write("            //                                                MINCHECKED\n");
      out.write("            // ---------------------------------------------------------\n");
      out.write("            if ($this.attr(\"minchecked\") !== undefined) {\n");
      out.write("              message = \"Not enough options checked; Minimum of '\" + $this.attr(\"minchecked\") + \"' required<!-- data-validation-minchecked-message to override -->\";\n");
      out.write("              if ($this.data(\"validationMincheckedMessage\")) {\n");
      out.write("                message = $this.data(\"validationMincheckedMessage\");\n");
      out.write("              }\n");
      out.write("              $this.data(\"validationMincheckedMessage\", message);\n");
      out.write("              $this.data(\"validationMincheckedMinchecked\", $this.attr(\"minchecked\"));\n");
      out.write("            }\n");
      out.write("            // ---------------------------------------------------------\n");
      out.write("            //                                                MAXCHECKED\n");
      out.write("            // ---------------------------------------------------------\n");
      out.write("            if ($this.attr(\"maxchecked\") !== undefined) {\n");
      out.write("              message = \"Too many options checked; Maximum of '\" + $this.attr(\"maxchecked\") + \"' required<!-- data-validation-maxchecked-message to override -->\";\n");
      out.write("              if ($this.data(\"validationMaxcheckedMessage\")) {\n");
      out.write("                message = $this.data(\"validationMaxcheckedMessage\");\n");
      out.write("              }\n");
      out.write("              $this.data(\"validationMaxcheckedMessage\", message);\n");
      out.write("              $this.data(\"validationMaxcheckedMaxchecked\", $this.attr(\"maxchecked\"));\n");
      out.write("            }\n");
      out.write("          }\n");
      out.write("\n");
      out.write("          // =============================================================\n");
      out.write("          //                                       COLLECT VALIDATOR NAMES\n");
      out.write("          // =============================================================\n");
      out.write("\n");
      out.write("          // Get named validators\n");
      out.write("          if ($this.data(\"validation\") !== undefined) {\n");
      out.write("            validatorNames = $this.data(\"validation\").split(\",\");\n");
      out.write("          }\n");
      out.write("\n");
      out.write("          // Get extra ones defined on the element's data attributes\n");
      out.write("          $.each($this.data(), function (i, el) {\n");
      out.write("            var parts = i.replace(/([A-Z])/g, \",$1\").split(\",\");\n");
      out.write("            if (parts[0] === \"validation\" && parts[1]) {\n");
      out.write("              validatorNames.push(parts[1]);\n");
      out.write("            }\n");
      out.write("          });\n");
      out.write("\n");
      out.write("          // =============================================================\n");
      out.write("          //                                     NORMALISE VALIDATOR NAMES\n");
      out.write("          // =============================================================\n");
      out.write("\n");
      out.write("          var validatorNamesToInspect = validatorNames;\n");
      out.write("          var newValidatorNamesToInspect = [];\n");
      out.write("\n");
      out.write("          do // repeatedly expand 'shortcut' validators into their real validators\n");
      out.write("          {\n");
      out.write("            // Uppercase only the first letter of each name\n");
      out.write("            $.each(validatorNames, function (i, el) {\n");
      out.write("              validatorNames[i] = formatValidatorName(el);\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            // Remove duplicate validator names\n");
      out.write("            validatorNames = $.unique(validatorNames);\n");
      out.write("\n");
      out.write("            // Pull out the new validator names from each shortcut\n");
      out.write("            newValidatorNamesToInspect = [];\n");
      out.write("            $.each(validatorNamesToInspect, function(i, el) {\n");
      out.write("              if ($this.data(\"validation\" + el + \"Shortcut\") !== undefined) {\n");
      out.write("                // Are these custom validators?\n");
      out.write("                // Pull them out!\n");
      out.write("                $.each($this.data(\"validation\" + el + \"Shortcut\").split(\",\"), function(i2, el2) {\n");
      out.write("                  newValidatorNamesToInspect.push(el2);\n");
      out.write("                });\n");
      out.write("              } else if (settings.builtInValidators[el.toLowerCase()]) {\n");
      out.write("                // Is this a recognised built-in?\n");
      out.write("                // Pull it out!\n");
      out.write("                var validator = settings.builtInValidators[el.toLowerCase()];\n");
      out.write("                if (validator.type.toLowerCase() === \"shortcut\") {\n");
      out.write("                  $.each(validator.shortcut.split(\",\"), function (i, el) {\n");
      out.write("                    el = formatValidatorName(el);\n");
      out.write("                    newValidatorNamesToInspect.push(el);\n");
      out.write("                    validatorNames.push(el);\n");
      out.write("                  });\n");
      out.write("                }\n");
      out.write("              }\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            validatorNamesToInspect = newValidatorNamesToInspect;\n");
      out.write("\n");
      out.write("          } while (validatorNamesToInspect.length > 0)\n");
      out.write("\n");
      out.write("          // =============================================================\n");
      out.write("          //                                       SET UP VALIDATOR ARRAYS\n");
      out.write("          // =============================================================\n");
      out.write("\n");
      out.write("          var validators = {};\n");
      out.write("\n");
      out.write("          $.each(validatorNames, function (i, el) {\n");
      out.write("            // Set up the 'override' message\n");
      out.write("            var message = $this.data(\"validation\" + el + \"Message\");\n");
      out.write("            var hasOverrideMessage = (message !== undefined);\n");
      out.write("            var foundValidator = false;\n");
      out.write("            message =\n");
      out.write("              (\n");
      out.write("                message\n");
      out.write("                  ? message\n");
      out.write("                  : \"'\" + el + \"' validation failed <!-- Add attribute 'data-validation-\" + el.toLowerCase() + \"-message' to input to change this message -->\"\n");
      out.write("              )\n");
      out.write("            ;\n");
      out.write("\n");
      out.write("            $.each(\n");
      out.write("              settings.validatorTypes,\n");
      out.write("              function (validatorType, validatorTemplate) {\n");
      out.write("                if (validators[validatorType] === undefined) {\n");
      out.write("                  validators[validatorType] = [];\n");
      out.write("                }\n");
      out.write("                if (!foundValidator && $this.data(\"validation\" + el + formatValidatorName(validatorTemplate.name)) !== undefined) {\n");
      out.write("                  validators[validatorType].push(\n");
      out.write("                    $.extend(\n");
      out.write("                      true,\n");
      out.write("                      {\n");
      out.write("                        name: formatValidatorName(validatorTemplate.name),\n");
      out.write("                        message: message\n");
      out.write("                      },\n");
      out.write("                      validatorTemplate.init($this, el)\n");
      out.write("                    )\n");
      out.write("                  );\n");
      out.write("                  foundValidator = true;\n");
      out.write("                }\n");
      out.write("              }\n");
      out.write("            );\n");
      out.write("\n");
      out.write("            if (!foundValidator && settings.builtInValidators[el.toLowerCase()]) {\n");
      out.write("\n");
      out.write("              var validator = $.extend(true, {}, settings.builtInValidators[el.toLowerCase()]);\n");
      out.write("              if (hasOverrideMessage) {\n");
      out.write("                validator.message = message;\n");
      out.write("              }\n");
      out.write("              var validatorType = validator.type.toLowerCase();\n");
      out.write("\n");
      out.write("              if (validatorType === \"shortcut\") {\n");
      out.write("                foundValidator = true;\n");
      out.write("              } else {\n");
      out.write("                $.each(\n");
      out.write("                  settings.validatorTypes,\n");
      out.write("                  function (validatorTemplateType, validatorTemplate) {\n");
      out.write("                    if (validators[validatorTemplateType] === undefined) {\n");
      out.write("                      validators[validatorTemplateType] = [];\n");
      out.write("                    }\n");
      out.write("                    if (!foundValidator && validatorType === validatorTemplateType.toLowerCase()) {\n");
      out.write("                      $this.data(\"validation\" + el + formatValidatorName(validatorTemplate.name), validator[validatorTemplate.name.toLowerCase()]);\n");
      out.write("                      validators[validatorType].push(\n");
      out.write("                        $.extend(\n");
      out.write("                          validator,\n");
      out.write("                          validatorTemplate.init($this, el)\n");
      out.write("                        )\n");
      out.write("                      );\n");
      out.write("                      foundValidator = true;\n");
      out.write("                    }\n");
      out.write("                  }\n");
      out.write("                );\n");
      out.write("              }\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            if (! foundValidator) {\n");
      out.write("              $.error(\"Cannot find validation info for '\" + el + \"'\");\n");
      out.write("            }\n");
      out.write("          });\n");
      out.write("\n");
      out.write("          // =============================================================\n");
      out.write("          //                                         STORE FALLBACK VALUES\n");
      out.write("          // =============================================================\n");
      out.write("\n");
      out.write("          $helpBlock.data(\n");
      out.write("            \"original-contents\",\n");
      out.write("            (\n");
      out.write("              $helpBlock.data(\"original-contents\")\n");
      out.write("                ? $helpBlock.data(\"original-contents\")\n");
      out.write("                : $helpBlock.html()\n");
      out.write("            )\n");
      out.write("          );\n");
      out.write("\n");
      out.write("          $helpBlock.data(\n");
      out.write("            \"original-role\",\n");
      out.write("            (\n");
      out.write("              $helpBlock.data(\"original-role\")\n");
      out.write("                ? $helpBlock.data(\"original-role\")\n");
      out.write("                : $helpBlock.attr(\"role\")\n");
      out.write("            )\n");
      out.write("          );\n");
      out.write("\n");
      out.write("          $controlGroup.data(\n");
      out.write("            \"original-classes\",\n");
      out.write("            (\n");
      out.write("              $controlGroup.data(\"original-clases\")\n");
      out.write("                ? $controlGroup.data(\"original-classes\")\n");
      out.write("                : $controlGroup.attr(\"class\")\n");
      out.write("            )\n");
      out.write("          );\n");
      out.write("\n");
      out.write("          $this.data(\n");
      out.write("            \"original-aria-invalid\",\n");
      out.write("            (\n");
      out.write("              $this.data(\"original-aria-invalid\")\n");
      out.write("                ? $this.data(\"original-aria-invalid\")\n");
      out.write("                : $this.attr(\"aria-invalid\")\n");
      out.write("            )\n");
      out.write("          );\n");
      out.write("\n");
      out.write("          // =============================================================\n");
      out.write("          //                                                    VALIDATION\n");
      out.write("          // =============================================================\n");
      out.write("\n");
      out.write("          $this.bind(\n");
      out.write("            \"validation.validation\",\n");
      out.write("            function (event, params) {\n");
      out.write("\n");
      out.write("              var value = getValue($this);\n");
      out.write("\n");
      out.write("              // Get a list of the errors to apply\n");
      out.write("              var errorsFound = [];\n");
      out.write("\n");
      out.write("              $.each(validators, function (validatorType, validatorTypeArray) {\n");
      out.write("                if (value || value.length || (params && params.includeEmpty) || (!!settings.validatorTypes[validatorType].blockSubmit && params && !!params.submitting)) {\n");
      out.write("                  $.each(validatorTypeArray, function (i, validator) {\n");
      out.write("                    if (settings.validatorTypes[validatorType].validate($this, value, validator)) {\n");
      out.write("                      errorsFound.push(validator.message);\n");
      out.write("                    }\n");
      out.write("                  });\n");
      out.write("                }\n");
      out.write("              });\n");
      out.write("\n");
      out.write("              return errorsFound;\n");
      out.write("            }\n");
      out.write("          );\n");
      out.write("\n");
      out.write("          $this.bind(\n");
      out.write("            \"getValidators.validation\",\n");
      out.write("            function () {\n");
      out.write("              return validators;\n");
      out.write("            }\n");
      out.write("          );\n");
      out.write("\n");
      out.write("          // =============================================================\n");
      out.write("          //                                             WATCH FOR CHANGES\n");
      out.write("          // =============================================================\n");
      out.write("          $this.bind(\n");
      out.write("            \"submit.validation\",\n");
      out.write("            function () {\n");
      out.write("              return $this.triggerHandler(\"change.validation\", {submitting: true});\n");
      out.write("            }\n");
      out.write("          );\n");
      out.write("          $this.bind(\n");
      out.write("            [\n");
      out.write("              \"keyup\",\n");
      out.write("              \"focus\",\n");
      out.write("              \"blur\",\n");
      out.write("              \"click\",\n");
      out.write("              \"keydown\",\n");
      out.write("              \"keypress\",\n");
      out.write("              \"change\"\n");
      out.write("            ].join(\".validation \") + \".validation\",\n");
      out.write("            function (e, params) {\n");
      out.write("\n");
      out.write("              var value = getValue($this);\n");
      out.write("\n");
      out.write("              var errorsFound = [];\n");
      out.write("\n");
      out.write("              $controlGroup.find(\"input,textarea,select\").each(function (i, el) {\n");
      out.write("                var oldCount = errorsFound.length;\n");
      out.write("                $.each($(el).triggerHandler(\"validation.validation\", params), function (j, message) {\n");
      out.write("                  errorsFound.push(message);\n");
      out.write("                });\n");
      out.write("                if (errorsFound.length > oldCount) {\n");
      out.write("                  $(el).attr(\"aria-invalid\", \"true\");\n");
      out.write("                } else {\n");
      out.write("                  var original = $this.data(\"original-aria-invalid\");\n");
      out.write("                  $(el).attr(\"aria-invalid\", (original !== undefined ? original : false));\n");
      out.write("                }\n");
      out.write("              });\n");
      out.write("\n");
      out.write("              $form.find(\"input,select,textarea\").not($this).not(\"[name=\\\"\" + $this.attr(\"name\") + \"\\\"]\").trigger(\"validationLostFocus.validation\");\n");
      out.write("\n");
      out.write("              errorsFound = $.unique(errorsFound.sort());\n");
      out.write("\n");
      out.write("              // Were there any errors?\n");
      out.write("              if (errorsFound.length) {\n");
      out.write("                // Better flag it up as a warning.\n");
      out.write("                $controlGroup.removeClass(\"success error\").addClass(\"warning\");\n");
      out.write("\n");
      out.write("                // How many errors did we find?\n");
      out.write("                if (settings.options.semanticallyStrict && errorsFound.length === 1) {\n");
      out.write("                  // Only one? Being strict? Just output it.\n");
      out.write("                  $helpBlock.html(errorsFound[0] + \n");
      out.write("                    ( settings.options.prependExistingHelpBlock ? $helpBlock.data(\"original-contents\") : \"\" ));\n");
      out.write("                } else {\n");
      out.write("                  // Multiple? Being sloppy? Glue them together into an UL.\n");
      out.write("                  $helpBlock.html(\"<ul role=\\\"alert\\\"><li>\" + errorsFound.join(\"</li><li>\") + \"</li></ul>\" +\n");
      out.write("                    ( settings.options.prependExistingHelpBlock ? $helpBlock.data(\"original-contents\") : \"\" ));\n");
      out.write("                }\n");
      out.write("              } else {\n");
      out.write("                $controlGroup.removeClass(\"warning error success\");\n");
      out.write("                if (value.length > 0) {\n");
      out.write("                  $controlGroup.addClass(\"success\");\n");
      out.write("                }\n");
      out.write("                $helpBlock.html($helpBlock.data(\"original-contents\"));\n");
      out.write("              }\n");
      out.write("\n");
      out.write("              if (e.type === \"blur\") {\n");
      out.write("                $controlGroup.removeClass(\"success\");\n");
      out.write("              }\n");
      out.write("            }\n");
      out.write("          );\n");
      out.write("          $this.bind(\"validationLostFocus.validation\", function () {\n");
      out.write("            $controlGroup.removeClass(\"success\");\n");
      out.write("          });\n");
      out.write("        });\n");
      out.write("      },\n");
      out.write("      destroy : function( ) {\n");
      out.write("\n");
      out.write("        return this.each(\n");
      out.write("          function() {\n");
      out.write("\n");
      out.write("            var\n");
      out.write("              $this = $(this),\n");
      out.write("              $controlGroup = $this.parents(\".control-group\").first(),\n");
      out.write("              $helpBlock = $controlGroup.find(\".help-block\").first();\n");
      out.write("\n");
      out.write("            // remove our events\n");
      out.write("            $this.unbind('.validation'); // events are namespaced.\n");
      out.write("            // reset help text\n");
      out.write("            $helpBlock.html($helpBlock.data(\"original-contents\"));\n");
      out.write("            // reset classes\n");
      out.write("            $controlGroup.attr(\"class\", $controlGroup.data(\"original-classes\"));\n");
      out.write("            // reset aria\n");
      out.write("            $this.attr(\"aria-invalid\", $this.data(\"original-aria-invalid\"));\n");
      out.write("            // reset role\n");
      out.write("            $helpBlock.attr(\"role\", $this.data(\"original-role\"));\n");
      out.write("\t\t\t\t\t\t// remove all elements we created\n");
      out.write("\t\t\t\t\t\tif (createdElements.indexOf($helpBlock[0]) > -1) {\n");
      out.write("\t\t\t\t\t\t\t$helpBlock.remove();\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\n");
      out.write("          }\n");
      out.write("        );\n");
      out.write("\n");
      out.write("      },\n");
      out.write("      collectErrors : function(includeEmpty) {\n");
      out.write("\n");
      out.write("        var errorMessages = {};\n");
      out.write("        this.each(function (i, el) {\n");
      out.write("          var $el = $(el);\n");
      out.write("          var name = $el.attr(\"name\");\n");
      out.write("          var errors = $el.triggerHandler(\"validation.validation\", {includeEmpty: true});\n");
      out.write("          errorMessages[name] = $.extend(true, errors, errorMessages[name]);\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        $.each(errorMessages, function (i, el) {\n");
      out.write("          if (el.length === 0) {\n");
      out.write("            delete errorMessages[i];\n");
      out.write("          }\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        return errorMessages;\n");
      out.write("\n");
      out.write("      },\n");
      out.write("      hasErrors: function() {\n");
      out.write("\n");
      out.write("        var errorMessages = [];\n");
      out.write("\n");
      out.write("        this.each(function (i, el) {\n");
      out.write("          errorMessages = errorMessages.concat(\n");
      out.write("            $(el).triggerHandler(\"getValidators.validation\") ? $(el).triggerHandler(\"validation.validation\", {submitting: true}) : []\n");
      out.write("          );\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        return (errorMessages.length > 0);\n");
      out.write("      },\n");
      out.write("      override : function (newDefaults) {\n");
      out.write("        defaults = $.extend(true, defaults, newDefaults);\n");
      out.write("      }\n");
      out.write("    },\n");
      out.write("\t\tvalidatorTypes: {\n");
      out.write("      callback: {\n");
      out.write("        name: \"callback\",\n");
      out.write("        init: function ($this, name) {\n");
      out.write("          return {\n");
      out.write("            validatorName: name,\n");
      out.write("            callback: $this.data(\"validation\" + name + \"Callback\"),\n");
      out.write("            lastValue: $this.val(),\n");
      out.write("            lastValid: true,\n");
      out.write("            lastFinished: true\n");
      out.write("          };\n");
      out.write("        },\n");
      out.write("        validate: function ($this, value, validator) {\n");
      out.write("          if (validator.lastValue === value && validator.lastFinished) {\n");
      out.write("            return !validator.lastValid;\n");
      out.write("          }\n");
      out.write("\n");
      out.write("          if (validator.lastFinished === true)\n");
      out.write("          {\n");
      out.write("            validator.lastValue = value;\n");
      out.write("            validator.lastValid = true;\n");
      out.write("            validator.lastFinished = false;\n");
      out.write("\n");
      out.write("            var rrjqbvValidator = validator;\n");
      out.write("            var rrjqbvThis = $this;\n");
      out.write("            executeFunctionByName(\n");
      out.write("              validator.callback,\n");
      out.write("              window,\n");
      out.write("              $this,\n");
      out.write("              value,\n");
      out.write("              function (data) {\n");
      out.write("                if (rrjqbvValidator.lastValue === data.value) {\n");
      out.write("                  rrjqbvValidator.lastValid = data.valid;\n");
      out.write("                  if (data.message) {\n");
      out.write("                    rrjqbvValidator.message = data.message;\n");
      out.write("                  }\n");
      out.write("                  rrjqbvValidator.lastFinished = true;\n");
      out.write("                  rrjqbvThis.data(\"validation\" + rrjqbvValidator.validatorName + \"Message\", rrjqbvValidator.message);\n");
      out.write("                  // Timeout is set to avoid problems with the events being considered 'already fired'\n");
      out.write("                  setTimeout(function () {\n");
      out.write("                    rrjqbvThis.trigger(\"change.validation\");\n");
      out.write("                  }, 1); // doesn't need a long timeout, just long enough for the event bubble to burst\n");
      out.write("                }\n");
      out.write("              }\n");
      out.write("            );\n");
      out.write("          }\n");
      out.write("\n");
      out.write("          return false;\n");
      out.write("\n");
      out.write("        }\n");
      out.write("      },\n");
      out.write("      ajax: {\n");
      out.write("        name: \"ajax\",\n");
      out.write("        init: function ($this, name) {\n");
      out.write("          return {\n");
      out.write("            validatorName: name,\n");
      out.write("            url: $this.data(\"validation\" + name + \"Ajax\"),\n");
      out.write("            lastValue: $this.val(),\n");
      out.write("            lastValid: true,\n");
      out.write("            lastFinished: true\n");
      out.write("          };\n");
      out.write("        },\n");
      out.write("        validate: function ($this, value, validator) {\n");
      out.write("          if (\"\"+validator.lastValue === \"\"+value && validator.lastFinished === true) {\n");
      out.write("            return validator.lastValid === false;\n");
      out.write("          }\n");
      out.write("\n");
      out.write("          if (validator.lastFinished === true)\n");
      out.write("          {\n");
      out.write("            validator.lastValue = value;\n");
      out.write("            validator.lastValid = true;\n");
      out.write("            validator.lastFinished = false;\n");
      out.write("            $.ajax({\n");
      out.write("              url: validator.url,\n");
      out.write("              data: \"value=\" + value + \"&field=\" + $this.attr(\"name\"),\n");
      out.write("              dataType: \"json\",\n");
      out.write("              success: function (data) {\n");
      out.write("                if (\"\"+validator.lastValue === \"\"+data.value) {\n");
      out.write("                  validator.lastValid = !!(data.valid);\n");
      out.write("                  if (data.message) {\n");
      out.write("                    validator.message = data.message;\n");
      out.write("                  }\n");
      out.write("                  validator.lastFinished = true;\n");
      out.write("                  $this.data(\"validation\" + validator.validatorName + \"Message\", validator.message);\n");
      out.write("                  // Timeout is set to avoid problems with the events being considered 'already fired'\n");
      out.write("                  setTimeout(function () {\n");
      out.write("                    $this.trigger(\"change.validation\");\n");
      out.write("                  }, 1); // doesn't need a long timeout, just long enough for the event bubble to burst\n");
      out.write("                }\n");
      out.write("              },\n");
      out.write("              failure: function () {\n");
      out.write("                validator.lastValid = true;\n");
      out.write("                validator.message = \"ajax call failed\";\n");
      out.write("                validator.lastFinished = true;\n");
      out.write("                $this.data(\"validation\" + validator.validatorName + \"Message\", validator.message);\n");
      out.write("                // Timeout is set to avoid problems with the events being considered 'already fired'\n");
      out.write("                setTimeout(function () {\n");
      out.write("                  $this.trigger(\"change.validation\");\n");
      out.write("                }, 1); // doesn't need a long timeout, just long enough for the event bubble to burst\n");
      out.write("              }\n");
      out.write("            });\n");
      out.write("          }\n");
      out.write("\n");
      out.write("          return false;\n");
      out.write("\n");
      out.write("        }\n");
      out.write("      },\n");
      out.write("\t\t\tregex: {\n");
      out.write("\t\t\t\tname: \"regex\",\n");
      out.write("\t\t\t\tinit: function ($this, name) {\n");
      out.write("\t\t\t\t\treturn {regex: regexFromString($this.data(\"validation\" + name + \"Regex\"))};\n");
      out.write("\t\t\t\t},\n");
      out.write("\t\t\t\tvalidate: function ($this, value, validator) {\n");
      out.write("\t\t\t\t\treturn (!validator.regex.test(value) && ! validator.negative)\n");
      out.write("\t\t\t\t\t\t|| (validator.regex.test(value) && validator.negative);\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\trequired: {\n");
      out.write("\t\t\t\tname: \"required\",\n");
      out.write("\t\t\t\tinit: function ($this, name) {\n");
      out.write("\t\t\t\t\treturn {};\n");
      out.write("\t\t\t\t},\n");
      out.write("\t\t\t\tvalidate: function ($this, value, validator) {\n");
      out.write("\t\t\t\t\treturn !!(value.length === 0  && ! validator.negative)\n");
      out.write("\t\t\t\t\t\t|| !!(value.length > 0 && validator.negative);\n");
      out.write("\t\t\t\t},\n");
      out.write("        blockSubmit: true\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tmatch: {\n");
      out.write("\t\t\t\tname: \"match\",\n");
      out.write("\t\t\t\tinit: function ($this, name) {\n");
      out.write("\t\t\t\t\tvar element = $this.parents(\"form\").first().find(\"[name=\\\"\" + $this.data(\"validation\" + name + \"Match\") + \"\\\"]\").first();\n");
      out.write("\t\t\t\t\telement.bind(\"validation.validation\", function () {\n");
      out.write("\t\t\t\t\t\t$this.trigger(\"change.validation\", {submitting: true});\n");
      out.write("\t\t\t\t\t});\n");
      out.write("\t\t\t\t\treturn {\"element\": element};\n");
      out.write("\t\t\t\t},\n");
      out.write("\t\t\t\tvalidate: function ($this, value, validator) {\n");
      out.write("\t\t\t\t\treturn (value !== validator.element.val() && ! validator.negative)\n");
      out.write("\t\t\t\t\t\t|| (value === validator.element.val() && validator.negative);\n");
      out.write("\t\t\t\t},\n");
      out.write("        blockSubmit: true\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tmax: {\n");
      out.write("\t\t\t\tname: \"max\",\n");
      out.write("\t\t\t\tinit: function ($this, name) {\n");
      out.write("\t\t\t\t\treturn {max: $this.data(\"validation\" + name + \"Max\")};\n");
      out.write("\t\t\t\t},\n");
      out.write("\t\t\t\tvalidate: function ($this, value, validator) {\n");
      out.write("\t\t\t\t\treturn (parseFloat(value, 10) > parseFloat(validator.max, 10) && ! validator.negative)\n");
      out.write("\t\t\t\t\t\t|| (parseFloat(value, 10) <= parseFloat(validator.max, 10) && validator.negative);\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tmin: {\n");
      out.write("\t\t\t\tname: \"min\",\n");
      out.write("\t\t\t\tinit: function ($this, name) {\n");
      out.write("\t\t\t\t\treturn {min: $this.data(\"validation\" + name + \"Min\")};\n");
      out.write("\t\t\t\t},\n");
      out.write("\t\t\t\tvalidate: function ($this, value, validator) {\n");
      out.write("\t\t\t\t\treturn (parseFloat(value) < parseFloat(validator.min) && ! validator.negative)\n");
      out.write("\t\t\t\t\t\t|| (parseFloat(value) >= parseFloat(validator.min) && validator.negative);\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tmaxlength: {\n");
      out.write("\t\t\t\tname: \"maxlength\",\n");
      out.write("\t\t\t\tinit: function ($this, name) {\n");
      out.write("\t\t\t\t\treturn {maxlength: $this.data(\"validation\" + name + \"Maxlength\")};\n");
      out.write("\t\t\t\t},\n");
      out.write("\t\t\t\tvalidate: function ($this, value, validator) {\n");
      out.write("\t\t\t\t\treturn ((value.length > validator.maxlength) && ! validator.negative)\n");
      out.write("\t\t\t\t\t\t|| ((value.length <= validator.maxlength) && validator.negative);\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tminlength: {\n");
      out.write("\t\t\t\tname: \"minlength\",\n");
      out.write("\t\t\t\tinit: function ($this, name) {\n");
      out.write("\t\t\t\t\treturn {minlength: $this.data(\"validation\" + name + \"Minlength\")};\n");
      out.write("\t\t\t\t},\n");
      out.write("\t\t\t\tvalidate: function ($this, value, validator) {\n");
      out.write("\t\t\t\t\treturn ((value.length < validator.minlength) && ! validator.negative)\n");
      out.write("\t\t\t\t\t\t|| ((value.length >= validator.minlength) && validator.negative);\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tmaxchecked: {\n");
      out.write("\t\t\t\tname: \"maxchecked\",\n");
      out.write("\t\t\t\tinit: function ($this, name) {\n");
      out.write("\t\t\t\t\tvar elements = $this.parents(\"form\").first().find(\"[name=\\\"\" + $this.attr(\"name\") + \"\\\"]\");\n");
      out.write("\t\t\t\t\telements.bind(\"click.validation\", function () {\n");
      out.write("\t\t\t\t\t\t$this.trigger(\"change.validation\", {includeEmpty: true});\n");
      out.write("\t\t\t\t\t});\n");
      out.write("\t\t\t\t\treturn {maxchecked: $this.data(\"validation\" + name + \"Maxchecked\"), elements: elements};\n");
      out.write("\t\t\t\t},\n");
      out.write("\t\t\t\tvalidate: function ($this, value, validator) {\n");
      out.write("\t\t\t\t\treturn (validator.elements.filter(\":checked\").length > validator.maxchecked && ! validator.negative)\n");
      out.write("\t\t\t\t\t\t|| (validator.elements.filter(\":checked\").length <= validator.maxchecked && validator.negative);\n");
      out.write("\t\t\t\t},\n");
      out.write("        blockSubmit: true\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tminchecked: {\n");
      out.write("\t\t\t\tname: \"minchecked\",\n");
      out.write("\t\t\t\tinit: function ($this, name) {\n");
      out.write("\t\t\t\t\tvar elements = $this.parents(\"form\").first().find(\"[name=\\\"\" + $this.attr(\"name\") + \"\\\"]\");\n");
      out.write("\t\t\t\t\telements.bind(\"click.validation\", function () {\n");
      out.write("\t\t\t\t\t\t$this.trigger(\"change.validation\", {includeEmpty: true});\n");
      out.write("\t\t\t\t\t});\n");
      out.write("\t\t\t\t\treturn {minchecked: $this.data(\"validation\" + name + \"Minchecked\"), elements: elements};\n");
      out.write("\t\t\t\t},\n");
      out.write("\t\t\t\tvalidate: function ($this, value, validator) {\n");
      out.write("\t\t\t\t\treturn (validator.elements.filter(\":checked\").length < validator.minchecked && ! validator.negative)\n");
      out.write("\t\t\t\t\t\t|| (validator.elements.filter(\":checked\").length >= validator.minchecked && validator.negative);\n");
      out.write("\t\t\t\t},\n");
      out.write("        blockSubmit: true\n");
      out.write("\t\t\t}\n");
      out.write("\t\t},\n");
      out.write("\t\tbuiltInValidators: {\n");
      out.write("\t\t\temail: {\n");
      out.write("\t\t\t\tname: \"Email\",\n");
      out.write("\t\t\t\ttype: \"shortcut\",\n");
      out.write("\t\t\t\tshortcut: \"validemail\"\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tvalidemail: {\n");
      out.write("\t\t\t\tname: \"Validemail\",\n");
      out.write("\t\t\t\ttype: \"regex\",\n");
      out.write("\t\t\t\tregex: \"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\\\.[A-Za-z]{2,4}\",\n");
      out.write("\t\t\t\tmessage: \"Not a valid email address<!-- data-validator-validemail-message to override -->\"\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tpasswordagain: {\n");
      out.write("\t\t\t\tname: \"Passwordagain\",\n");
      out.write("\t\t\t\ttype: \"match\",\n");
      out.write("\t\t\t\tmatch: \"password\",\n");
      out.write("\t\t\t\tmessage: \"Does not match the given password<!-- data-validator-paswordagain-message to override -->\"\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tpositive: {\n");
      out.write("\t\t\t\tname: \"Positive\",\n");
      out.write("\t\t\t\ttype: \"shortcut\",\n");
      out.write("\t\t\t\tshortcut: \"number,positivenumber\"\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tnegative: {\n");
      out.write("\t\t\t\tname: \"Negative\",\n");
      out.write("\t\t\t\ttype: \"shortcut\",\n");
      out.write("\t\t\t\tshortcut: \"number,negativenumber\"\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tnumber: {\n");
      out.write("\t\t\t\tname: \"Number\",\n");
      out.write("\t\t\t\ttype: \"regex\",\n");
      out.write("\t\t\t\tregex: \"([+-]?\\\\\\d+(\\\\\\.\\\\\\d*)?([eE][+-]?[0-9]+)?)?\",\n");
      out.write("\t\t\t\tmessage: \"Must be a number<!-- data-validator-number-message to override -->\"\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tinteger: {\n");
      out.write("\t\t\t\tname: \"Integer\",\n");
      out.write("\t\t\t\ttype: \"regex\",\n");
      out.write("\t\t\t\tregex: \"[+-]?\\\\\\d+\",\n");
      out.write("\t\t\t\tmessage: \"No decimal places allowed<!-- data-validator-integer-message to override -->\"\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tpositivenumber: {\n");
      out.write("\t\t\t\tname: \"Positivenumber\",\n");
      out.write("\t\t\t\ttype: \"min\",\n");
      out.write("\t\t\t\tmin: 0,\n");
      out.write("\t\t\t\tmessage: \"Must be a positive number<!-- data-validator-positivenumber-message to override -->\"\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tnegativenumber: {\n");
      out.write("\t\t\t\tname: \"Negativenumber\",\n");
      out.write("\t\t\t\ttype: \"max\",\n");
      out.write("\t\t\t\tmax: 0,\n");
      out.write("\t\t\t\tmessage: \"Must be a negative number<!-- data-validator-negativenumber-message to override -->\"\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\trequired: {\n");
      out.write("\t\t\t\tname: \"Required\",\n");
      out.write("\t\t\t\ttype: \"required\",\n");
      out.write("\t\t\t\tmessage: \"This is required<!-- data-validator-required-message to override -->\"\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tcheckone: {\n");
      out.write("\t\t\t\tname: \"Checkone\",\n");
      out.write("\t\t\t\ttype: \"minchecked\",\n");
      out.write("\t\t\t\tminchecked: 1,\n");
      out.write("\t\t\t\tmessage: \"Check at least one option<!-- data-validation-checkone-message to override -->\"\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t};\n");
      out.write("\n");
      out.write("\tvar formatValidatorName = function (name) {\n");
      out.write("\t\treturn name\n");
      out.write("\t\t\t.toLowerCase()\n");
      out.write("\t\t\t.replace(\n");
      out.write("\t\t\t\t/(^|\\s)([a-z])/g ,\n");
      out.write("\t\t\t\tfunction(m,p1,p2) {\n");
      out.write("\t\t\t\t\treturn p1+p2.toUpperCase();\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t)\n");
      out.write("\t\t;\n");
      out.write("\t};\n");
      out.write("\n");
      out.write("\tvar getValue = function ($this) {\n");
      out.write("\t\t// Extract the value we're talking about\n");
      out.write("\t\tvar value = $this.val();\n");
      out.write("\t\tvar type = $this.attr(\"type\");\n");
      out.write("\t\tif (type === \"checkbox\") {\n");
      out.write("\t\t\tvalue = ($this.is(\":checked\") ? value : \"\");\n");
      out.write("\t\t}\n");
      out.write("\t\tif (type === \"radio\") {\n");
      out.write("\t\t\tvalue = ($('input[name=\"' + $this.attr(\"name\") + '\"]:checked').length > 0 ? value : \"\");\n");
      out.write("\t\t}\n");
      out.write("\t\treturn value;\n");
      out.write("\t};\n");
      out.write("\n");
      out.write("  function regexFromString(inputstring) {\n");
      out.write("\t\treturn new RegExp(\"^\" + inputstring + \"$\");\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("  /**\n");
      out.write("   * Thanks to Jason Bunting via StackOverflow.com\n");
      out.write("   *\n");
      out.write("   * http://stackoverflow.com/questions/359788/how-to-execute-a-javascript-function-when-i-have-its-name-as-a-string#answer-359910\n");
      out.write("   * Short link: http://tinyurl.com/executeFunctionByName\n");
      out.write("  **/\n");
      out.write("  function executeFunctionByName(functionName, context /*, args*/) {\n");
      out.write("    var args = Array.prototype.slice.call(arguments).splice(2);\n");
      out.write("    var namespaces = functionName.split(\".\");\n");
      out.write("    var func = namespaces.pop();\n");
      out.write("    for(var i = 0; i < namespaces.length; i++) {\n");
      out.write("      context = context[namespaces[i]];\n");
      out.write("    }\n");
      out.write("    return context[func].apply(this, args);\n");
      out.write("  }\n");
      out.write("\n");
      out.write("\t$.fn.jqBootstrapValidation = function( method ) {\n");
      out.write("\n");
      out.write("\t\tif ( defaults.methods[method] ) {\n");
      out.write("\t\t\treturn defaults.methods[method].apply( this, Array.prototype.slice.call( arguments, 1 ));\n");
      out.write("\t\t} else if ( typeof method === 'object' || ! method ) {\n");
      out.write("\t\t\treturn defaults.methods.init.apply( this, arguments );\n");
      out.write("\t\t} else {\n");
      out.write("\t\t$.error( 'Method ' +  method + ' does not exist on jQuery.jqBootstrapValidation' );\n");
      out.write("\t\t\treturn null;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t};\n");
      out.write("\n");
      out.write("  $.jqBootstrapValidation = function (options) {\n");
      out.write("    $(\":input\").not(\"[type=image],[type=submit]\").jqBootstrapValidation.apply(this,arguments);\n");
      out.write("  };\n");
      out.write("\n");
      out.write("})( jQuery );\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
