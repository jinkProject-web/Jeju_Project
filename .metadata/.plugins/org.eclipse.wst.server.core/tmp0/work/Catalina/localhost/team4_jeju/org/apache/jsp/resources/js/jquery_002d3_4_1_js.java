/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.20
 * Generated at: 2019-07-15 09:14:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.resources.js;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class jquery_002d3_4_1_js extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/header_and_footer/footer_of_main.jsp", Long.valueOf(1563181676918L));
    _jspx_dependants.put("/header_and_footer/header_of_main.jsp", Long.valueOf(1563182008812L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("\r\n");
      out.write("<meta charset=\"utf-8\">\r\n");
      out.write("<meta name=\"viewport\"\r\n");
      out.write("\tcontent=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\r\n");
      out.write("<meta name=\"description\" content=\"\">\r\n");
      out.write("<meta name=\"author\" content=\"\">\r\n");
      out.write("\r\n");
      out.write("<title>Encore Tours</title>\r\n");
      out.write("\r\n");
      out.write("<!-- 링크 순서 중요합니다. <<< 4조, 순서 지켜주세용 -->\r\n");
      out.write("\r\n");
      out.write("<link\r\n");
      out.write("\thref=\"https://fonts.googleapis.com/css?family=Nanum+Gothic+Coding:400,700&display=swap&subset=korean\"\r\n");
      out.write("\trel=\"stylesheet\">\r\n");
      out.write("<link\r\n");
      out.write("\thref=\"https://fonts.googleapis.com/css?family=Noto+Sans+KR:100,300,400,500,700,900&display=swap&subset=korean\"\r\n");
      out.write("\trel=\"stylesheet\">\r\n");
      out.write("\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css?family=Montserrat:400,700\"\r\n");
      out.write("\trel=\"stylesheet\" type=\"text/css\">\r\n");
      out.write("<link\r\n");
      out.write("\thref=\"https://fonts.googleapis.com/css?family=Lato:400,700,400italic,700italic\"\r\n");
      out.write("\trel=\"stylesheet\" type=\"text/css\">\r\n");
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/team4_jeju/resources/style/jeju_gyubeom.css\"\r\n");
      out.write("\t  type=\"text/css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/team4_jeju/resources/style/main_gyubeom.css\"\r\n");
      out.write("\t  type=\"text/css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/team4_jeju/resources/style/fontawesome-all.css\"\r\n");
      out.write("\t  type=\"text/css\">\r\n");
      out.write("\r\n");
      out.write("<script src=\"/team4_jeju/resources/js/jquery-3.4.1.js\"></script>\r\n");
      out.write("<script src=\"/team4_jeju/resources/js/bootstrap-4.3.1.js\"></script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\t<!-- Navigation -->\r\n");
      out.write("\t<header>\r\n");
      out.write("\t\t<nav\r\n");
      out.write("\t\t\tclass=\"navbar navbar-expand-lg bg-encore_tours_title text-uppercase fixed-top\"\r\n");
      out.write("\t\t\tid=\"mainNav\">\r\n");
      out.write("\t\t\t<div class=\"container\">\r\n");
      out.write("\t\t\t\t<a class=\"navbar-brand js-scroll-trigger encore-home-title py-3 px-0 px-lg-3\"\r\n");
      out.write("\t\t\t\t   href=\"main.jsp\" />\r\n");
      out.write("\t\t\t\t   Encore Tours</a>\r\n");
      out.write("\t\t\t\t<button\r\n");
      out.write("\t\t\t\t\tclass=\"navbar-toggler navbar-toggler-right text-uppercase font-weight-bold bg-encore_tours text-white rounded\"\r\n");
      out.write("\t\t\t\t\ttype=\"button\" data-toggle=\"collapse\" data-target=\"#navbarResponsive\"\r\n");
      out.write("\t\t\t\t\taria-controls=\"navbarResponsive\" aria-expanded=\"false\"\r\n");
      out.write("\t\t\t\t\taria-label=\"Toggle navigation\">\r\n");
      out.write("\t\t\t\t\tMenu <i class=\"fas fa-bars\"></i>\r\n");
      out.write("\t\t\t\t</button>\r\n");
      out.write("\t\t\t\t<div class=\"collapse navbar-collapse\" id=\"navbarResponsive\">\r\n");
      out.write("\t\t\t\t\t<ul class=\"navbar-nav ml-auto\">\r\n");
      out.write("\t\t\t\t\t\t<li class=\"nav-item mx-0 mx-lg-1\">\r\n");
      out.write("\t\t\t\t\t\t\t<a class=\"nav-link py-3 px-0 px-lg-3 rounded js-scroll-trigger\"\r\n");
      out.write("\t\t\t\t\t\t\t   href=\"\">나의 여행 페이지</a>\r\n");
      out.write("\t\t\t\t\t\t</li>\r\n");
      out.write("\t\t\t\t\t\t<li class=\"nav-item mx-0 mx-lg-1\">\r\n");
      out.write("\t\t\t\t\t\t\t<a class=\"nav-link py-3 px-0 px-lg-3 rounded js-scroll-trigger\"\r\n");
      out.write("\t\t\t\t\t\t\t   href=\"#about\">Encore Tours 소개</a>\r\n");
      out.write("\t\t\t\t\t\t</li>\r\n");
      out.write("\t\t\t\t\t\t<li class=\"nav-item mx-0 mx-lg-1\">\r\n");
      out.write("\t\t\t\t\t\t\t<a class=\"nav-link py-3 px-0 px-lg-3 rounded js-scroll-trigger\"\r\n");
      out.write("\t\t\t\t\t\t\t   href=\"#contact\">무엇이든 물어보세요</a>\r\n");
      out.write("\t\t\t\t\t\t</li>\r\n");
      out.write("\t\t\t\t\t\t<li class=\"nav-item mx-0 mx-lg-1\">\r\n");
      out.write("\t\t\t\t\t\t\t<a class=\"nav-link py-3 px-0 px-lg-3 rounded js-scroll-trigger\"\r\n");
      out.write("\t\t\t\t\t\t\t   href=\"/team4_jeju/member/login/login.do\">로그인</a>\r\n");
      out.write("\t\t\t\t\t\t</li>\r\n");
      out.write("\t\t\t\t\t\t<li class=\"nav-item mx-0 mx-lg-1\">\r\n");
      out.write("\t\t\t\t\t\t\t<a class=\"nav-link py-3 px-0 px-lg-3 rounded js-scroll-trigger\"\r\n");
      out.write("\t\t\t\t\t\t\t   href=\"\">회원가입</a>\r\n");
      out.write("\t\t\t\t\t\t</li>\r\n");
      out.write("\t\t\t\t\t</ul>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</nav>\r\n");
      out.write("\t</header>\r\n");
      out.write("\t\r\n");
      out.write("\t<!-- 하기 링크 위치 고정 (body 가장 하단에) -->\r\n");
      out.write("\t<!-- Plugin JavaScript -->\r\n");
      out.write("\t<script src=\"/team4_jeju/resources/js/jquery.easing_gyubeom.js\"></script>\r\n");
      out.write("\r\n");
      out.write("\t<!-- Contact Form JavaScript -->\r\n");
      out.write("\t<script src=\"/team4_jeju/resources/js/jqBootstrapValidation_gyubeom.js\"></script>\r\n");
      out.write("\t<script src=\"/team4_jeju/resources/js/contact_me_gyubeom.js\"></script>\r\n");
      out.write("\r\n");
      out.write("\t<!-- Custom scripts for this template -->\r\n");
      out.write("\t<script src=\"/team4_jeju/resources/js/main_nav_gyubeom.js\"></script>\r\n");
      out.write("\t\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
      out.write("/*!\n");
      out.write(" * jQuery JavaScript Library v3.4.1\n");
      out.write(" * https://jquery.com/\n");
      out.write(" *\n");
      out.write(" * Includes Sizzle.js\n");
      out.write(" * https://sizzlejs.com/\n");
      out.write(" *\n");
      out.write(" * Copyright JS Foundation and other contributors\n");
      out.write(" * Released under the MIT license\n");
      out.write(" * https://jquery.org/license\n");
      out.write(" *\n");
      out.write(" * Date: 2019-05-01T21:04Z\n");
      out.write(" */\n");
      out.write("( function( global, factory ) {\n");
      out.write("\n");
      out.write("\t\"use strict\";\n");
      out.write("\n");
      out.write("\tif ( typeof module === \"object\" && typeof module.exports === \"object\" ) {\n");
      out.write("\n");
      out.write("\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n");
      out.write("\t\t// is present, execute the factory and get jQuery.\n");
      out.write("\t\t// For environments that do not have a `window` with a `document`\n");
      out.write("\t\t// (such as Node.js), expose a factory as module.exports.\n");
      out.write("\t\t// This accentuates the need for the creation of a real `window`.\n");
      out.write("\t\t// e.g. var jQuery = require(\"jquery\")(window);\n");
      out.write("\t\t// See ticket #14549 for more info.\n");
      out.write("\t\tmodule.exports = global.document ?\n");
      out.write("\t\t\tfactory( global, true ) :\n");
      out.write("\t\t\tfunction( w ) {\n");
      out.write("\t\t\t\tif ( !w.document ) {\n");
      out.write("\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\treturn factory( w );\n");
      out.write("\t\t\t};\n");
      out.write("\t} else {\n");
      out.write("\t\tfactory( global );\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("// Pass this if window is not defined yet\n");
      out.write("} )( typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n");
      out.write("\n");
      out.write("// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n");
      out.write("// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n");
      out.write("// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n");
      out.write("// enough that all such attempts are guarded in a try block.\n");
      out.write("\"use strict\";\n");
      out.write("\n");
      out.write("var arr = [];\n");
      out.write("\n");
      out.write("var document = window.document;\n");
      out.write("\n");
      out.write("var getProto = Object.getPrototypeOf;\n");
      out.write("\n");
      out.write("var slice = arr.slice;\n");
      out.write("\n");
      out.write("var concat = arr.concat;\n");
      out.write("\n");
      out.write("var push = arr.push;\n");
      out.write("\n");
      out.write("var indexOf = arr.indexOf;\n");
      out.write("\n");
      out.write("var class2type = {};\n");
      out.write("\n");
      out.write("var toString = class2type.toString;\n");
      out.write("\n");
      out.write("var hasOwn = class2type.hasOwnProperty;\n");
      out.write("\n");
      out.write("var fnToString = hasOwn.toString;\n");
      out.write("\n");
      out.write("var ObjectFunctionString = fnToString.call( Object );\n");
      out.write("\n");
      out.write("var support = {};\n");
      out.write("\n");
      out.write("var isFunction = function isFunction( obj ) {\n");
      out.write("\n");
      out.write("      // Support: Chrome <=57, Firefox <=52\n");
      out.write("      // In some browsers, typeof returns \"function\" for HTML <object> elements\n");
      out.write("      // (i.e., `typeof document.createElement( \"object\" ) === \"function\"`).\n");
      out.write("      // We don't want to classify *any* DOM node as a function.\n");
      out.write("      return typeof obj === \"function\" && typeof obj.nodeType !== \"number\";\n");
      out.write("  };\n");
      out.write("\n");
      out.write("\n");
      out.write("var isWindow = function isWindow( obj ) {\n");
      out.write("\t\treturn obj != null && obj === obj.window;\n");
      out.write("\t};\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\tvar preservedScriptAttributes = {\n");
      out.write("\t\ttype: true,\n");
      out.write("\t\tsrc: true,\n");
      out.write("\t\tnonce: true,\n");
      out.write("\t\tnoModule: true\n");
      out.write("\t};\n");
      out.write("\n");
      out.write("\tfunction DOMEval( code, node, doc ) {\n");
      out.write("\t\tdoc = doc || document;\n");
      out.write("\n");
      out.write("\t\tvar i, val,\n");
      out.write("\t\t\tscript = doc.createElement( \"script\" );\n");
      out.write("\n");
      out.write("\t\tscript.text = code;\n");
      out.write("\t\tif ( node ) {\n");
      out.write("\t\t\tfor ( i in preservedScriptAttributes ) {\n");
      out.write("\n");
      out.write("\t\t\t\t// Support: Firefox 64+, Edge 18+\n");
      out.write("\t\t\t\t// Some browsers don't support the \"nonce\" property on scripts.\n");
      out.write("\t\t\t\t// On the other hand, just using `getAttribute` is not enough as\n");
      out.write("\t\t\t\t// the `nonce` attribute is reset to an empty string whenever it\n");
      out.write("\t\t\t\t// becomes browsing-context connected.\n");
      out.write("\t\t\t\t// See https://github.com/whatwg/html/issues/2369\n");
      out.write("\t\t\t\t// See https://html.spec.whatwg.org/#nonce-attributes\n");
      out.write("\t\t\t\t// The `node.getAttribute` check was added for the sake of\n");
      out.write("\t\t\t\t// `jQuery.globalEval` so that it can fake a nonce-containing node\n");
      out.write("\t\t\t\t// via an object.\n");
      out.write("\t\t\t\tval = node[ i ] || node.getAttribute && node.getAttribute( i );\n");
      out.write("\t\t\t\tif ( val ) {\n");
      out.write("\t\t\t\t\tscript.setAttribute( i, val );\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t\tdoc.head.appendChild( script ).parentNode.removeChild( script );\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\n");
      out.write("function toType( obj ) {\n");
      out.write("\tif ( obj == null ) {\n");
      out.write("\t\treturn obj + \"\";\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// Support: Android <=2.3 only (functionish RegExp)\n");
      out.write("\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\n");
      out.write("\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n");
      out.write("\t\ttypeof obj;\n");
      out.write("}\n");
      out.write("/* global Symbol */\n");
      out.write("// Defining this global in .eslintrc.json would create a danger of using the global\n");
      out.write("// unguarded in another place, it seems safer to define global only for this module\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("var\n");
      out.write("\tversion = \"3.4.1\",\n");
      out.write("\n");
      out.write("\t// Define a local copy of jQuery\n");
      out.write("\tjQuery = function( selector, context ) {\n");
      out.write("\n");
      out.write("\t\t// The jQuery object is actually just the init constructor 'enhanced'\n");
      out.write("\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n");
      out.write("\t\treturn new jQuery.fn.init( selector, context );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\t// Support: Android <=4.0 only\n");
      out.write("\t// Make sure we trim BOM and NBSP\n");
      out.write("\trtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n");
      out.write("\n");
      out.write("jQuery.fn = jQuery.prototype = {\n");
      out.write("\n");
      out.write("\t// The current version of jQuery being used\n");
      out.write("\tjquery: version,\n");
      out.write("\n");
      out.write("\tconstructor: jQuery,\n");
      out.write("\n");
      out.write("\t// The default length of a jQuery object is 0\n");
      out.write("\tlength: 0,\n");
      out.write("\n");
      out.write("\ttoArray: function() {\n");
      out.write("\t\treturn slice.call( this );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\t// Get the Nth element in the matched element set OR\n");
      out.write("\t// Get the whole matched element set as a clean array\n");
      out.write("\tget: function( num ) {\n");
      out.write("\n");
      out.write("\t\t// Return all the elements in a clean array\n");
      out.write("\t\tif ( num == null ) {\n");
      out.write("\t\t\treturn slice.call( this );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Return just the one element from the set\n");
      out.write("\t\treturn num < 0 ? this[ num + this.length ] : this[ num ];\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\t// Take an array of elements and push it onto the stack\n");
      out.write("\t// (returning the new matched element set)\n");
      out.write("\tpushStack: function( elems ) {\n");
      out.write("\n");
      out.write("\t\t// Build a new jQuery matched element set\n");
      out.write("\t\tvar ret = jQuery.merge( this.constructor(), elems );\n");
      out.write("\n");
      out.write("\t\t// Add the old object onto the stack (as a reference)\n");
      out.write("\t\tret.prevObject = this;\n");
      out.write("\n");
      out.write("\t\t// Return the newly-formed element set\n");
      out.write("\t\treturn ret;\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\t// Execute a callback for every element in the matched set.\n");
      out.write("\teach: function( callback ) {\n");
      out.write("\t\treturn jQuery.each( this, callback );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tmap: function( callback ) {\n");
      out.write("\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\n");
      out.write("\t\t\treturn callback.call( elem, i, elem );\n");
      out.write("\t\t} ) );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tslice: function() {\n");
      out.write("\t\treturn this.pushStack( slice.apply( this, arguments ) );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tfirst: function() {\n");
      out.write("\t\treturn this.eq( 0 );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tlast: function() {\n");
      out.write("\t\treturn this.eq( -1 );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\teq: function( i ) {\n");
      out.write("\t\tvar len = this.length,\n");
      out.write("\t\t\tj = +i + ( i < 0 ? len : 0 );\n");
      out.write("\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tend: function() {\n");
      out.write("\t\treturn this.prevObject || this.constructor();\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\t// For internal use only.\n");
      out.write("\t// Behaves like an Array's method, not like a jQuery method.\n");
      out.write("\tpush: push,\n");
      out.write("\tsort: arr.sort,\n");
      out.write("\tsplice: arr.splice\n");
      out.write("};\n");
      out.write("\n");
      out.write("jQuery.extend = jQuery.fn.extend = function() {\n");
      out.write("\tvar options, name, src, copy, copyIsArray, clone,\n");
      out.write("\t\ttarget = arguments[ 0 ] || {},\n");
      out.write("\t\ti = 1,\n");
      out.write("\t\tlength = arguments.length,\n");
      out.write("\t\tdeep = false;\n");
      out.write("\n");
      out.write("\t// Handle a deep copy situation\n");
      out.write("\tif ( typeof target === \"boolean\" ) {\n");
      out.write("\t\tdeep = target;\n");
      out.write("\n");
      out.write("\t\t// Skip the boolean and the target\n");
      out.write("\t\ttarget = arguments[ i ] || {};\n");
      out.write("\t\ti++;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// Handle case when target is a string or something (possible in deep copy)\n");
      out.write("\tif ( typeof target !== \"object\" && !isFunction( target ) ) {\n");
      out.write("\t\ttarget = {};\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// Extend jQuery itself if only one argument is passed\n");
      out.write("\tif ( i === length ) {\n");
      out.write("\t\ttarget = this;\n");
      out.write("\t\ti--;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfor ( ; i < length; i++ ) {\n");
      out.write("\n");
      out.write("\t\t// Only deal with non-null/undefined values\n");
      out.write("\t\tif ( ( options = arguments[ i ] ) != null ) {\n");
      out.write("\n");
      out.write("\t\t\t// Extend the base object\n");
      out.write("\t\t\tfor ( name in options ) {\n");
      out.write("\t\t\t\tcopy = options[ name ];\n");
      out.write("\n");
      out.write("\t\t\t\t// Prevent Object.prototype pollution\n");
      out.write("\t\t\t\t// Prevent never-ending loop\n");
      out.write("\t\t\t\tif ( name === \"__proto__\" || target === copy ) {\n");
      out.write("\t\t\t\t\tcontinue;\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t// Recurse if we're merging plain objects or arrays\n");
      out.write("\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n");
      out.write("\t\t\t\t\t( copyIsArray = Array.isArray( copy ) ) ) ) {\n");
      out.write("\t\t\t\t\tsrc = target[ name ];\n");
      out.write("\n");
      out.write("\t\t\t\t\t// Ensure proper type for the source value\n");
      out.write("\t\t\t\t\tif ( copyIsArray && !Array.isArray( src ) ) {\n");
      out.write("\t\t\t\t\t\tclone = [];\n");
      out.write("\t\t\t\t\t} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {\n");
      out.write("\t\t\t\t\t\tclone = {};\n");
      out.write("\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\tclone = src;\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t\tcopyIsArray = false;\n");
      out.write("\n");
      out.write("\t\t\t\t\t// Never move original objects, clone them\n");
      out.write("\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n");
      out.write("\n");
      out.write("\t\t\t\t// Don't bring in undefined values\n");
      out.write("\t\t\t\t} else if ( copy !== undefined ) {\n");
      out.write("\t\t\t\t\ttarget[ name ] = copy;\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// Return the modified object\n");
      out.write("\treturn target;\n");
      out.write("};\n");
      out.write("\n");
      out.write("jQuery.extend( {\n");
      out.write("\n");
      out.write("\t// Unique for each copy of jQuery on the page\n");
      out.write("\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n");
      out.write("\n");
      out.write("\t// Assume jQuery is ready without the ready module\n");
      out.write("\tisReady: true,\n");
      out.write("\n");
      out.write("\terror: function( msg ) {\n");
      out.write("\t\tthrow new Error( msg );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tnoop: function() {},\n");
      out.write("\n");
      out.write("\tisPlainObject: function( obj ) {\n");
      out.write("\t\tvar proto, Ctor;\n");
      out.write("\n");
      out.write("\t\t// Detect obvious negatives\n");
      out.write("\t\t// Use toString instead of jQuery.type to catch host objects\n");
      out.write("\t\tif ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n");
      out.write("\t\t\treturn false;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tproto = getProto( obj );\n");
      out.write("\n");
      out.write("\t\t// Objects with no prototype (e.g., `Object.create( null )`) are plain\n");
      out.write("\t\tif ( !proto ) {\n");
      out.write("\t\t\treturn true;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Objects with prototype are plain iff they were constructed by a global Object function\n");
      out.write("\t\tCtor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n");
      out.write("\t\treturn typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tisEmptyObject: function( obj ) {\n");
      out.write("\t\tvar name;\n");
      out.write("\n");
      out.write("\t\tfor ( name in obj ) {\n");
      out.write("\t\t\treturn false;\n");
      out.write("\t\t}\n");
      out.write("\t\treturn true;\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\t// Evaluates a script in a global context\n");
      out.write("\tglobalEval: function( code, options ) {\n");
      out.write("\t\tDOMEval( code, { nonce: options && options.nonce } );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\teach: function( obj, callback ) {\n");
      out.write("\t\tvar length, i = 0;\n");
      out.write("\n");
      out.write("\t\tif ( isArrayLike( obj ) ) {\n");
      out.write("\t\t\tlength = obj.length;\n");
      out.write("\t\t\tfor ( ; i < length; i++ ) {\n");
      out.write("\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n");
      out.write("\t\t\t\t\tbreak;\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\tfor ( i in obj ) {\n");
      out.write("\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n");
      out.write("\t\t\t\t\tbreak;\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\treturn obj;\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\t// Support: Android <=4.0 only\n");
      out.write("\ttrim: function( text ) {\n");
      out.write("\t\treturn text == null ?\n");
      out.write("\t\t\t\"\" :\n");
      out.write("\t\t\t( text + \"\" ).replace( rtrim, \"\" );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\t// results is for internal usage only\n");
      out.write("\tmakeArray: function( arr, results ) {\n");
      out.write("\t\tvar ret = results || [];\n");
      out.write("\n");
      out.write("\t\tif ( arr != null ) {\n");
      out.write("\t\t\tif ( isArrayLike( Object( arr ) ) ) {\n");
      out.write("\t\t\t\tjQuery.merge( ret,\n");
      out.write("\t\t\t\t\ttypeof arr === \"string\" ?\n");
      out.write("\t\t\t\t\t[ arr ] : arr\n");
      out.write("\t\t\t\t);\n");
      out.write("\t\t\t} else {\n");
      out.write("\t\t\t\tpush.call( ret, arr );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\treturn ret;\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tinArray: function( elem, arr, i ) {\n");
      out.write("\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\t// Support: Android <=4.0 only, PhantomJS 1 only\n");
      out.write("\t// push.apply(_, arraylike) throws on ancient WebKit\n");
      out.write("\tmerge: function( first, second ) {\n");
      out.write("\t\tvar len = +second.length,\n");
      out.write("\t\t\tj = 0,\n");
      out.write("\t\t\ti = first.length;\n");
      out.write("\n");
      out.write("\t\tfor ( ; j < len; j++ ) {\n");
      out.write("\t\t\tfirst[ i++ ] = second[ j ];\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tfirst.length = i;\n");
      out.write("\n");
      out.write("\t\treturn first;\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tgrep: function( elems, callback, invert ) {\n");
      out.write("\t\tvar callbackInverse,\n");
      out.write("\t\t\tmatches = [],\n");
      out.write("\t\t\ti = 0,\n");
      out.write("\t\t\tlength = elems.length,\n");
      out.write("\t\t\tcallbackExpect = !invert;\n");
      out.write("\n");
      out.write("\t\t// Go through the array, only saving the items\n");
      out.write("\t\t// that pass the validator function\n");
      out.write("\t\tfor ( ; i < length; i++ ) {\n");
      out.write("\t\t\tcallbackInverse = !callback( elems[ i ], i );\n");
      out.write("\t\t\tif ( callbackInverse !== callbackExpect ) {\n");
      out.write("\t\t\t\tmatches.push( elems[ i ] );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\treturn matches;\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\t// arg is for internal usage only\n");
      out.write("\tmap: function( elems, callback, arg ) {\n");
      out.write("\t\tvar length, value,\n");
      out.write("\t\t\ti = 0,\n");
      out.write("\t\t\tret = [];\n");
      out.write("\n");
      out.write("\t\t// Go through the array, translating each of the items to their new values\n");
      out.write("\t\tif ( isArrayLike( elems ) ) {\n");
      out.write("\t\t\tlength = elems.length;\n");
      out.write("\t\t\tfor ( ; i < length; i++ ) {\n");
      out.write("\t\t\t\tvalue = callback( elems[ i ], i, arg );\n");
      out.write("\n");
      out.write("\t\t\t\tif ( value != null ) {\n");
      out.write("\t\t\t\t\tret.push( value );\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t// Go through every key on the object,\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\tfor ( i in elems ) {\n");
      out.write("\t\t\t\tvalue = callback( elems[ i ], i, arg );\n");
      out.write("\n");
      out.write("\t\t\t\tif ( value != null ) {\n");
      out.write("\t\t\t\t\tret.push( value );\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Flatten any nested arrays\n");
      out.write("\t\treturn concat.apply( [], ret );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\t// A global GUID counter for objects\n");
      out.write("\tguid: 1,\n");
      out.write("\n");
      out.write("\t// jQuery.support is not used in Core but other projects attach their\n");
      out.write("\t// properties to it so it needs to exist.\n");
      out.write("\tsupport: support\n");
      out.write("} );\n");
      out.write("\n");
      out.write("if ( typeof Symbol === \"function\" ) {\n");
      out.write("\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n");
      out.write("}\n");
      out.write("\n");
      out.write("// Populate the class2type map\n");
      out.write("jQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\n");
      out.write("function( i, name ) {\n");
      out.write("\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n");
      out.write("} );\n");
      out.write("\n");
      out.write("function isArrayLike( obj ) {\n");
      out.write("\n");
      out.write("\t// Support: real iOS 8.2 only (not reproducible in simulator)\n");
      out.write("\t// `in` check used to prevent JIT error (gh-2145)\n");
      out.write("\t// hasOwn isn't used here due to false negatives\n");
      out.write("\t// regarding Nodelist length in IE\n");
      out.write("\tvar length = !!obj && \"length\" in obj && obj.length,\n");
      out.write("\t\ttype = toType( obj );\n");
      out.write("\n");
      out.write("\tif ( isFunction( obj ) || isWindow( obj ) ) {\n");
      out.write("\t\treturn false;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\treturn type === \"array\" || length === 0 ||\n");
      out.write("\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n");
      out.write("}\n");
      out.write("var Sizzle =\n");
      out.write("/*!\n");
      out.write(" * Sizzle CSS Selector Engine v2.3.4\n");
      out.write(" * https://sizzlejs.com/\n");
      out.write(" *\n");
      out.write(" * Copyright JS Foundation and other contributors\n");
      out.write(" * Released under the MIT license\n");
      out.write(" * https://js.foundation/\n");
      out.write(" *\n");
      out.write(" * Date: 2019-04-08\n");
      out.write(" */\n");
      out.write("(function( window ) {\n");
      out.write("\n");
      out.write("var i,\n");
      out.write("\tsupport,\n");
      out.write("\tExpr,\n");
      out.write("\tgetText,\n");
      out.write("\tisXML,\n");
      out.write("\ttokenize,\n");
      out.write("\tcompile,\n");
      out.write("\tselect,\n");
      out.write("\toutermostContext,\n");
      out.write("\tsortInput,\n");
      out.write("\thasDuplicate,\n");
      out.write("\n");
      out.write("\t// Local document vars\n");
      out.write("\tsetDocument,\n");
      out.write("\tdocument,\n");
      out.write("\tdocElem,\n");
      out.write("\tdocumentIsHTML,\n");
      out.write("\trbuggyQSA,\n");
      out.write("\trbuggyMatches,\n");
      out.write("\tmatches,\n");
      out.write("\tcontains,\n");
      out.write("\n");
      out.write("\t// Instance-specific data\n");
      out.write("\texpando = \"sizzle\" + 1 * new Date(),\n");
      out.write("\tpreferredDoc = window.document,\n");
      out.write("\tdirruns = 0,\n");
      out.write("\tdone = 0,\n");
      out.write("\tclassCache = createCache(),\n");
      out.write("\ttokenCache = createCache(),\n");
      out.write("\tcompilerCache = createCache(),\n");
      out.write("\tnonnativeSelectorCache = createCache(),\n");
      out.write("\tsortOrder = function( a, b ) {\n");
      out.write("\t\tif ( a === b ) {\n");
      out.write("\t\t\thasDuplicate = true;\n");
      out.write("\t\t}\n");
      out.write("\t\treturn 0;\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\t// Instance methods\n");
      out.write("\thasOwn = ({}).hasOwnProperty,\n");
      out.write("\tarr = [],\n");
      out.write("\tpop = arr.pop,\n");
      out.write("\tpush_native = arr.push,\n");
      out.write("\tpush = arr.push,\n");
      out.write("\tslice = arr.slice,\n");
      out.write("\t// Use a stripped-down indexOf as it's faster than native\n");
      out.write("\t// https://jsperf.com/thor-indexof-vs-for/5\n");
      out.write("\tindexOf = function( list, elem ) {\n");
      out.write("\t\tvar i = 0,\n");
      out.write("\t\t\tlen = list.length;\n");
      out.write("\t\tfor ( ; i < len; i++ ) {\n");
      out.write("\t\t\tif ( list[i] === elem ) {\n");
      out.write("\t\t\t\treturn i;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t\treturn -1;\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n");
      out.write("\n");
      out.write("\t// Regular expressions\n");
      out.write("\n");
      out.write("\t// http://www.w3.org/TR/css3-selectors/#whitespace\n");
      out.write("\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n");
      out.write("\n");
      out.write("\t// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n");
      out.write("\tidentifier = \"(?:\\\\\\\\.|[\\\\w-]|[^\\0-\\\\xa0])+\",\n");
      out.write("\n");
      out.write("\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n");
      out.write("\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n");
      out.write("\t\t// Operator (capture 2)\n");
      out.write("\t\t\"*([*^$|!~]?=)\" + whitespace +\n");
      out.write("\t\t// \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n");
      out.write("\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" + whitespace +\n");
      out.write("\t\t\"*\\\\]\",\n");
      out.write("\n");
      out.write("\tpseudos = \":(\" + identifier + \")(?:\\\\((\" +\n");
      out.write("\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n");
      out.write("\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n");
      out.write("\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n");
      out.write("\t\t// 2. simple (capture 6)\n");
      out.write("\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n");
      out.write("\t\t// 3. anything else (capture 2)\n");
      out.write("\t\t\".*\" +\n");
      out.write("\t\t\")\\\\)|)\",\n");
      out.write("\n");
      out.write("\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n");
      out.write("\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n");
      out.write("\trtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\" ),\n");
      out.write("\n");
      out.write("\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n");
      out.write("\trcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\" ),\n");
      out.write("\trdescend = new RegExp( whitespace + \"|>\" ),\n");
      out.write("\n");
      out.write("\trpseudo = new RegExp( pseudos ),\n");
      out.write("\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n");
      out.write("\n");
      out.write("\tmatchExpr = {\n");
      out.write("\t\t\"ID\": new RegExp( \"^#(\" + identifier + \")\" ),\n");
      out.write("\t\t\"CLASS\": new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n");
      out.write("\t\t\"TAG\": new RegExp( \"^(\" + identifier + \"|[*])\" ),\n");
      out.write("\t\t\"ATTR\": new RegExp( \"^\" + attributes ),\n");
      out.write("\t\t\"PSEUDO\": new RegExp( \"^\" + pseudos ),\n");
      out.write("\t\t\"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace +\n");
      out.write("\t\t\t\"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace +\n");
      out.write("\t\t\t\"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n");
      out.write("\t\t\"bool\": new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n");
      out.write("\t\t// For use in libraries implementing .is()\n");
      out.write("\t\t// We use this for POS matching in `select`\n");
      out.write("\t\t\"needsContext\": new RegExp( \"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" +\n");
      out.write("\t\t\twhitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\trhtml = /HTML$/i,\n");
      out.write("\trinputs = /^(?:input|select|textarea|button)$/i,\n");
      out.write("\trheader = /^h\\d$/i,\n");
      out.write("\n");
      out.write("\trnative = /^[^{]+\\{\\s*\\[native \\w/,\n");
      out.write("\n");
      out.write("\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n");
      out.write("\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n");
      out.write("\n");
      out.write("\trsibling = /[+~]/,\n");
      out.write("\n");
      out.write("\t// CSS escapes\n");
      out.write("\t// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n");
      out.write("\trunescape = new RegExp( \"\\\\\\\\([\\\\da-f]{1,6}\" + whitespace + \"?|(\" + whitespace + \")|.)\", \"ig\" ),\n");
      out.write("\tfunescape = function( _, escaped, escapedWhitespace ) {\n");
      out.write("\t\tvar high = \"0x\" + escaped - 0x10000;\n");
      out.write("\t\t// NaN means non-codepoint\n");
      out.write("\t\t// Support: Firefox<24\n");
      out.write("\t\t// Workaround erroneous numeric interpretation of +\"0x\"\n");
      out.write("\t\treturn high !== high || escapedWhitespace ?\n");
      out.write("\t\t\tescaped :\n");
      out.write("\t\t\thigh < 0 ?\n");
      out.write("\t\t\t\t// BMP codepoint\n");
      out.write("\t\t\t\tString.fromCharCode( high + 0x10000 ) :\n");
      out.write("\t\t\t\t// Supplemental Plane codepoint (surrogate pair)\n");
      out.write("\t\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\t// CSS string/identifier serialization\n");
      out.write("\t// https://drafts.csswg.org/cssom/#common-serializing-idioms\n");
      out.write("\trcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n");
      out.write("\tfcssescape = function( ch, asCodePoint ) {\n");
      out.write("\t\tif ( asCodePoint ) {\n");
      out.write("\n");
      out.write("\t\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n");
      out.write("\t\t\tif ( ch === \"\\0\" ) {\n");
      out.write("\t\t\t\treturn \"\\uFFFD\";\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n");
      out.write("\t\t\treturn ch.slice( 0, -1 ) + \"\\\\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + \" \";\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Other potentially-special ASCII characters get backslash-escaped\n");
      out.write("\t\treturn \"\\\\\" + ch;\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\t// Used for iframes\n");
      out.write("\t// See setDocument()\n");
      out.write("\t// Removing the function wrapper causes a \"Permission Denied\"\n");
      out.write("\t// error in IE\n");
      out.write("\tunloadHandler = function() {\n");
      out.write("\t\tsetDocument();\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tinDisabledFieldset = addCombinator(\n");
      out.write("\t\tfunction( elem ) {\n");
      out.write("\t\t\treturn elem.disabled === true && elem.nodeName.toLowerCase() === \"fieldset\";\n");
      out.write("\t\t},\n");
      out.write("\t\t{ dir: \"parentNode\", next: \"legend\" }\n");
      out.write("\t);\n");
      out.write("\n");
      out.write("// Optimize for push.apply( _, NodeList )\n");
      out.write("try {\n");
      out.write("\tpush.apply(\n");
      out.write("\t\t(arr = slice.call( preferredDoc.childNodes )),\n");
      out.write("\t\tpreferredDoc.childNodes\n");
      out.write("\t);\n");
      out.write("\t// Support: Android<4.0\n");
      out.write("\t// Detect silently failing push.apply\n");
      out.write("\tarr[ preferredDoc.childNodes.length ].nodeType;\n");
      out.write("} catch ( e ) {\n");
      out.write("\tpush = { apply: arr.length ?\n");
      out.write("\n");
      out.write("\t\t// Leverage slice if possible\n");
      out.write("\t\tfunction( target, els ) {\n");
      out.write("\t\t\tpush_native.apply( target, slice.call(els) );\n");
      out.write("\t\t} :\n");
      out.write("\n");
      out.write("\t\t// Support: IE<9\n");
      out.write("\t\t// Otherwise append directly\n");
      out.write("\t\tfunction( target, els ) {\n");
      out.write("\t\t\tvar j = target.length,\n");
      out.write("\t\t\t\ti = 0;\n");
      out.write("\t\t\t// Can't trust NodeList.length\n");
      out.write("\t\t\twhile ( (target[j++] = els[i++]) ) {}\n");
      out.write("\t\t\ttarget.length = j - 1;\n");
      out.write("\t\t}\n");
      out.write("\t};\n");
      out.write("}\n");
      out.write("\n");
      out.write("function Sizzle( selector, context, results, seed ) {\n");
      out.write("\tvar m, i, elem, nid, match, groups, newSelector,\n");
      out.write("\t\tnewContext = context && context.ownerDocument,\n");
      out.write("\n");
      out.write("\t\t// nodeType defaults to 9, since context defaults to document\n");
      out.write("\t\tnodeType = context ? context.nodeType : 9;\n");
      out.write("\n");
      out.write("\tresults = results || [];\n");
      out.write("\n");
      out.write("\t// Return early from calls with invalid selector or context\n");
      out.write("\tif ( typeof selector !== \"string\" || !selector ||\n");
      out.write("\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n");
      out.write("\n");
      out.write("\t\treturn results;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// Try to shortcut find operations (as opposed to filters) in HTML documents\n");
      out.write("\tif ( !seed ) {\n");
      out.write("\n");
      out.write("\t\tif ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {\n");
      out.write("\t\t\tsetDocument( context );\n");
      out.write("\t\t}\n");
      out.write("\t\tcontext = context || document;\n");
      out.write("\n");
      out.write("\t\tif ( documentIsHTML ) {\n");
      out.write("\n");
      out.write("\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n");
      out.write("\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\n");
      out.write("\t\t\tif ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {\n");
      out.write("\n");
      out.write("\t\t\t\t// ID selector\n");
      out.write("\t\t\t\tif ( (m = match[1]) ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t// Document context\n");
      out.write("\t\t\t\t\tif ( nodeType === 9 ) {\n");
      out.write("\t\t\t\t\t\tif ( (elem = context.getElementById( m )) ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t// Support: IE, Opera, Webkit\n");
      out.write("\t\t\t\t\t\t\t// TODO: identify versions\n");
      out.write("\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n");
      out.write("\t\t\t\t\t\t\tif ( elem.id === m ) {\n");
      out.write("\t\t\t\t\t\t\t\tresults.push( elem );\n");
      out.write("\t\t\t\t\t\t\t\treturn results;\n");
      out.write("\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\t\treturn results;\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t\t// Element context\n");
      out.write("\t\t\t\t\t} else {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t// Support: IE, Opera, Webkit\n");
      out.write("\t\t\t\t\t\t// TODO: identify versions\n");
      out.write("\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n");
      out.write("\t\t\t\t\t\tif ( newContext && (elem = newContext.getElementById( m )) &&\n");
      out.write("\t\t\t\t\t\t\tcontains( context, elem ) &&\n");
      out.write("\t\t\t\t\t\t\telem.id === m ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\tresults.push( elem );\n");
      out.write("\t\t\t\t\t\t\treturn results;\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t// Type selector\n");
      out.write("\t\t\t\t} else if ( match[2] ) {\n");
      out.write("\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\n");
      out.write("\t\t\t\t\treturn results;\n");
      out.write("\n");
      out.write("\t\t\t\t// Class selector\n");
      out.write("\t\t\t\t} else if ( (m = match[3]) && support.getElementsByClassName &&\n");
      out.write("\t\t\t\t\tcontext.getElementsByClassName ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\n");
      out.write("\t\t\t\t\treturn results;\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Take advantage of querySelectorAll\n");
      out.write("\t\t\tif ( support.qsa &&\n");
      out.write("\t\t\t\t!nonnativeSelectorCache[ selector + \" \" ] &&\n");
      out.write("\t\t\t\t(!rbuggyQSA || !rbuggyQSA.test( selector )) &&\n");
      out.write("\n");
      out.write("\t\t\t\t// Support: IE 8 only\n");
      out.write("\t\t\t\t// Exclude object elements\n");
      out.write("\t\t\t\t(nodeType !== 1 || context.nodeName.toLowerCase() !== \"object\") ) {\n");
      out.write("\n");
      out.write("\t\t\t\tnewSelector = selector;\n");
      out.write("\t\t\t\tnewContext = context;\n");
      out.write("\n");
      out.write("\t\t\t\t// qSA considers elements outside a scoping root when evaluating child or\n");
      out.write("\t\t\t\t// descendant combinators, which is not what we want.\n");
      out.write("\t\t\t\t// In such cases, we work around the behavior by prefixing every selector in the\n");
      out.write("\t\t\t\t// list with an ID selector referencing the scope context.\n");
      out.write("\t\t\t\t// Thanks to Andrew Dupont for this technique.\n");
      out.write("\t\t\t\tif ( nodeType === 1 && rdescend.test( selector ) ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t// Capture the context ID, setting it first if necessary\n");
      out.write("\t\t\t\t\tif ( (nid = context.getAttribute( \"id\" )) ) {\n");
      out.write("\t\t\t\t\t\tnid = nid.replace( rcssescape, fcssescape );\n");
      out.write("\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\tcontext.setAttribute( \"id\", (nid = expando) );\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t\t// Prefix every selector in the list\n");
      out.write("\t\t\t\t\tgroups = tokenize( selector );\n");
      out.write("\t\t\t\t\ti = groups.length;\n");
      out.write("\t\t\t\t\twhile ( i-- ) {\n");
      out.write("\t\t\t\t\t\tgroups[i] = \"#\" + nid + \" \" + toSelector( groups[i] );\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t\tnewSelector = groups.join( \",\" );\n");
      out.write("\n");
      out.write("\t\t\t\t\t// Expand context for sibling selectors\n");
      out.write("\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n");
      out.write("\t\t\t\t\t\tcontext;\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\ttry {\n");
      out.write("\t\t\t\t\tpush.apply( results,\n");
      out.write("\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\n");
      out.write("\t\t\t\t\t);\n");
      out.write("\t\t\t\t\treturn results;\n");
      out.write("\t\t\t\t} catch ( qsaError ) {\n");
      out.write("\t\t\t\t\tnonnativeSelectorCache( selector, true );\n");
      out.write("\t\t\t\t} finally {\n");
      out.write("\t\t\t\t\tif ( nid === expando ) {\n");
      out.write("\t\t\t\t\t\tcontext.removeAttribute( \"id\" );\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// All others\n");
      out.write("\treturn select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n");
      out.write("}\n");
      out.write("\n");
      out.write("/**\n");
      out.write(" * Create key-value caches of limited size\n");
      out.write(" * @returns {function(string, object)} Returns the Object data after storing it on itself with\n");
      out.write(" *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n");
      out.write(" *\tdeleting the oldest entry\n");
      out.write(" */\n");
      out.write("function createCache() {\n");
      out.write("\tvar keys = [];\n");
      out.write("\n");
      out.write("\tfunction cache( key, value ) {\n");
      out.write("\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n");
      out.write("\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n");
      out.write("\t\t\t// Only keep the most recent entries\n");
      out.write("\t\t\tdelete cache[ keys.shift() ];\n");
      out.write("\t\t}\n");
      out.write("\t\treturn (cache[ key + \" \" ] = value);\n");
      out.write("\t}\n");
      out.write("\treturn cache;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/**\n");
      out.write(" * Mark a function for special use by Sizzle\n");
      out.write(" * @param {Function} fn The function to mark\n");
      out.write(" */\n");
      out.write("function markFunction( fn ) {\n");
      out.write("\tfn[ expando ] = true;\n");
      out.write("\treturn fn;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/**\n");
      out.write(" * Support testing using an element\n");
      out.write(" * @param {Function} fn Passed the created element and returns a boolean result\n");
      out.write(" */\n");
      out.write("function assert( fn ) {\n");
      out.write("\tvar el = document.createElement(\"fieldset\");\n");
      out.write("\n");
      out.write("\ttry {\n");
      out.write("\t\treturn !!fn( el );\n");
      out.write("\t} catch (e) {\n");
      out.write("\t\treturn false;\n");
      out.write("\t} finally {\n");
      out.write("\t\t// Remove from its parent by default\n");
      out.write("\t\tif ( el.parentNode ) {\n");
      out.write("\t\t\tel.parentNode.removeChild( el );\n");
      out.write("\t\t}\n");
      out.write("\t\t// release memory in IE\n");
      out.write("\t\tel = null;\n");
      out.write("\t}\n");
      out.write("}\n");
      out.write("\n");
      out.write("/**\n");
      out.write(" * Adds the same handler for all of the specified attrs\n");
      out.write(" * @param {String} attrs Pipe-separated list of attributes\n");
      out.write(" * @param {Function} handler The method that will be applied\n");
      out.write(" */\n");
      out.write("function addHandle( attrs, handler ) {\n");
      out.write("\tvar arr = attrs.split(\"|\"),\n");
      out.write("\t\ti = arr.length;\n");
      out.write("\n");
      out.write("\twhile ( i-- ) {\n");
      out.write("\t\tExpr.attrHandle[ arr[i] ] = handler;\n");
      out.write("\t}\n");
      out.write("}\n");
      out.write("\n");
      out.write("/**\n");
      out.write(" * Checks document order of two siblings\n");
      out.write(" * @param {Element} a\n");
      out.write(" * @param {Element} b\n");
      out.write(" * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n");
      out.write(" */\n");
      out.write("function siblingCheck( a, b ) {\n");
      out.write("\tvar cur = b && a,\n");
      out.write("\t\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&\n");
      out.write("\t\t\ta.sourceIndex - b.sourceIndex;\n");
      out.write("\n");
      out.write("\t// Use IE sourceIndex if available on both nodes\n");
      out.write("\tif ( diff ) {\n");
      out.write("\t\treturn diff;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// Check if b follows a\n");
      out.write("\tif ( cur ) {\n");
      out.write("\t\twhile ( (cur = cur.nextSibling) ) {\n");
      out.write("\t\t\tif ( cur === b ) {\n");
      out.write("\t\t\t\treturn -1;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\treturn a ? 1 : -1;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/**\n");
      out.write(" * Returns a function to use in pseudos for input types\n");
      out.write(" * @param {String} type\n");
      out.write(" */\n");
      out.write("function createInputPseudo( type ) {\n");
      out.write("\treturn function( elem ) {\n");
      out.write("\t\tvar name = elem.nodeName.toLowerCase();\n");
      out.write("\t\treturn name === \"input\" && elem.type === type;\n");
      out.write("\t};\n");
      out.write("}\n");
      out.write("\n");
      out.write("/**\n");
      out.write(" * Returns a function to use in pseudos for buttons\n");
      out.write(" * @param {String} type\n");
      out.write(" */\n");
      out.write("function createButtonPseudo( type ) {\n");
      out.write("\treturn function( elem ) {\n");
      out.write("\t\tvar name = elem.nodeName.toLowerCase();\n");
      out.write("\t\treturn (name === \"input\" || name === \"button\") && elem.type === type;\n");
      out.write("\t};\n");
      out.write("}\n");
      out.write("\n");
      out.write("/**\n");
      out.write(" * Returns a function to use in pseudos for :enabled/:disabled\n");
      out.write(" * @param {Boolean} disabled true for :disabled; false for :enabled\n");
      out.write(" */\n");
      out.write("function createDisabledPseudo( disabled ) {\n");
      out.write("\n");
      out.write("\t// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n");
      out.write("\treturn function( elem ) {\n");
      out.write("\n");
      out.write("\t\t// Only certain elements can match :enabled or :disabled\n");
      out.write("\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n");
      out.write("\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n");
      out.write("\t\tif ( \"form\" in elem ) {\n");
      out.write("\n");
      out.write("\t\t\t// Check for inherited disabledness on relevant non-disabled elements:\n");
      out.write("\t\t\t// * listed form-associated elements in a disabled fieldset\n");
      out.write("\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n");
      out.write("\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n");
      out.write("\t\t\t// * option elements in a disabled optgroup\n");
      out.write("\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n");
      out.write("\t\t\t// All such elements have a \"form\" property.\n");
      out.write("\t\t\tif ( elem.parentNode && elem.disabled === false ) {\n");
      out.write("\n");
      out.write("\t\t\t\t// Option elements defer to a parent optgroup if present\n");
      out.write("\t\t\t\tif ( \"label\" in elem ) {\n");
      out.write("\t\t\t\t\tif ( \"label\" in elem.parentNode ) {\n");
      out.write("\t\t\t\t\t\treturn elem.parentNode.disabled === disabled;\n");
      out.write("\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\treturn elem.disabled === disabled;\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t// Support: IE 6 - 11\n");
      out.write("\t\t\t\t// Use the isDisabled shortcut property to check for disabled fieldset ancestors\n");
      out.write("\t\t\t\treturn elem.isDisabled === disabled ||\n");
      out.write("\n");
      out.write("\t\t\t\t\t// Where there is no isDisabled, check manually\n");
      out.write("\t\t\t\t\t/* jshint -W018 */\n");
      out.write("\t\t\t\t\telem.isDisabled !== !disabled &&\n");
      out.write("\t\t\t\t\t\tinDisabledFieldset( elem ) === disabled;\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\treturn elem.disabled === disabled;\n");
      out.write("\n");
      out.write("\t\t// Try to winnow out elements that can't be disabled before trusting the disabled property.\n");
      out.write("\t\t// Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n");
      out.write("\t\t// even exist on them, let alone have a boolean value.\n");
      out.write("\t\t} else if ( \"label\" in elem ) {\n");
      out.write("\t\t\treturn elem.disabled === disabled;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Remaining elements are neither :enabled nor :disabled\n");
      out.write("\t\treturn false;\n");
      out.write("\t};\n");
      out.write("}\n");
      out.write("\n");
      out.write("/**\n");
      out.write(" * Returns a function to use in pseudos for positionals\n");
      out.write(" * @param {Function} fn\n");
      out.write(" */\n");
      out.write("function createPositionalPseudo( fn ) {\n");
      out.write("\treturn markFunction(function( argument ) {\n");
      out.write("\t\targument = +argument;\n");
      out.write("\t\treturn markFunction(function( seed, matches ) {\n");
      out.write("\t\t\tvar j,\n");
      out.write("\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\n");
      out.write("\t\t\t\ti = matchIndexes.length;\n");
      out.write("\n");
      out.write("\t\t\t// Match elements found at the specified indexes\n");
      out.write("\t\t\twhile ( i-- ) {\n");
      out.write("\t\t\t\tif ( seed[ (j = matchIndexes[i]) ] ) {\n");
      out.write("\t\t\t\t\tseed[j] = !(matches[j] = seed[j]);\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t});\n");
      out.write("\t});\n");
      out.write("}\n");
      out.write("\n");
      out.write("/**\n");
      out.write(" * Checks a node for validity as a Sizzle context\n");
      out.write(" * @param {Element|Object=} context\n");
      out.write(" * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n");
      out.write(" */\n");
      out.write("function testContext( context ) {\n");
      out.write("\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n");
      out.write("}\n");
      out.write("\n");
      out.write("// Expose support vars for convenience\n");
      out.write("support = Sizzle.support = {};\n");
      out.write("\n");
      out.write("/**\n");
      out.write(" * Detects XML nodes\n");
      out.write(" * @param {Element|Object} elem An element or a document\n");
      out.write(" * @returns {Boolean} True iff elem is a non-HTML XML node\n");
      out.write(" */\n");
      out.write("isXML = Sizzle.isXML = function( elem ) {\n");
      out.write("\tvar namespace = elem.namespaceURI,\n");
      out.write("\t\tdocElem = (elem.ownerDocument || elem).documentElement;\n");
      out.write("\n");
      out.write("\t// Support: IE <=8\n");
      out.write("\t// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes\n");
      out.write("\t// https://bugs.jquery.com/ticket/4833\n");
      out.write("\treturn !rhtml.test( namespace || docElem && docElem.nodeName || \"HTML\" );\n");
      out.write("};\n");
      out.write("\n");
      out.write("/**\n");
      out.write(" * Sets document-related variables once based on the current document\n");
      out.write(" * @param {Element|Object} [doc] An element or document object to use to set the document\n");
      out.write(" * @returns {Object} Returns the current document\n");
      out.write(" */\n");
      out.write("setDocument = Sizzle.setDocument = function( node ) {\n");
      out.write("\tvar hasCompare, subWindow,\n");
      out.write("\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\n");
      out.write("\n");
      out.write("\t// Return early if doc is invalid or already selected\n");
      out.write("\tif ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {\n");
      out.write("\t\treturn document;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// Update global variables\n");
      out.write("\tdocument = doc;\n");
      out.write("\tdocElem = document.documentElement;\n");
      out.write("\tdocumentIsHTML = !isXML( document );\n");
      out.write("\n");
      out.write("\t// Support: IE 9-11, Edge\n");
      out.write("\t// Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n");
      out.write("\tif ( preferredDoc !== document &&\n");
      out.write("\t\t(subWindow = document.defaultView) && subWindow.top !== subWindow ) {\n");
      out.write("\n");
      out.write("\t\t// Support: IE 11, Edge\n");
      out.write("\t\tif ( subWindow.addEventListener ) {\n");
      out.write("\t\t\tsubWindow.addEventListener( \"unload\", unloadHandler, false );\n");
      out.write("\n");
      out.write("\t\t// Support: IE 9 - 10 only\n");
      out.write("\t\t} else if ( subWindow.attachEvent ) {\n");
      out.write("\t\t\tsubWindow.attachEvent( \"onunload\", unloadHandler );\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t/* Attributes\n");
      out.write("\t---------------------------------------------------------------------- */\n");
      out.write("\n");
      out.write("\t// Support: IE<8\n");
      out.write("\t// Verify that getAttribute really returns attributes and not properties\n");
      out.write("\t// (excepting IE8 booleans)\n");
      out.write("\tsupport.attributes = assert(function( el ) {\n");
      out.write("\t\tel.className = \"i\";\n");
      out.write("\t\treturn !el.getAttribute(\"className\");\n");
      out.write("\t});\n");
      out.write("\n");
      out.write("\t/* getElement(s)By*\n");
      out.write("\t---------------------------------------------------------------------- */\n");
      out.write("\n");
      out.write("\t// Check if getElementsByTagName(\"*\") returns only elements\n");
      out.write("\tsupport.getElementsByTagName = assert(function( el ) {\n");
      out.write("\t\tel.appendChild( document.createComment(\"\") );\n");
      out.write("\t\treturn !el.getElementsByTagName(\"*\").length;\n");
      out.write("\t});\n");
      out.write("\n");
      out.write("\t// Support: IE<9\n");
      out.write("\tsupport.getElementsByClassName = rnative.test( document.getElementsByClassName );\n");
      out.write("\n");
      out.write("\t// Support: IE<10\n");
      out.write("\t// Check if getElementById returns elements by name\n");
      out.write("\t// The broken getElementById methods don't pick up programmatically-set names,\n");
      out.write("\t// so use a roundabout getElementsByName test\n");
      out.write("\tsupport.getById = assert(function( el ) {\n");
      out.write("\t\tdocElem.appendChild( el ).id = expando;\n");
      out.write("\t\treturn !document.getElementsByName || !document.getElementsByName( expando ).length;\n");
      out.write("\t});\n");
      out.write("\n");
      out.write("\t// ID filter and find\n");
      out.write("\tif ( support.getById ) {\n");
      out.write("\t\tExpr.filter[\"ID\"] = function( id ) {\n");
      out.write("\t\t\tvar attrId = id.replace( runescape, funescape );\n");
      out.write("\t\t\treturn function( elem ) {\n");
      out.write("\t\t\t\treturn elem.getAttribute(\"id\") === attrId;\n");
      out.write("\t\t\t};\n");
      out.write("\t\t};\n");
      out.write("\t\tExpr.find[\"ID\"] = function( id, context ) {\n");
      out.write("\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n");
      out.write("\t\t\t\tvar elem = context.getElementById( id );\n");
      out.write("\t\t\t\treturn elem ? [ elem ] : [];\n");
      out.write("\t\t\t}\n");
      out.write("\t\t};\n");
      out.write("\t} else {\n");
      out.write("\t\tExpr.filter[\"ID\"] =  function( id ) {\n");
      out.write("\t\t\tvar attrId = id.replace( runescape, funescape );\n");
      out.write("\t\t\treturn function( elem ) {\n");
      out.write("\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" &&\n");
      out.write("\t\t\t\t\telem.getAttributeNode(\"id\");\n");
      out.write("\t\t\t\treturn node && node.value === attrId;\n");
      out.write("\t\t\t};\n");
      out.write("\t\t};\n");
      out.write("\n");
      out.write("\t\t// Support: IE 6 - 7 only\n");
      out.write("\t\t// getElementById is not reliable as a find shortcut\n");
      out.write("\t\tExpr.find[\"ID\"] = function( id, context ) {\n");
      out.write("\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n");
      out.write("\t\t\t\tvar node, i, elems,\n");
      out.write("\t\t\t\t\telem = context.getElementById( id );\n");
      out.write("\n");
      out.write("\t\t\t\tif ( elem ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t// Verify the id attribute\n");
      out.write("\t\t\t\t\tnode = elem.getAttributeNode(\"id\");\n");
      out.write("\t\t\t\t\tif ( node && node.value === id ) {\n");
      out.write("\t\t\t\t\t\treturn [ elem ];\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t\t// Fall back on getElementsByName\n");
      out.write("\t\t\t\t\telems = context.getElementsByName( id );\n");
      out.write("\t\t\t\t\ti = 0;\n");
      out.write("\t\t\t\t\twhile ( (elem = elems[i++]) ) {\n");
      out.write("\t\t\t\t\t\tnode = elem.getAttributeNode(\"id\");\n");
      out.write("\t\t\t\t\t\tif ( node && node.value === id ) {\n");
      out.write("\t\t\t\t\t\t\treturn [ elem ];\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\treturn [];\n");
      out.write("\t\t\t}\n");
      out.write("\t\t};\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// Tag\n");
      out.write("\tExpr.find[\"TAG\"] = support.getElementsByTagName ?\n");
      out.write("\t\tfunction( tag, context ) {\n");
      out.write("\t\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n");
      out.write("\t\t\t\treturn context.getElementsByTagName( tag );\n");
      out.write("\n");
      out.write("\t\t\t// DocumentFragment nodes don't have gEBTN\n");
      out.write("\t\t\t} else if ( support.qsa ) {\n");
      out.write("\t\t\t\treturn context.querySelectorAll( tag );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t} :\n");
      out.write("\n");
      out.write("\t\tfunction( tag, context ) {\n");
      out.write("\t\t\tvar elem,\n");
      out.write("\t\t\t\ttmp = [],\n");
      out.write("\t\t\t\ti = 0,\n");
      out.write("\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n");
      out.write("\t\t\t\tresults = context.getElementsByTagName( tag );\n");
      out.write("\n");
      out.write("\t\t\t// Filter out possible comments\n");
      out.write("\t\t\tif ( tag === \"*\" ) {\n");
      out.write("\t\t\t\twhile ( (elem = results[i++]) ) {\n");
      out.write("\t\t\t\t\tif ( elem.nodeType === 1 ) {\n");
      out.write("\t\t\t\t\t\ttmp.push( elem );\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\treturn tmp;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\treturn results;\n");
      out.write("\t\t};\n");
      out.write("\n");
      out.write("\t// Class\n");
      out.write("\tExpr.find[\"CLASS\"] = support.getElementsByClassName && function( className, context ) {\n");
      out.write("\t\tif ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n");
      out.write("\t\t\treturn context.getElementsByClassName( className );\n");
      out.write("\t\t}\n");
      out.write("\t};\n");
      out.write("\n");
      out.write("\t/* QSA/matchesSelector\n");
      out.write("\t---------------------------------------------------------------------- */\n");
      out.write("\n");
      out.write("\t// QSA and matchesSelector support\n");
      out.write("\n");
      out.write("\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n");
      out.write("\trbuggyMatches = [];\n");
      out.write("\n");
      out.write("\t// qSa(:focus) reports false when true (Chrome 21)\n");
      out.write("\t// We allow this because of a bug in IE8/9 that throws an error\n");
      out.write("\t// whenever `document.activeElement` is accessed on an iframe\n");
      out.write("\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\n");
      out.write("\t// See https://bugs.jquery.com/ticket/13378\n");
      out.write("\trbuggyQSA = [];\n");
      out.write("\n");
      out.write("\tif ( (support.qsa = rnative.test( document.querySelectorAll )) ) {\n");
      out.write("\t\t// Build QSA regex\n");
      out.write("\t\t// Regex strategy adopted from Diego Perini\n");
      out.write("\t\tassert(function( el ) {\n");
      out.write("\t\t\t// Select is set to empty string on purpose\n");
      out.write("\t\t\t// This is to test IE's treatment of not explicitly\n");
      out.write("\t\t\t// setting a boolean content attribute,\n");
      out.write("\t\t\t// since its presence should be enough\n");
      out.write("\t\t\t// https://bugs.jquery.com/ticket/12359\n");
      out.write("\t\t\tdocElem.appendChild( el ).innerHTML = \"<a id='\" + expando + \"'></a>\" +\n");
      out.write("\t\t\t\t\"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" +\n");
      out.write("\t\t\t\t\"<option selected=''></option></select>\";\n");
      out.write("\n");
      out.write("\t\t\t// Support: IE8, Opera 11-12.16\n");
      out.write("\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\n");
      out.write("\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\n");
      out.write("\t\t\t// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n");
      out.write("\t\t\tif ( el.querySelectorAll(\"[msallowcapture^='']\").length ) {\n");
      out.write("\t\t\t\trbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\" );\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Support: IE8\n");
      out.write("\t\t\t// Boolean attributes and \"value\" are not treated correctly\n");
      out.write("\t\t\tif ( !el.querySelectorAll(\"[selected]\").length ) {\n");
      out.write("\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n");
      out.write("\t\t\tif ( !el.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\n");
      out.write("\t\t\t\trbuggyQSA.push(\"~=\");\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Webkit/Opera - :checked should return selected option elements\n");
      out.write("\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n");
      out.write("\t\t\t// IE8 throws error here and will not see later tests\n");
      out.write("\t\t\tif ( !el.querySelectorAll(\":checked\").length ) {\n");
      out.write("\t\t\t\trbuggyQSA.push(\":checked\");\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Support: Safari 8+, iOS 8+\n");
      out.write("\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n");
      out.write("\t\t\t// In-page `selector#id sibling-combinator selector` fails\n");
      out.write("\t\t\tif ( !el.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\n");
      out.write("\t\t\t\trbuggyQSA.push(\".#.+[+~]\");\n");
      out.write("\t\t\t}\n");
      out.write("\t\t});\n");
      out.write("\n");
      out.write("\t\tassert(function( el ) {\n");
      out.write("\t\t\tel.innerHTML = \"<a href='' disabled='disabled'></a>\" +\n");
      out.write("\t\t\t\t\"<select disabled='disabled'><option/></select>\";\n");
      out.write("\n");
      out.write("\t\t\t// Support: Windows 8 Native Apps\n");
      out.write("\t\t\t// The type and name attributes are restricted during .innerHTML assignment\n");
      out.write("\t\t\tvar input = document.createElement(\"input\");\n");
      out.write("\t\t\tinput.setAttribute( \"type\", \"hidden\" );\n");
      out.write("\t\t\tel.appendChild( input ).setAttribute( \"name\", \"D\" );\n");
      out.write("\n");
      out.write("\t\t\t// Support: IE8\n");
      out.write("\t\t\t// Enforce case-sensitivity of name attribute\n");
      out.write("\t\t\tif ( el.querySelectorAll(\"[name=d]\").length ) {\n");
      out.write("\t\t\t\trbuggyQSA.push( \"name\" + whitespace + \"*[*^$|!~]?=\" );\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n");
      out.write("\t\t\t// IE8 throws error here and will not see later tests\n");
      out.write("\t\t\tif ( el.querySelectorAll(\":enabled\").length !== 2 ) {\n");
      out.write("\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Support: IE9-11+\n");
      out.write("\t\t\t// IE's :disabled selector does not pick up the children of disabled fieldsets\n");
      out.write("\t\t\tdocElem.appendChild( el ).disabled = true;\n");
      out.write("\t\t\tif ( el.querySelectorAll(\":disabled\").length !== 2 ) {\n");
      out.write("\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n");
      out.write("\t\t\tel.querySelectorAll(\"*,:x\");\n");
      out.write("\t\t\trbuggyQSA.push(\",.*:\");\n");
      out.write("\t\t});\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tif ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||\n");
      out.write("\t\tdocElem.webkitMatchesSelector ||\n");
      out.write("\t\tdocElem.mozMatchesSelector ||\n");
      out.write("\t\tdocElem.oMatchesSelector ||\n");
      out.write("\t\tdocElem.msMatchesSelector) )) ) {\n");
      out.write("\n");
      out.write("\t\tassert(function( el ) {\n");
      out.write("\t\t\t// Check to see if it's possible to do matchesSelector\n");
      out.write("\t\t\t// on a disconnected node (IE 9)\n");
      out.write("\t\t\tsupport.disconnectedMatch = matches.call( el, \"*\" );\n");
      out.write("\n");
      out.write("\t\t\t// This should fail with an exception\n");
      out.write("\t\t\t// Gecko does not error, returns false instead\n");
      out.write("\t\t\tmatches.call( el, \"[s!='']:x\" );\n");
      out.write("\t\t\trbuggyMatches.push( \"!=\", pseudos );\n");
      out.write("\t\t});\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join(\"|\") );\n");
      out.write("\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join(\"|\") );\n");
      out.write("\n");
      out.write("\t/* Contains\n");
      out.write("\t---------------------------------------------------------------------- */\n");
      out.write("\thasCompare = rnative.test( docElem.compareDocumentPosition );\n");
      out.write("\n");
      out.write("\t// Element contains another\n");
      out.write("\t// Purposefully self-exclusive\n");
      out.write("\t// As in, an element does not contain itself\n");
      out.write("\tcontains = hasCompare || rnative.test( docElem.contains ) ?\n");
      out.write("\t\tfunction( a, b ) {\n");
      out.write("\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n");
      out.write("\t\t\t\tbup = b && b.parentNode;\n");
      out.write("\t\t\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n");
      out.write("\t\t\t\tadown.contains ?\n");
      out.write("\t\t\t\t\tadown.contains( bup ) :\n");
      out.write("\t\t\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n");
      out.write("\t\t\t));\n");
      out.write("\t\t} :\n");
      out.write("\t\tfunction( a, b ) {\n");
      out.write("\t\t\tif ( b ) {\n");
      out.write("\t\t\t\twhile ( (b = b.parentNode) ) {\n");
      out.write("\t\t\t\t\tif ( b === a ) {\n");
      out.write("\t\t\t\t\t\treturn true;\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\treturn false;\n");
      out.write("\t\t};\n");
      out.write("\n");
      out.write("\t/* Sorting\n");
      out.write("\t---------------------------------------------------------------------- */\n");
      out.write("\n");
      out.write("\t// Document order sorting\n");
      out.write("\tsortOrder = hasCompare ?\n");
      out.write("\tfunction( a, b ) {\n");
      out.write("\n");
      out.write("\t\t// Flag for duplicate removal\n");
      out.write("\t\tif ( a === b ) {\n");
      out.write("\t\t\thasDuplicate = true;\n");
      out.write("\t\t\treturn 0;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Sort on method existence if only one input has compareDocumentPosition\n");
      out.write("\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n");
      out.write("\t\tif ( compare ) {\n");
      out.write("\t\t\treturn compare;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Calculate position if both inputs belong to the same document\n");
      out.write("\t\tcompare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?\n");
      out.write("\t\t\ta.compareDocumentPosition( b ) :\n");
      out.write("\n");
      out.write("\t\t\t// Otherwise we know they are disconnected\n");
      out.write("\t\t\t1;\n");
      out.write("\n");
      out.write("\t\t// Disconnected nodes\n");
      out.write("\t\tif ( compare & 1 ||\n");
      out.write("\t\t\t(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {\n");
      out.write("\n");
      out.write("\t\t\t// Choose the first element that is related to our preferred document\n");
      out.write("\t\t\tif ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {\n");
      out.write("\t\t\t\treturn -1;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\tif ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {\n");
      out.write("\t\t\t\treturn 1;\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Maintain original order\n");
      out.write("\t\t\treturn sortInput ?\n");
      out.write("\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n");
      out.write("\t\t\t\t0;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\treturn compare & 4 ? -1 : 1;\n");
      out.write("\t} :\n");
      out.write("\tfunction( a, b ) {\n");
      out.write("\t\t// Exit early if the nodes are identical\n");
      out.write("\t\tif ( a === b ) {\n");
      out.write("\t\t\thasDuplicate = true;\n");
      out.write("\t\t\treturn 0;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tvar cur,\n");
      out.write("\t\t\ti = 0,\n");
      out.write("\t\t\taup = a.parentNode,\n");
      out.write("\t\t\tbup = b.parentNode,\n");
      out.write("\t\t\tap = [ a ],\n");
      out.write("\t\t\tbp = [ b ];\n");
      out.write("\n");
      out.write("\t\t// Parentless nodes are either documents or disconnected\n");
      out.write("\t\tif ( !aup || !bup ) {\n");
      out.write("\t\t\treturn a === document ? -1 :\n");
      out.write("\t\t\t\tb === document ? 1 :\n");
      out.write("\t\t\t\taup ? -1 :\n");
      out.write("\t\t\t\tbup ? 1 :\n");
      out.write("\t\t\t\tsortInput ?\n");
      out.write("\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n");
      out.write("\t\t\t\t0;\n");
      out.write("\n");
      out.write("\t\t// If the nodes are siblings, we can do a quick check\n");
      out.write("\t\t} else if ( aup === bup ) {\n");
      out.write("\t\t\treturn siblingCheck( a, b );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Otherwise we need full lists of their ancestors for comparison\n");
      out.write("\t\tcur = a;\n");
      out.write("\t\twhile ( (cur = cur.parentNode) ) {\n");
      out.write("\t\t\tap.unshift( cur );\n");
      out.write("\t\t}\n");
      out.write("\t\tcur = b;\n");
      out.write("\t\twhile ( (cur = cur.parentNode) ) {\n");
      out.write("\t\t\tbp.unshift( cur );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Walk down the tree looking for a discrepancy\n");
      out.write("\t\twhile ( ap[i] === bp[i] ) {\n");
      out.write("\t\t\ti++;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\treturn i ?\n");
      out.write("\t\t\t// Do a sibling check if the nodes have a common ancestor\n");
      out.write("\t\t\tsiblingCheck( ap[i], bp[i] ) :\n");
      out.write("\n");
      out.write("\t\t\t// Otherwise nodes in our document sort first\n");
      out.write("\t\t\tap[i] === preferredDoc ? -1 :\n");
      out.write("\t\t\tbp[i] === preferredDoc ? 1 :\n");
      out.write("\t\t\t0;\n");
      out.write("\t};\n");
      out.write("\n");
      out.write("\treturn document;\n");
      out.write("};\n");
      out.write("\n");
      out.write("Sizzle.matches = function( expr, elements ) {\n");
      out.write("\treturn Sizzle( expr, null, null, elements );\n");
      out.write("};\n");
      out.write("\n");
      out.write("Sizzle.matchesSelector = function( elem, expr ) {\n");
      out.write("\t// Set document vars if needed\n");
      out.write("\tif ( ( elem.ownerDocument || elem ) !== document ) {\n");
      out.write("\t\tsetDocument( elem );\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tif ( support.matchesSelector && documentIsHTML &&\n");
      out.write("\t\t!nonnativeSelectorCache[ expr + \" \" ] &&\n");
      out.write("\t\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\n");
      out.write("\t\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\n");
      out.write("\n");
      out.write("\t\ttry {\n");
      out.write("\t\t\tvar ret = matches.call( elem, expr );\n");
      out.write("\n");
      out.write("\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n");
      out.write("\t\t\tif ( ret || support.disconnectedMatch ||\n");
      out.write("\t\t\t\t\t// As well, disconnected nodes are said to be in a document\n");
      out.write("\t\t\t\t\t// fragment in IE 9\n");
      out.write("\t\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\n");
      out.write("\t\t\t\treturn ret;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t} catch (e) {\n");
      out.write("\t\t\tnonnativeSelectorCache( expr, true );\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\treturn Sizzle( expr, document, null, [ elem ] ).length > 0;\n");
      out.write("};\n");
      out.write("\n");
      out.write("Sizzle.contains = function( context, elem ) {\n");
      out.write("\t// Set document vars if needed\n");
      out.write("\tif ( ( context.ownerDocument || context ) !== document ) {\n");
      out.write("\t\tsetDocument( context );\n");
      out.write("\t}\n");
      out.write("\treturn contains( context, elem );\n");
      out.write("};\n");
      out.write("\n");
      out.write("Sizzle.attr = function( elem, name ) {\n");
      out.write("\t// Set document vars if needed\n");
      out.write("\tif ( ( elem.ownerDocument || elem ) !== document ) {\n");
      out.write("\t\tsetDocument( elem );\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\n");
      out.write("\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\n");
      out.write("\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n");
      out.write("\t\t\tfn( elem, name, !documentIsHTML ) :\n");
      out.write("\t\t\tundefined;\n");
      out.write("\n");
      out.write("\treturn val !== undefined ?\n");
      out.write("\t\tval :\n");
      out.write("\t\tsupport.attributes || !documentIsHTML ?\n");
      out.write("\t\t\telem.getAttribute( name ) :\n");
      out.write("\t\t\t(val = elem.getAttributeNode(name)) && val.specified ?\n");
      out.write("\t\t\t\tval.value :\n");
      out.write("\t\t\t\tnull;\n");
      out.write("};\n");
      out.write("\n");
      out.write("Sizzle.escape = function( sel ) {\n");
      out.write("\treturn (sel + \"\").replace( rcssescape, fcssescape );\n");
      out.write("};\n");
      out.write("\n");
      out.write("Sizzle.error = function( msg ) {\n");
      out.write("\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\n");
      out.write("};\n");
      out.write("\n");
      out.write("/**\n");
      out.write(" * Document sorting and removing duplicates\n");
      out.write(" * @param {ArrayLike} results\n");
      out.write(" */\n");
      out.write("Sizzle.uniqueSort = function( results ) {\n");
      out.write("\tvar elem,\n");
      out.write("\t\tduplicates = [],\n");
      out.write("\t\tj = 0,\n");
      out.write("\t\ti = 0;\n");
      out.write("\n");
      out.write("\t// Unless we *know* we can detect duplicates, assume their presence\n");
      out.write("\thasDuplicate = !support.detectDuplicates;\n");
      out.write("\tsortInput = !support.sortStable && results.slice( 0 );\n");
      out.write("\tresults.sort( sortOrder );\n");
      out.write("\n");
      out.write("\tif ( hasDuplicate ) {\n");
      out.write("\t\twhile ( (elem = results[i++]) ) {\n");
      out.write("\t\t\tif ( elem === results[ i ] ) {\n");
      out.write("\t\t\t\tj = duplicates.push( i );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t\twhile ( j-- ) {\n");
      out.write("\t\t\tresults.splice( duplicates[ j ], 1 );\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// Clear input after sorting to release objects\n");
      out.write("\t// See https://github.com/jquery/sizzle/pull/225\n");
      out.write("\tsortInput = null;\n");
      out.write("\n");
      out.write("\treturn results;\n");
      out.write("};\n");
      out.write("\n");
      out.write("/**\n");
      out.write(" * Utility function for retrieving the text value of an array of DOM nodes\n");
      out.write(" * @param {Array|Element} elem\n");
      out.write(" */\n");
      out.write("getText = Sizzle.getText = function( elem ) {\n");
      out.write("\tvar node,\n");
      out.write("\t\tret = \"\",\n");
      out.write("\t\ti = 0,\n");
      out.write("\t\tnodeType = elem.nodeType;\n");
      out.write("\n");
      out.write("\tif ( !nodeType ) {\n");
      out.write("\t\t// If no nodeType, this is expected to be an array\n");
      out.write("\t\twhile ( (node = elem[i++]) ) {\n");
      out.write("\t\t\t// Do not traverse comment nodes\n");
      out.write("\t\t\tret += getText( node );\n");
      out.write("\t\t}\n");
      out.write("\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n");
      out.write("\t\t// Use textContent for elements\n");
      out.write("\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\n");
      out.write("\t\tif ( typeof elem.textContent === \"string\" ) {\n");
      out.write("\t\t\treturn elem.textContent;\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\t// Traverse its children\n");
      out.write("\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n");
      out.write("\t\t\t\tret += getText( elem );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t} else if ( nodeType === 3 || nodeType === 4 ) {\n");
      out.write("\t\treturn elem.nodeValue;\n");
      out.write("\t}\n");
      out.write("\t// Do not include comment or processing instruction nodes\n");
      out.write("\n");
      out.write("\treturn ret;\n");
      out.write("};\n");
      out.write("\n");
      out.write("Expr = Sizzle.selectors = {\n");
      out.write("\n");
      out.write("\t// Can be adjusted by the user\n");
      out.write("\tcacheLength: 50,\n");
      out.write("\n");
      out.write("\tcreatePseudo: markFunction,\n");
      out.write("\n");
      out.write("\tmatch: matchExpr,\n");
      out.write("\n");
      out.write("\tattrHandle: {},\n");
      out.write("\n");
      out.write("\tfind: {},\n");
      out.write("\n");
      out.write("\trelative: {\n");
      out.write("\t\t\">\": { dir: \"parentNode\", first: true },\n");
      out.write("\t\t\" \": { dir: \"parentNode\" },\n");
      out.write("\t\t\"+\": { dir: \"previousSibling\", first: true },\n");
      out.write("\t\t\"~\": { dir: \"previousSibling\" }\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tpreFilter: {\n");
      out.write("\t\t\"ATTR\": function( match ) {\n");
      out.write("\t\t\tmatch[1] = match[1].replace( runescape, funescape );\n");
      out.write("\n");
      out.write("\t\t\t// Move the given value to match[3] whether quoted or unquoted\n");
      out.write("\t\t\tmatch[3] = ( match[3] || match[4] || match[5] || \"\" ).replace( runescape, funescape );\n");
      out.write("\n");
      out.write("\t\t\tif ( match[2] === \"~=\" ) {\n");
      out.write("\t\t\t\tmatch[3] = \" \" + match[3] + \" \";\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\treturn match.slice( 0, 4 );\n");
      out.write("\t\t},\n");
      out.write("\n");
      out.write("\t\t\"CHILD\": function( match ) {\n");
      out.write("\t\t\t/* matches from matchExpr[\"CHILD\"]\n");
      out.write("\t\t\t\t1 type (only|nth|...)\n");
      out.write("\t\t\t\t2 what (child|of-type)\n");
      out.write("\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n");
      out.write("\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n");
      out.write("\t\t\t\t5 sign of xn-component\n");
      out.write("\t\t\t\t6 x of xn-component\n");
      out.write("\t\t\t\t7 sign of y-component\n");
      out.write("\t\t\t\t8 y of y-component\n");
      out.write("\t\t\t*/\n");
      out.write("\t\t\tmatch[1] = match[1].toLowerCase();\n");
      out.write("\n");
      out.write("\t\t\tif ( match[1].slice( 0, 3 ) === \"nth\" ) {\n");
      out.write("\t\t\t\t// nth-* requires argument\n");
      out.write("\t\t\t\tif ( !match[3] ) {\n");
      out.write("\t\t\t\t\tSizzle.error( match[0] );\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n");
      out.write("\t\t\t\t// remember that false/true cast respectively to 0/1\n");
      out.write("\t\t\t\tmatch[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === \"even\" || match[3] === \"odd\" ) );\n");
      out.write("\t\t\t\tmatch[5] = +( ( match[7] + match[8] ) || match[3] === \"odd\" );\n");
      out.write("\n");
      out.write("\t\t\t// other types prohibit arguments\n");
      out.write("\t\t\t} else if ( match[3] ) {\n");
      out.write("\t\t\t\tSizzle.error( match[0] );\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\treturn match;\n");
      out.write("\t\t},\n");
      out.write("\n");
      out.write("\t\t\"PSEUDO\": function( match ) {\n");
      out.write("\t\t\tvar excess,\n");
      out.write("\t\t\t\tunquoted = !match[6] && match[2];\n");
      out.write("\n");
      out.write("\t\t\tif ( matchExpr[\"CHILD\"].test( match[0] ) ) {\n");
      out.write("\t\t\t\treturn null;\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Accept quoted arguments as-is\n");
      out.write("\t\t\tif ( match[3] ) {\n");
      out.write("\t\t\t\tmatch[2] = match[4] || match[5] || \"\";\n");
      out.write("\n");
      out.write("\t\t\t// Strip excess characters from unquoted arguments\n");
      out.write("\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\n");
      out.write("\t\t\t\t// Get excess from tokenize (recursively)\n");
      out.write("\t\t\t\t(excess = tokenize( unquoted, true )) &&\n");
      out.write("\t\t\t\t// advance to the next closing parenthesis\n");
      out.write("\t\t\t\t(excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length) ) {\n");
      out.write("\n");
      out.write("\t\t\t\t// excess is a negative index\n");
      out.write("\t\t\t\tmatch[0] = match[0].slice( 0, excess );\n");
      out.write("\t\t\t\tmatch[2] = unquoted.slice( 0, excess );\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n");
      out.write("\t\t\treturn match.slice( 0, 3 );\n");
      out.write("\t\t}\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tfilter: {\n");
      out.write("\n");
      out.write("\t\t\"TAG\": function( nodeNameSelector ) {\n");
      out.write("\t\t\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n");
      out.write("\t\t\treturn nodeNameSelector === \"*\" ?\n");
      out.write("\t\t\t\tfunction() { return true; } :\n");
      out.write("\t\t\t\tfunction( elem ) {\n");
      out.write("\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n");
      out.write("\t\t\t\t};\n");
      out.write("\t\t},\n");
      out.write("\n");
      out.write("\t\t\"CLASS\": function( className ) {\n");
      out.write("\t\t\tvar pattern = classCache[ className + \" \" ];\n");
      out.write("\n");
      out.write("\t\t\treturn pattern ||\n");
      out.write("\t\t\t\t(pattern = new RegExp( \"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\" )) &&\n");
      out.write("\t\t\t\tclassCache( className, function( elem ) {\n");
      out.write("\t\t\t\t\treturn pattern.test( typeof elem.className === \"string\" && elem.className || typeof elem.getAttribute !== \"undefined\" && elem.getAttribute(\"class\") || \"\" );\n");
      out.write("\t\t\t\t});\n");
      out.write("\t\t},\n");
      out.write("\n");
      out.write("\t\t\"ATTR\": function( name, operator, check ) {\n");
      out.write("\t\t\treturn function( elem ) {\n");
      out.write("\t\t\t\tvar result = Sizzle.attr( elem, name );\n");
      out.write("\n");
      out.write("\t\t\t\tif ( result == null ) {\n");
      out.write("\t\t\t\t\treturn operator === \"!=\";\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\tif ( !operator ) {\n");
      out.write("\t\t\t\t\treturn true;\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\tresult += \"\";\n");
      out.write("\n");
      out.write("\t\t\t\treturn operator === \"=\" ? result === check :\n");
      out.write("\t\t\t\t\toperator === \"!=\" ? result !== check :\n");
      out.write("\t\t\t\t\toperator === \"^=\" ? check && result.indexOf( check ) === 0 :\n");
      out.write("\t\t\t\t\toperator === \"*=\" ? check && result.indexOf( check ) > -1 :\n");
      out.write("\t\t\t\t\toperator === \"$=\" ? check && result.slice( -check.length ) === check :\n");
      out.write("\t\t\t\t\toperator === \"~=\" ? ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" ).indexOf( check ) > -1 :\n");
      out.write("\t\t\t\t\toperator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :\n");
      out.write("\t\t\t\t\tfalse;\n");
      out.write("\t\t\t};\n");
      out.write("\t\t},\n");
      out.write("\n");
      out.write("\t\t\"CHILD\": function( type, what, argument, first, last ) {\n");
      out.write("\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\n");
      out.write("\t\t\t\tforward = type.slice( -4 ) !== \"last\",\n");
      out.write("\t\t\t\tofType = what === \"of-type\";\n");
      out.write("\n");
      out.write("\t\t\treturn first === 1 && last === 0 ?\n");
      out.write("\n");
      out.write("\t\t\t\t// Shortcut for :nth-*(n)\n");
      out.write("\t\t\t\tfunction( elem ) {\n");
      out.write("\t\t\t\t\treturn !!elem.parentNode;\n");
      out.write("\t\t\t\t} :\n");
      out.write("\n");
      out.write("\t\t\t\tfunction( elem, context, xml ) {\n");
      out.write("\t\t\t\t\tvar cache, uniqueCache, outerCache, node, nodeIndex, start,\n");
      out.write("\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n");
      out.write("\t\t\t\t\t\tparent = elem.parentNode,\n");
      out.write("\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\n");
      out.write("\t\t\t\t\t\tuseCache = !xml && !ofType,\n");
      out.write("\t\t\t\t\t\tdiff = false;\n");
      out.write("\n");
      out.write("\t\t\t\t\tif ( parent ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n");
      out.write("\t\t\t\t\t\tif ( simple ) {\n");
      out.write("\t\t\t\t\t\t\twhile ( dir ) {\n");
      out.write("\t\t\t\t\t\t\t\tnode = elem;\n");
      out.write("\t\t\t\t\t\t\t\twhile ( (node = node[ dir ]) ) {\n");
      out.write("\t\t\t\t\t\t\t\t\tif ( ofType ?\n");
      out.write("\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n");
      out.write("\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\t\t\treturn false;\n");
      out.write("\t\t\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n");
      out.write("\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n");
      out.write("\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t\treturn true;\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n");
      out.write("\t\t\t\t\t\tif ( forward && useCache ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t// ...in a gzip-friendly way\n");
      out.write("\t\t\t\t\t\t\tnode = parent;\n");
      out.write("\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t// Support: IE <9 only\n");
      out.write("\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n");
      out.write("\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n");
      out.write("\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n");
      out.write("\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n");
      out.write("\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];\n");
      out.write("\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n");
      out.write("\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n");
      out.write("\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\n");
      out.write("\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, nodeIndex, diff ];\n");
      out.write("\t\t\t\t\t\t\t\t\tbreak;\n");
      out.write("\t\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\t\t// Use previously-cached element index if available\n");
      out.write("\t\t\t\t\t\t\tif ( useCache ) {\n");
      out.write("\t\t\t\t\t\t\t\t// ...in a gzip-friendly way\n");
      out.write("\t\t\t\t\t\t\t\tnode = elem;\n");
      out.write("\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\t// Support: IE <9 only\n");
      out.write("\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n");
      out.write("\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n");
      out.write("\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n");
      out.write("\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n");
      out.write("\t\t\t\t\t\t\t\tdiff = nodeIndex;\n");
      out.write("\t\t\t\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t// xml :nth-child(...)\n");
      out.write("\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n");
      out.write("\t\t\t\t\t\t\tif ( diff === false ) {\n");
      out.write("\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n");
      out.write("\t\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n");
      out.write("\t\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\t\tif ( ( ofType ?\n");
      out.write("\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n");
      out.write("\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&\n");
      out.write("\t\t\t\t\t\t\t\t\t\t++diff ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif ( useCache ) {\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t// Support: IE <9 only\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, diff ];\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tbreak;\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n");
      out.write("\t\t\t\t\t\tdiff -= last;\n");
      out.write("\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t};\n");
      out.write("\t\t},\n");
      out.write("\n");
      out.write("\t\t\"PSEUDO\": function( pseudo, argument ) {\n");
      out.write("\t\t\t// pseudo-class names are case-insensitive\n");
      out.write("\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n");
      out.write("\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n");
      out.write("\t\t\t// Remember that setFilters inherits from pseudos\n");
      out.write("\t\t\tvar args,\n");
      out.write("\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n");
      out.write("\t\t\t\t\tSizzle.error( \"unsupported pseudo: \" + pseudo );\n");
      out.write("\n");
      out.write("\t\t\t// The user may use createPseudo to indicate that\n");
      out.write("\t\t\t// arguments are needed to create the filter function\n");
      out.write("\t\t\t// just as Sizzle does\n");
      out.write("\t\t\tif ( fn[ expando ] ) {\n");
      out.write("\t\t\t\treturn fn( argument );\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// But maintain support for old signatures\n");
      out.write("\t\t\tif ( fn.length > 1 ) {\n");
      out.write("\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\n");
      out.write("\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n");
      out.write("\t\t\t\t\tmarkFunction(function( seed, matches ) {\n");
      out.write("\t\t\t\t\t\tvar idx,\n");
      out.write("\t\t\t\t\t\t\tmatched = fn( seed, argument ),\n");
      out.write("\t\t\t\t\t\t\ti = matched.length;\n");
      out.write("\t\t\t\t\t\twhile ( i-- ) {\n");
      out.write("\t\t\t\t\t\t\tidx = indexOf( seed, matched[i] );\n");
      out.write("\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[i] );\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t}) :\n");
      out.write("\t\t\t\t\tfunction( elem ) {\n");
      out.write("\t\t\t\t\t\treturn fn( elem, 0, args );\n");
      out.write("\t\t\t\t\t};\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\treturn fn;\n");
      out.write("\t\t}\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tpseudos: {\n");
      out.write("\t\t// Potentially complex pseudos\n");
      out.write("\t\t\"not\": markFunction(function( selector ) {\n");
      out.write("\t\t\t// Trim the selector passed to compile\n");
      out.write("\t\t\t// to avoid treating leading and trailing\n");
      out.write("\t\t\t// spaces as combinators\n");
      out.write("\t\t\tvar input = [],\n");
      out.write("\t\t\t\tresults = [],\n");
      out.write("\t\t\t\tmatcher = compile( selector.replace( rtrim, \"$1\" ) );\n");
      out.write("\n");
      out.write("\t\t\treturn matcher[ expando ] ?\n");
      out.write("\t\t\t\tmarkFunction(function( seed, matches, context, xml ) {\n");
      out.write("\t\t\t\t\tvar elem,\n");
      out.write("\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\n");
      out.write("\t\t\t\t\t\ti = seed.length;\n");
      out.write("\n");
      out.write("\t\t\t\t\t// Match elements unmatched by `matcher`\n");
      out.write("\t\t\t\t\twhile ( i-- ) {\n");
      out.write("\t\t\t\t\t\tif ( (elem = unmatched[i]) ) {\n");
      out.write("\t\t\t\t\t\t\tseed[i] = !(matches[i] = elem);\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}) :\n");
      out.write("\t\t\t\tfunction( elem, context, xml ) {\n");
      out.write("\t\t\t\t\tinput[0] = elem;\n");
      out.write("\t\t\t\t\tmatcher( input, null, xml, results );\n");
      out.write("\t\t\t\t\t// Don't keep the element (issue #299)\n");
      out.write("\t\t\t\t\tinput[0] = null;\n");
      out.write("\t\t\t\t\treturn !results.pop();\n");
      out.write("\t\t\t\t};\n");
      out.write("\t\t}),\n");
      out.write("\n");
      out.write("\t\t\"has\": markFunction(function( selector ) {\n");
      out.write("\t\t\treturn function( elem ) {\n");
      out.write("\t\t\t\treturn Sizzle( selector, elem ).length > 0;\n");
      out.write("\t\t\t};\n");
      out.write("\t\t}),\n");
      out.write("\n");
      out.write("\t\t\"contains\": markFunction(function( text ) {\n");
      out.write("\t\t\ttext = text.replace( runescape, funescape );\n");
      out.write("\t\t\treturn function( elem ) {\n");
      out.write("\t\t\t\treturn ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;\n");
      out.write("\t\t\t};\n");
      out.write("\t\t}),\n");
      out.write("\n");
      out.write("\t\t// \"Whether an element is represented by a :lang() selector\n");
      out.write("\t\t// is based solely on the element's language value\n");
      out.write("\t\t// being equal to the identifier C,\n");
      out.write("\t\t// or beginning with the identifier C immediately followed by \"-\".\n");
      out.write("\t\t// The matching of C against the element's language value is performed case-insensitively.\n");
      out.write("\t\t// The identifier C does not have to be a valid language name.\"\n");
      out.write("\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n");
      out.write("\t\t\"lang\": markFunction( function( lang ) {\n");
      out.write("\t\t\t// lang value must be a valid identifier\n");
      out.write("\t\t\tif ( !ridentifier.test(lang || \"\") ) {\n");
      out.write("\t\t\t\tSizzle.error( \"unsupported lang: \" + lang );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\n");
      out.write("\t\t\treturn function( elem ) {\n");
      out.write("\t\t\t\tvar elemLang;\n");
      out.write("\t\t\t\tdo {\n");
      out.write("\t\t\t\t\tif ( (elemLang = documentIsHTML ?\n");
      out.write("\t\t\t\t\t\telem.lang :\n");
      out.write("\t\t\t\t\t\telem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n");
      out.write("\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t} while ( (elem = elem.parentNode) && elem.nodeType === 1 );\n");
      out.write("\t\t\t\treturn false;\n");
      out.write("\t\t\t};\n");
      out.write("\t\t}),\n");
      out.write("\n");
      out.write("\t\t// Miscellaneous\n");
      out.write("\t\t\"target\": function( elem ) {\n");
      out.write("\t\t\tvar hash = window.location && window.location.hash;\n");
      out.write("\t\t\treturn hash && hash.slice( 1 ) === elem.id;\n");
      out.write("\t\t},\n");
      out.write("\n");
      out.write("\t\t\"root\": function( elem ) {\n");
      out.write("\t\t\treturn elem === docElem;\n");
      out.write("\t\t},\n");
      out.write("\n");
      out.write("\t\t\"focus\": function( elem ) {\n");
      out.write("\t\t\treturn elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n");
      out.write("\t\t},\n");
      out.write("\n");
      out.write("\t\t// Boolean properties\n");
      out.write("\t\t\"enabled\": createDisabledPseudo( false ),\n");
      out.write("\t\t\"disabled\": createDisabledPseudo( true ),\n");
      out.write("\n");
      out.write("\t\t\"checked\": function( elem ) {\n");
      out.write("\t\t\t// In CSS3, :checked should return both checked and selected elements\n");
      out.write("\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n");
      out.write("\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n");
      out.write("\t\t\treturn (nodeName === \"input\" && !!elem.checked) || (nodeName === \"option\" && !!elem.selected);\n");
      out.write("\t\t},\n");
      out.write("\n");
      out.write("\t\t\"selected\": function( elem ) {\n");
      out.write("\t\t\t// Accessing this property makes selected-by-default\n");
      out.write("\t\t\t// options in Safari work properly\n");
      out.write("\t\t\tif ( elem.parentNode ) {\n");
      out.write("\t\t\t\telem.parentNode.selectedIndex;\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\treturn elem.selected === true;\n");
      out.write("\t\t},\n");
      out.write("\n");
      out.write("\t\t// Contents\n");
      out.write("\t\t\"empty\": function( elem ) {\n");
      out.write("\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n");
      out.write("\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n");
      out.write("\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n");
      out.write("\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n");
      out.write("\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n");
      out.write("\t\t\t\tif ( elem.nodeType < 6 ) {\n");
      out.write("\t\t\t\t\treturn false;\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\treturn true;\n");
      out.write("\t\t},\n");
      out.write("\n");
      out.write("\t\t\"parent\": function( elem ) {\n");
      out.write("\t\t\treturn !Expr.pseudos[\"empty\"]( elem );\n");
      out.write("\t\t},\n");
      out.write("\n");
      out.write("\t\t// Element/input types\n");
      out.write("\t\t\"header\": function( elem ) {\n");
      out.write("\t\t\treturn rheader.test( elem.nodeName );\n");
      out.write("\t\t},\n");
      out.write("\n");
      out.write("\t\t\"input\": function( elem ) {\n");
      out.write("\t\t\treturn rinputs.test( elem.nodeName );\n");
      out.write("\t\t},\n");
      out.write("\n");
      out.write("\t\t\"button\": function( elem ) {\n");
      out.write("\t\t\tvar name = elem.nodeName.toLowerCase();\n");
      out.write("\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\n");
      out.write("\t\t},\n");
      out.write("\n");
      out.write("\t\t\"text\": function( elem ) {\n");
      out.write("\t\t\tvar attr;\n");
      out.write("\t\t\treturn elem.nodeName.toLowerCase() === \"input\" &&\n");
      out.write("\t\t\t\telem.type === \"text\" &&\n");
      out.write("\n");
      out.write("\t\t\t\t// Support: IE<8\n");
      out.write("\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n");
      out.write("\t\t\t\t( (attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === \"text\" );\n");
      out.write("\t\t},\n");
      out.write("\n");
      out.write("\t\t// Position-in-collection\n");
      out.write("\t\t\"first\": createPositionalPseudo(function() {\n");
      out.write("\t\t\treturn [ 0 ];\n");
      out.write("\t\t}),\n");
      out.write("\n");
      out.write("\t\t\"last\": createPositionalPseudo(function( matchIndexes, length ) {\n");
      out.write("\t\t\treturn [ length - 1 ];\n");
      out.write("\t\t}),\n");
      out.write("\n");
      out.write("\t\t\"eq\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n");
      out.write("\t\t\treturn [ argument < 0 ? argument + length : argument ];\n");
      out.write("\t\t}),\n");
      out.write("\n");
      out.write("\t\t\"even\": createPositionalPseudo(function( matchIndexes, length ) {\n");
      out.write("\t\t\tvar i = 0;\n");
      out.write("\t\t\tfor ( ; i < length; i += 2 ) {\n");
      out.write("\t\t\t\tmatchIndexes.push( i );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\treturn matchIndexes;\n");
      out.write("\t\t}),\n");
      out.write("\n");
      out.write("\t\t\"odd\": createPositionalPseudo(function( matchIndexes, length ) {\n");
      out.write("\t\t\tvar i = 1;\n");
      out.write("\t\t\tfor ( ; i < length; i += 2 ) {\n");
      out.write("\t\t\t\tmatchIndexes.push( i );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\treturn matchIndexes;\n");
      out.write("\t\t}),\n");
      out.write("\n");
      out.write("\t\t\"lt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n");
      out.write("\t\t\tvar i = argument < 0 ?\n");
      out.write("\t\t\t\targument + length :\n");
      out.write("\t\t\t\targument > length ?\n");
      out.write("\t\t\t\t\tlength :\n");
      out.write("\t\t\t\t\targument;\n");
      out.write("\t\t\tfor ( ; --i >= 0; ) {\n");
      out.write("\t\t\t\tmatchIndexes.push( i );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\treturn matchIndexes;\n");
      out.write("\t\t}),\n");
      out.write("\n");
      out.write("\t\t\"gt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n");
      out.write("\t\t\tvar i = argument < 0 ? argument + length : argument;\n");
      out.write("\t\t\tfor ( ; ++i < length; ) {\n");
      out.write("\t\t\t\tmatchIndexes.push( i );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\treturn matchIndexes;\n");
      out.write("\t\t})\n");
      out.write("\t}\n");
      out.write("};\n");
      out.write("\n");
      out.write("Expr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"];\n");
      out.write("\n");
      out.write("// Add button/input type pseudos\n");
      out.write("for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n");
      out.write("\tExpr.pseudos[ i ] = createInputPseudo( i );\n");
      out.write("}\n");
      out.write("for ( i in { submit: true, reset: true } ) {\n");
      out.write("\tExpr.pseudos[ i ] = createButtonPseudo( i );\n");
      out.write("}\n");
      out.write("\n");
      out.write("// Easy API for creating new setFilters\n");
      out.write("function setFilters() {}\n");
      out.write("setFilters.prototype = Expr.filters = Expr.pseudos;\n");
      out.write("Expr.setFilters = new setFilters();\n");
      out.write("\n");
      out.write("tokenize = Sizzle.tokenize = function( selector, parseOnly ) {\n");
      out.write("\tvar matched, match, tokens, type,\n");
      out.write("\t\tsoFar, groups, preFilters,\n");
      out.write("\t\tcached = tokenCache[ selector + \" \" ];\n");
      out.write("\n");
      out.write("\tif ( cached ) {\n");
      out.write("\t\treturn parseOnly ? 0 : cached.slice( 0 );\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tsoFar = selector;\n");
      out.write("\tgroups = [];\n");
      out.write("\tpreFilters = Expr.preFilter;\n");
      out.write("\n");
      out.write("\twhile ( soFar ) {\n");
      out.write("\n");
      out.write("\t\t// Comma and first run\n");
      out.write("\t\tif ( !matched || (match = rcomma.exec( soFar )) ) {\n");
      out.write("\t\t\tif ( match ) {\n");
      out.write("\t\t\t\t// Don't consume trailing commas as valid\n");
      out.write("\t\t\t\tsoFar = soFar.slice( match[0].length ) || soFar;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\tgroups.push( (tokens = []) );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tmatched = false;\n");
      out.write("\n");
      out.write("\t\t// Combinators\n");
      out.write("\t\tif ( (match = rcombinators.exec( soFar )) ) {\n");
      out.write("\t\t\tmatched = match.shift();\n");
      out.write("\t\t\ttokens.push({\n");
      out.write("\t\t\t\tvalue: matched,\n");
      out.write("\t\t\t\t// Cast descendant combinators to space\n");
      out.write("\t\t\t\ttype: match[0].replace( rtrim, \" \" )\n");
      out.write("\t\t\t});\n");
      out.write("\t\t\tsoFar = soFar.slice( matched.length );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Filters\n");
      out.write("\t\tfor ( type in Expr.filter ) {\n");
      out.write("\t\t\tif ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||\n");
      out.write("\t\t\t\t(match = preFilters[ type ]( match ))) ) {\n");
      out.write("\t\t\t\tmatched = match.shift();\n");
      out.write("\t\t\t\ttokens.push({\n");
      out.write("\t\t\t\t\tvalue: matched,\n");
      out.write("\t\t\t\t\ttype: type,\n");
      out.write("\t\t\t\t\tmatches: match\n");
      out.write("\t\t\t\t});\n");
      out.write("\t\t\t\tsoFar = soFar.slice( matched.length );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tif ( !matched ) {\n");
      out.write("\t\t\tbreak;\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// Return the length of the invalid excess\n");
      out.write("\t// if we're just parsing\n");
      out.write("\t// Otherwise, throw an error or return tokens\n");
      out.write("\treturn parseOnly ?\n");
      out.write("\t\tsoFar.length :\n");
      out.write("\t\tsoFar ?\n");
      out.write("\t\t\tSizzle.error( selector ) :\n");
      out.write("\t\t\t// Cache the tokens\n");
      out.write("\t\t\ttokenCache( selector, groups ).slice( 0 );\n");
      out.write("};\n");
      out.write("\n");
      out.write("function toSelector( tokens ) {\n");
      out.write("\tvar i = 0,\n");
      out.write("\t\tlen = tokens.length,\n");
      out.write("\t\tselector = \"\";\n");
      out.write("\tfor ( ; i < len; i++ ) {\n");
      out.write("\t\tselector += tokens[i].value;\n");
      out.write("\t}\n");
      out.write("\treturn selector;\n");
      out.write("}\n");
      out.write("\n");
      out.write("function addCombinator( matcher, combinator, base ) {\n");
      out.write("\tvar dir = combinator.dir,\n");
      out.write("\t\tskip = combinator.next,\n");
      out.write("\t\tkey = skip || dir,\n");
      out.write("\t\tcheckNonElements = base && key === \"parentNode\",\n");
      out.write("\t\tdoneName = done++;\n");
      out.write("\n");
      out.write("\treturn combinator.first ?\n");
      out.write("\t\t// Check against closest ancestor/preceding element\n");
      out.write("\t\tfunction( elem, context, xml ) {\n");
      out.write("\t\t\twhile ( (elem = elem[ dir ]) ) {\n");
      out.write("\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n");
      out.write("\t\t\t\t\treturn matcher( elem, context, xml );\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\treturn false;\n");
      out.write("\t\t} :\n");
      out.write("\n");
      out.write("\t\t// Check against all ancestor/preceding elements\n");
      out.write("\t\tfunction( elem, context, xml ) {\n");
      out.write("\t\t\tvar oldCache, uniqueCache, outerCache,\n");
      out.write("\t\t\t\tnewCache = [ dirruns, doneName ];\n");
      out.write("\n");
      out.write("\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n");
      out.write("\t\t\tif ( xml ) {\n");
      out.write("\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n");
      out.write("\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n");
      out.write("\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n");
      out.write("\t\t\t\t\t\t\treturn true;\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t} else {\n");
      out.write("\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n");
      out.write("\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n");
      out.write("\t\t\t\t\t\touterCache = elem[ expando ] || (elem[ expando ] = {});\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t// Support: IE <9 only\n");
      out.write("\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n");
      out.write("\t\t\t\t\t\tuniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});\n");
      out.write("\n");
      out.write("\t\t\t\t\t\tif ( skip && skip === elem.nodeName.toLowerCase() ) {\n");
      out.write("\t\t\t\t\t\t\telem = elem[ dir ] || elem;\n");
      out.write("\t\t\t\t\t\t} else if ( (oldCache = uniqueCache[ key ]) &&\n");
      out.write("\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n");
      out.write("\t\t\t\t\t\t\treturn (newCache[ 2 ] = oldCache[ 2 ]);\n");
      out.write("\t\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n");
      out.write("\t\t\t\t\t\t\tuniqueCache[ key ] = newCache;\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n");
      out.write("\t\t\t\t\t\t\tif ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {\n");
      out.write("\t\t\t\t\t\t\t\treturn true;\n");
      out.write("\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\treturn false;\n");
      out.write("\t\t};\n");
      out.write("}\n");
      out.write("\n");
      out.write("function elementMatcher( matchers ) {\n");
      out.write("\treturn matchers.length > 1 ?\n");
      out.write("\t\tfunction( elem, context, xml ) {\n");
      out.write("\t\t\tvar i = matchers.length;\n");
      out.write("\t\t\twhile ( i-- ) {\n");
      out.write("\t\t\t\tif ( !matchers[i]( elem, context, xml ) ) {\n");
      out.write("\t\t\t\t\treturn false;\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\treturn true;\n");
      out.write("\t\t} :\n");
      out.write("\t\tmatchers[0];\n");
      out.write("}\n");
      out.write("\n");
      out.write("function multipleContexts( selector, contexts, results ) {\n");
      out.write("\tvar i = 0,\n");
      out.write("\t\tlen = contexts.length;\n");
      out.write("\tfor ( ; i < len; i++ ) {\n");
      out.write("\t\tSizzle( selector, contexts[i], results );\n");
      out.write("\t}\n");
      out.write("\treturn results;\n");
      out.write("}\n");
      out.write("\n");
      out.write("function condense( unmatched, map, filter, context, xml ) {\n");
      out.write("\tvar elem,\n");
      out.write("\t\tnewUnmatched = [],\n");
      out.write("\t\ti = 0,\n");
      out.write("\t\tlen = unmatched.length,\n");
      out.write("\t\tmapped = map != null;\n");
      out.write("\n");
      out.write("\tfor ( ; i < len; i++ ) {\n");
      out.write("\t\tif ( (elem = unmatched[i]) ) {\n");
      out.write("\t\t\tif ( !filter || filter( elem, context, xml ) ) {\n");
      out.write("\t\t\t\tnewUnmatched.push( elem );\n");
      out.write("\t\t\t\tif ( mapped ) {\n");
      out.write("\t\t\t\t\tmap.push( i );\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\treturn newUnmatched;\n");
      out.write("}\n");
      out.write("\n");
      out.write("function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n");
      out.write("\tif ( postFilter && !postFilter[ expando ] ) {\n");
      out.write("\t\tpostFilter = setMatcher( postFilter );\n");
      out.write("\t}\n");
      out.write("\tif ( postFinder && !postFinder[ expando ] ) {\n");
      out.write("\t\tpostFinder = setMatcher( postFinder, postSelector );\n");
      out.write("\t}\n");
      out.write("\treturn markFunction(function( seed, results, context, xml ) {\n");
      out.write("\t\tvar temp, i, elem,\n");
      out.write("\t\t\tpreMap = [],\n");
      out.write("\t\t\tpostMap = [],\n");
      out.write("\t\t\tpreexisting = results.length,\n");
      out.write("\n");
      out.write("\t\t\t// Get initial elements from seed or context\n");
      out.write("\t\t\telems = seed || multipleContexts( selector || \"*\", context.nodeType ? [ context ] : context, [] ),\n");
      out.write("\n");
      out.write("\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n");
      out.write("\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\n");
      out.write("\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\n");
      out.write("\t\t\t\telems,\n");
      out.write("\n");
      out.write("\t\t\tmatcherOut = matcher ?\n");
      out.write("\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n");
      out.write("\t\t\t\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n");
      out.write("\n");
      out.write("\t\t\t\t\t// ...intermediate processing is necessary\n");
      out.write("\t\t\t\t\t[] :\n");
      out.write("\n");
      out.write("\t\t\t\t\t// ...otherwise use results directly\n");
      out.write("\t\t\t\t\tresults :\n");
      out.write("\t\t\t\tmatcherIn;\n");
      out.write("\n");
      out.write("\t\t// Find primary matches\n");
      out.write("\t\tif ( matcher ) {\n");
      out.write("\t\t\tmatcher( matcherIn, matcherOut, context, xml );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Apply postFilter\n");
      out.write("\t\tif ( postFilter ) {\n");
      out.write("\t\t\ttemp = condense( matcherOut, postMap );\n");
      out.write("\t\t\tpostFilter( temp, [], context, xml );\n");
      out.write("\n");
      out.write("\t\t\t// Un-match failing elements by moving them back to matcherIn\n");
      out.write("\t\t\ti = temp.length;\n");
      out.write("\t\t\twhile ( i-- ) {\n");
      out.write("\t\t\t\tif ( (elem = temp[i]) ) {\n");
      out.write("\t\t\t\t\tmatcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tif ( seed ) {\n");
      out.write("\t\t\tif ( postFinder || preFilter ) {\n");
      out.write("\t\t\t\tif ( postFinder ) {\n");
      out.write("\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n");
      out.write("\t\t\t\t\ttemp = [];\n");
      out.write("\t\t\t\t\ti = matcherOut.length;\n");
      out.write("\t\t\t\t\twhile ( i-- ) {\n");
      out.write("\t\t\t\t\t\tif ( (elem = matcherOut[i]) ) {\n");
      out.write("\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n");
      out.write("\t\t\t\t\t\t\ttemp.push( (matcherIn[i] = elem) );\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t\tpostFinder( null, (matcherOut = []), temp, xml );\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n");
      out.write("\t\t\t\ti = matcherOut.length;\n");
      out.write("\t\t\t\twhile ( i-- ) {\n");
      out.write("\t\t\t\t\tif ( (elem = matcherOut[i]) &&\n");
      out.write("\t\t\t\t\t\t(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\tseed[temp] = !(results[temp] = elem);\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t// Add elements to results, through postFinder if defined\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\tmatcherOut = condense(\n");
      out.write("\t\t\t\tmatcherOut === results ?\n");
      out.write("\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\n");
      out.write("\t\t\t\t\tmatcherOut\n");
      out.write("\t\t\t);\n");
      out.write("\t\t\tif ( postFinder ) {\n");
      out.write("\t\t\t\tpostFinder( null, results, matcherOut, xml );\n");
      out.write("\t\t\t} else {\n");
      out.write("\t\t\t\tpush.apply( results, matcherOut );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t});\n");
      out.write("}\n");
      out.write("\n");
      out.write("function matcherFromTokens( tokens ) {\n");
      out.write("\tvar checkContext, matcher, j,\n");
      out.write("\t\tlen = tokens.length,\n");
      out.write("\t\tleadingRelative = Expr.relative[ tokens[0].type ],\n");
      out.write("\t\timplicitRelative = leadingRelative || Expr.relative[\" \"],\n");
      out.write("\t\ti = leadingRelative ? 1 : 0,\n");
      out.write("\n");
      out.write("\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n");
      out.write("\t\tmatchContext = addCombinator( function( elem ) {\n");
      out.write("\t\t\treturn elem === checkContext;\n");
      out.write("\t\t}, implicitRelative, true ),\n");
      out.write("\t\tmatchAnyContext = addCombinator( function( elem ) {\n");
      out.write("\t\t\treturn indexOf( checkContext, elem ) > -1;\n");
      out.write("\t\t}, implicitRelative, true ),\n");
      out.write("\t\tmatchers = [ function( elem, context, xml ) {\n");
      out.write("\t\t\tvar ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n");
      out.write("\t\t\t\t(checkContext = context).nodeType ?\n");
      out.write("\t\t\t\t\tmatchContext( elem, context, xml ) :\n");
      out.write("\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\n");
      out.write("\t\t\t// Avoid hanging onto element (issue #299)\n");
      out.write("\t\t\tcheckContext = null;\n");
      out.write("\t\t\treturn ret;\n");
      out.write("\t\t} ];\n");
      out.write("\n");
      out.write("\tfor ( ; i < len; i++ ) {\n");
      out.write("\t\tif ( (matcher = Expr.relative[ tokens[i].type ]) ) {\n");
      out.write("\t\t\tmatchers = [ addCombinator(elementMatcher( matchers ), matcher) ];\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\tmatcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );\n");
      out.write("\n");
      out.write("\t\t\t// Return special upon seeing a positional matcher\n");
      out.write("\t\t\tif ( matcher[ expando ] ) {\n");
      out.write("\t\t\t\t// Find the next relative operator (if any) for proper handling\n");
      out.write("\t\t\t\tj = ++i;\n");
      out.write("\t\t\t\tfor ( ; j < len; j++ ) {\n");
      out.write("\t\t\t\t\tif ( Expr.relative[ tokens[j].type ] ) {\n");
      out.write("\t\t\t\t\t\tbreak;\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\treturn setMatcher(\n");
      out.write("\t\t\t\t\ti > 1 && elementMatcher( matchers ),\n");
      out.write("\t\t\t\t\ti > 1 && toSelector(\n");
      out.write("\t\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n");
      out.write("\t\t\t\t\t\ttokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" })\n");
      out.write("\t\t\t\t\t).replace( rtrim, \"$1\" ),\n");
      out.write("\t\t\t\t\tmatcher,\n");
      out.write("\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\n");
      out.write("\t\t\t\t\tj < len && matcherFromTokens( (tokens = tokens.slice( j )) ),\n");
      out.write("\t\t\t\t\tj < len && toSelector( tokens )\n");
      out.write("\t\t\t\t);\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\tmatchers.push( matcher );\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\treturn elementMatcher( matchers );\n");
      out.write("}\n");
      out.write("\n");
      out.write("function matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n");
      out.write("\tvar bySet = setMatchers.length > 0,\n");
      out.write("\t\tbyElement = elementMatchers.length > 0,\n");
      out.write("\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\n");
      out.write("\t\t\tvar elem, j, matcher,\n");
      out.write("\t\t\t\tmatchedCount = 0,\n");
      out.write("\t\t\t\ti = \"0\",\n");
      out.write("\t\t\t\tunmatched = seed && [],\n");
      out.write("\t\t\t\tsetMatched = [],\n");
      out.write("\t\t\t\tcontextBackup = outermostContext,\n");
      out.write("\t\t\t\t// We must always have either seed elements or outermost context\n");
      out.write("\t\t\t\telems = seed || byElement && Expr.find[\"TAG\"]( \"*\", outermost ),\n");
      out.write("\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n");
      out.write("\t\t\t\tdirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),\n");
      out.write("\t\t\t\tlen = elems.length;\n");
      out.write("\n");
      out.write("\t\t\tif ( outermost ) {\n");
      out.write("\t\t\t\toutermostContext = context === document || context || outermost;\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Add elements passing elementMatchers directly to results\n");
      out.write("\t\t\t// Support: IE<9, Safari\n");
      out.write("\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n");
      out.write("\t\t\tfor ( ; i !== len && (elem = elems[i]) != null; i++ ) {\n");
      out.write("\t\t\t\tif ( byElement && elem ) {\n");
      out.write("\t\t\t\t\tj = 0;\n");
      out.write("\t\t\t\t\tif ( !context && elem.ownerDocument !== document ) {\n");
      out.write("\t\t\t\t\t\tsetDocument( elem );\n");
      out.write("\t\t\t\t\t\txml = !documentIsHTML;\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t\twhile ( (matcher = elementMatchers[j++]) ) {\n");
      out.write("\t\t\t\t\t\tif ( matcher( elem, context || document, xml) ) {\n");
      out.write("\t\t\t\t\t\t\tresults.push( elem );\n");
      out.write("\t\t\t\t\t\t\tbreak;\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t\tif ( outermost ) {\n");
      out.write("\t\t\t\t\t\tdirruns = dirrunsUnique;\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t// Track unmatched elements for set filters\n");
      out.write("\t\t\t\tif ( bySet ) {\n");
      out.write("\t\t\t\t\t// They will have gone through all possible matchers\n");
      out.write("\t\t\t\t\tif ( (elem = !matcher && elem) ) {\n");
      out.write("\t\t\t\t\t\tmatchedCount--;\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t\t// Lengthen the array for every element, matched or not\n");
      out.write("\t\t\t\t\tif ( seed ) {\n");
      out.write("\t\t\t\t\t\tunmatched.push( elem );\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\n");
      out.write("\t\t\t// makes the latter nonnegative.\n");
      out.write("\t\t\tmatchedCount += i;\n");
      out.write("\n");
      out.write("\t\t\t// Apply set filters to unmatched elements\n");
      out.write("\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n");
      out.write("\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n");
      out.write("\t\t\t// no element matchers and no seed.\n");
      out.write("\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n");
      out.write("\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n");
      out.write("\t\t\t// numerically zero.\n");
      out.write("\t\t\tif ( bySet && i !== matchedCount ) {\n");
      out.write("\t\t\t\tj = 0;\n");
      out.write("\t\t\t\twhile ( (matcher = setMatchers[j++]) ) {\n");
      out.write("\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\tif ( seed ) {\n");
      out.write("\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n");
      out.write("\t\t\t\t\tif ( matchedCount > 0 ) {\n");
      out.write("\t\t\t\t\t\twhile ( i-- ) {\n");
      out.write("\t\t\t\t\t\t\tif ( !(unmatched[i] || setMatched[i]) ) {\n");
      out.write("\t\t\t\t\t\t\t\tsetMatched[i] = pop.call( results );\n");
      out.write("\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t\t// Discard index placeholder values to get only actual matches\n");
      out.write("\t\t\t\t\tsetMatched = condense( setMatched );\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t// Add matches to results\n");
      out.write("\t\t\t\tpush.apply( results, setMatched );\n");
      out.write("\n");
      out.write("\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n");
      out.write("\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\n");
      out.write("\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\tSizzle.uniqueSort( results );\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Override manipulation of globals by nested matchers\n");
      out.write("\t\t\tif ( outermost ) {\n");
      out.write("\t\t\t\tdirruns = dirrunsUnique;\n");
      out.write("\t\t\t\toutermostContext = contextBackup;\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\treturn unmatched;\n");
      out.write("\t\t};\n");
      out.write("\n");
      out.write("\treturn bySet ?\n");
      out.write("\t\tmarkFunction( superMatcher ) :\n");
      out.write("\t\tsuperMatcher;\n");
      out.write("}\n");
      out.write("\n");
      out.write("compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\n");
      out.write("\tvar i,\n");
      out.write("\t\tsetMatchers = [],\n");
      out.write("\t\telementMatchers = [],\n");
      out.write("\t\tcached = compilerCache[ selector + \" \" ];\n");
      out.write("\n");
      out.write("\tif ( !cached ) {\n");
      out.write("\t\t// Generate a function of recursive functions that can be used to check each element\n");
      out.write("\t\tif ( !match ) {\n");
      out.write("\t\t\tmatch = tokenize( selector );\n");
      out.write("\t\t}\n");
      out.write("\t\ti = match.length;\n");
      out.write("\t\twhile ( i-- ) {\n");
      out.write("\t\t\tcached = matcherFromTokens( match[i] );\n");
      out.write("\t\t\tif ( cached[ expando ] ) {\n");
      out.write("\t\t\t\tsetMatchers.push( cached );\n");
      out.write("\t\t\t} else {\n");
      out.write("\t\t\t\telementMatchers.push( cached );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Cache the compiled function\n");
      out.write("\t\tcached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );\n");
      out.write("\n");
      out.write("\t\t// Save selector and tokenization\n");
      out.write("\t\tcached.selector = selector;\n");
      out.write("\t}\n");
      out.write("\treturn cached;\n");
      out.write("};\n");
      out.write("\n");
      out.write("/**\n");
      out.write(" * A low-level selection function that works with Sizzle's compiled\n");
      out.write(" *  selector functions\n");
      out.write(" * @param {String|Function} selector A selector or a pre-compiled\n");
      out.write(" *  selector function built with Sizzle.compile\n");
      out.write(" * @param {Element} context\n");
      out.write(" * @param {Array} [results]\n");
      out.write(" * @param {Array} [seed] A set of elements to match against\n");
      out.write(" */\n");
      out.write("select = Sizzle.select = function( selector, context, results, seed ) {\n");
      out.write("\tvar i, tokens, token, type, find,\n");
      out.write("\t\tcompiled = typeof selector === \"function\" && selector,\n");
      out.write("\t\tmatch = !seed && tokenize( (selector = compiled.selector || selector) );\n");
      out.write("\n");
      out.write("\tresults = results || [];\n");
      out.write("\n");
      out.write("\t// Try to minimize operations if there is only one selector in the list and no seed\n");
      out.write("\t// (the latter of which guarantees us context)\n");
      out.write("\tif ( match.length === 1 ) {\n");
      out.write("\n");
      out.write("\t\t// Reduce context if the leading compound selector is an ID\n");
      out.write("\t\ttokens = match[0] = match[0].slice( 0 );\n");
      out.write("\t\tif ( tokens.length > 2 && (token = tokens[0]).type === \"ID\" &&\n");
      out.write("\t\t\t\tcontext.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {\n");
      out.write("\n");
      out.write("\t\t\tcontext = ( Expr.find[\"ID\"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];\n");
      out.write("\t\t\tif ( !context ) {\n");
      out.write("\t\t\t\treturn results;\n");
      out.write("\n");
      out.write("\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n");
      out.write("\t\t\t} else if ( compiled ) {\n");
      out.write("\t\t\t\tcontext = context.parentNode;\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\tselector = selector.slice( tokens.shift().value.length );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Fetch a seed set for right-to-left matching\n");
      out.write("\t\ti = matchExpr[\"needsContext\"].test( selector ) ? 0 : tokens.length;\n");
      out.write("\t\twhile ( i-- ) {\n");
      out.write("\t\t\ttoken = tokens[i];\n");
      out.write("\n");
      out.write("\t\t\t// Abort if we hit a combinator\n");
      out.write("\t\t\tif ( Expr.relative[ (type = token.type) ] ) {\n");
      out.write("\t\t\t\tbreak;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\tif ( (find = Expr.find[ type ]) ) {\n");
      out.write("\t\t\t\t// Search, expanding context for leading sibling combinators\n");
      out.write("\t\t\t\tif ( (seed = find(\n");
      out.write("\t\t\t\t\ttoken.matches[0].replace( runescape, funescape ),\n");
      out.write("\t\t\t\t\trsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context\n");
      out.write("\t\t\t\t)) ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n");
      out.write("\t\t\t\t\ttokens.splice( i, 1 );\n");
      out.write("\t\t\t\t\tselector = seed.length && toSelector( tokens );\n");
      out.write("\t\t\t\t\tif ( !selector ) {\n");
      out.write("\t\t\t\t\t\tpush.apply( results, seed );\n");
      out.write("\t\t\t\t\t\treturn results;\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t\tbreak;\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// Compile and execute a filtering function if one is not provided\n");
      out.write("\t// Provide `match` to avoid retokenization if we modified the selector above\n");
      out.write("\t( compiled || compile( selector, match ) )(\n");
      out.write("\t\tseed,\n");
      out.write("\t\tcontext,\n");
      out.write("\t\t!documentIsHTML,\n");
      out.write("\t\tresults,\n");
      out.write("\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n");
      out.write("\t);\n");
      out.write("\treturn results;\n");
      out.write("};\n");
      out.write("\n");
      out.write("// One-time assignments\n");
      out.write("\n");
      out.write("// Sort stability\n");
      out.write("support.sortStable = expando.split(\"\").sort( sortOrder ).join(\"\") === expando;\n");
      out.write("\n");
      out.write("// Support: Chrome 14-35+\n");
      out.write("// Always assume duplicates if they aren't passed to the comparison function\n");
      out.write("support.detectDuplicates = !!hasDuplicate;\n");
      out.write("\n");
      out.write("// Initialize against the default document\n");
      out.write("setDocument();\n");
      out.write("\n");
      out.write("// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n");
      out.write("// Detached nodes confoundingly follow *each other*\n");
      out.write("support.sortDetached = assert(function( el ) {\n");
      out.write("\t// Should return 1, but returns 4 (following)\n");
      out.write("\treturn el.compareDocumentPosition( document.createElement(\"fieldset\") ) & 1;\n");
      out.write("});\n");
      out.write("\n");
      out.write("// Support: IE<8\n");
      out.write("// Prevent attribute/property \"interpolation\"\n");
      out.write("// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\n");
      out.write("if ( !assert(function( el ) {\n");
      out.write("\tel.innerHTML = \"<a href='#'></a>\";\n");
      out.write("\treturn el.firstChild.getAttribute(\"href\") === \"#\" ;\n");
      out.write("}) ) {\n");
      out.write("\taddHandle( \"type|href|height|width\", function( elem, name, isXML ) {\n");
      out.write("\t\tif ( !isXML ) {\n");
      out.write("\t\t\treturn elem.getAttribute( name, name.toLowerCase() === \"type\" ? 1 : 2 );\n");
      out.write("\t\t}\n");
      out.write("\t});\n");
      out.write("}\n");
      out.write("\n");
      out.write("// Support: IE<9\n");
      out.write("// Use defaultValue in place of getAttribute(\"value\")\n");
      out.write("if ( !support.attributes || !assert(function( el ) {\n");
      out.write("\tel.innerHTML = \"<input/>\";\n");
      out.write("\tel.firstChild.setAttribute( \"value\", \"\" );\n");
      out.write("\treturn el.firstChild.getAttribute( \"value\" ) === \"\";\n");
      out.write("}) ) {\n");
      out.write("\taddHandle( \"value\", function( elem, name, isXML ) {\n");
      out.write("\t\tif ( !isXML && elem.nodeName.toLowerCase() === \"input\" ) {\n");
      out.write("\t\t\treturn elem.defaultValue;\n");
      out.write("\t\t}\n");
      out.write("\t});\n");
      out.write("}\n");
      out.write("\n");
      out.write("// Support: IE<9\n");
      out.write("// Use getAttributeNode to fetch booleans when getAttribute lies\n");
      out.write("if ( !assert(function( el ) {\n");
      out.write("\treturn el.getAttribute(\"disabled\") == null;\n");
      out.write("}) ) {\n");
      out.write("\taddHandle( booleans, function( elem, name, isXML ) {\n");
      out.write("\t\tvar val;\n");
      out.write("\t\tif ( !isXML ) {\n");
      out.write("\t\t\treturn elem[ name ] === true ? name.toLowerCase() :\n");
      out.write("\t\t\t\t\t(val = elem.getAttributeNode( name )) && val.specified ?\n");
      out.write("\t\t\t\t\tval.value :\n");
      out.write("\t\t\t\tnull;\n");
      out.write("\t\t}\n");
      out.write("\t});\n");
      out.write("}\n");
      out.write("\n");
      out.write("return Sizzle;\n");
      out.write("\n");
      out.write("})( window );\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("jQuery.find = Sizzle;\n");
      out.write("jQuery.expr = Sizzle.selectors;\n");
      out.write("\n");
      out.write("// Deprecated\n");
      out.write("jQuery.expr[ \":\" ] = jQuery.expr.pseudos;\n");
      out.write("jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\n");
      out.write("jQuery.text = Sizzle.getText;\n");
      out.write("jQuery.isXMLDoc = Sizzle.isXML;\n");
      out.write("jQuery.contains = Sizzle.contains;\n");
      out.write("jQuery.escapeSelector = Sizzle.escape;\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("var dir = function( elem, dir, until ) {\n");
      out.write("\tvar matched = [],\n");
      out.write("\t\ttruncate = until !== undefined;\n");
      out.write("\n");
      out.write("\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n");
      out.write("\t\tif ( elem.nodeType === 1 ) {\n");
      out.write("\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n");
      out.write("\t\t\t\tbreak;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\tmatched.push( elem );\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\treturn matched;\n");
      out.write("};\n");
      out.write("\n");
      out.write("\n");
      out.write("var siblings = function( n, elem ) {\n");
      out.write("\tvar matched = [];\n");
      out.write("\n");
      out.write("\tfor ( ; n; n = n.nextSibling ) {\n");
      out.write("\t\tif ( n.nodeType === 1 && n !== elem ) {\n");
      out.write("\t\t\tmatched.push( n );\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\treturn matched;\n");
      out.write("};\n");
      out.write("\n");
      out.write("\n");
      out.write("var rneedsContext = jQuery.expr.match.needsContext;\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("function nodeName( elem, name ) {\n");
      out.write("\n");
      out.write("  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n");
      out.write("\n");
      out.write("};\n");
      out.write("var rsingleTag = ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// Implement the identical functionality for filter and not\n");
      out.write("function winnow( elements, qualifier, not ) {\n");
      out.write("\tif ( isFunction( qualifier ) ) {\n");
      out.write("\t\treturn jQuery.grep( elements, function( elem, i ) {\n");
      out.write("\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n");
      out.write("\t\t} );\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// Single element\n");
      out.write("\tif ( qualifier.nodeType ) {\n");
      out.write("\t\treturn jQuery.grep( elements, function( elem ) {\n");
      out.write("\t\t\treturn ( elem === qualifier ) !== not;\n");
      out.write("\t\t} );\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// Arraylike of elements (jQuery, arguments, Array)\n");
      out.write("\tif ( typeof qualifier !== \"string\" ) {\n");
      out.write("\t\treturn jQuery.grep( elements, function( elem ) {\n");
      out.write("\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n");
      out.write("\t\t} );\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// Filtered directly for both simple and complex selectors\n");
      out.write("\treturn jQuery.filter( qualifier, elements, not );\n");
      out.write("}\n");
      out.write("\n");
      out.write("jQuery.filter = function( expr, elems, not ) {\n");
      out.write("\tvar elem = elems[ 0 ];\n");
      out.write("\n");
      out.write("\tif ( not ) {\n");
      out.write("\t\texpr = \":not(\" + expr + \")\";\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tif ( elems.length === 1 && elem.nodeType === 1 ) {\n");
      out.write("\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n");
      out.write("\t\treturn elem.nodeType === 1;\n");
      out.write("\t} ) );\n");
      out.write("};\n");
      out.write("\n");
      out.write("jQuery.fn.extend( {\n");
      out.write("\tfind: function( selector ) {\n");
      out.write("\t\tvar i, ret,\n");
      out.write("\t\t\tlen = this.length,\n");
      out.write("\t\t\tself = this;\n");
      out.write("\n");
      out.write("\t\tif ( typeof selector !== \"string\" ) {\n");
      out.write("\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n");
      out.write("\t\t\t\tfor ( i = 0; i < len; i++ ) {\n");
      out.write("\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n");
      out.write("\t\t\t\t\t\treturn true;\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t} ) );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tret = this.pushStack( [] );\n");
      out.write("\n");
      out.write("\t\tfor ( i = 0; i < len; i++ ) {\n");
      out.write("\t\t\tjQuery.find( selector, self[ i ], ret );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;\n");
      out.write("\t},\n");
      out.write("\tfilter: function( selector ) {\n");
      out.write("\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n");
      out.write("\t},\n");
      out.write("\tnot: function( selector ) {\n");
      out.write("\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n");
      out.write("\t},\n");
      out.write("\tis: function( selector ) {\n");
      out.write("\t\treturn !!winnow(\n");
      out.write("\t\t\tthis,\n");
      out.write("\n");
      out.write("\t\t\t// If this is a positional/relative selector, check membership in the returned set\n");
      out.write("\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n");
      out.write("\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n");
      out.write("\t\t\t\tjQuery( selector ) :\n");
      out.write("\t\t\t\tselector || [],\n");
      out.write("\t\t\tfalse\n");
      out.write("\t\t).length;\n");
      out.write("\t}\n");
      out.write("} );\n");
      out.write("\n");
      out.write("\n");
      out.write("// Initialize a jQuery object\n");
      out.write("\n");
      out.write("\n");
      out.write("// A central reference to the root jQuery(document)\n");
      out.write("var rootjQuery,\n");
      out.write("\n");
      out.write("\t// A simple way to check for HTML strings\n");
      out.write("\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n");
      out.write("\t// Strict HTML recognition (#11290: must start with <)\n");
      out.write("\t// Shortcut simple #id case for speed\n");
      out.write("\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n");
      out.write("\n");
      out.write("\tinit = jQuery.fn.init = function( selector, context, root ) {\n");
      out.write("\t\tvar match, elem;\n");
      out.write("\n");
      out.write("\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n");
      out.write("\t\tif ( !selector ) {\n");
      out.write("\t\t\treturn this;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Method init() accepts an alternate rootjQuery\n");
      out.write("\t\t// so migrate can support jQuery.sub (gh-2101)\n");
      out.write("\t\troot = root || rootjQuery;\n");
      out.write("\n");
      out.write("\t\t// Handle HTML strings\n");
      out.write("\t\tif ( typeof selector === \"string\" ) {\n");
      out.write("\t\t\tif ( selector[ 0 ] === \"<\" &&\n");
      out.write("\t\t\t\tselector[ selector.length - 1 ] === \">\" &&\n");
      out.write("\t\t\t\tselector.length >= 3 ) {\n");
      out.write("\n");
      out.write("\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n");
      out.write("\t\t\t\tmatch = [ null, selector, null ];\n");
      out.write("\n");
      out.write("\t\t\t} else {\n");
      out.write("\t\t\t\tmatch = rquickExpr.exec( selector );\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Match html or make sure no context is specified for #id\n");
      out.write("\t\t\tif ( match && ( match[ 1 ] || !context ) ) {\n");
      out.write("\n");
      out.write("\t\t\t\t// HANDLE: $(html) -> $(array)\n");
      out.write("\t\t\t\tif ( match[ 1 ] ) {\n");
      out.write("\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;\n");
      out.write("\n");
      out.write("\t\t\t\t\t// Option to run scripts is true for back-compat\n");
      out.write("\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n");
      out.write("\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\n");
      out.write("\t\t\t\t\t\tmatch[ 1 ],\n");
      out.write("\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n");
      out.write("\t\t\t\t\t\ttrue\n");
      out.write("\t\t\t\t\t) );\n");
      out.write("\n");
      out.write("\t\t\t\t\t// HANDLE: $(html, props)\n");
      out.write("\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n");
      out.write("\t\t\t\t\t\tfor ( match in context ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n");
      out.write("\t\t\t\t\t\t\tif ( isFunction( this[ match ] ) ) {\n");
      out.write("\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t// ...and otherwise set as attributes\n");
      out.write("\t\t\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\n");
      out.write("\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t\treturn this;\n");
      out.write("\n");
      out.write("\t\t\t\t// HANDLE: $(#id)\n");
      out.write("\t\t\t\t} else {\n");
      out.write("\t\t\t\t\telem = document.getElementById( match[ 2 ] );\n");
      out.write("\n");
      out.write("\t\t\t\t\tif ( elem ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t// Inject the element directly into the jQuery object\n");
      out.write("\t\t\t\t\t\tthis[ 0 ] = elem;\n");
      out.write("\t\t\t\t\t\tthis.length = 1;\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t\treturn this;\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// HANDLE: $(expr, $(...))\n");
      out.write("\t\t\t} else if ( !context || context.jquery ) {\n");
      out.write("\t\t\t\treturn ( context || root ).find( selector );\n");
      out.write("\n");
      out.write("\t\t\t// HANDLE: $(expr, context)\n");
      out.write("\t\t\t// (which is just equivalent to: $(context).find(expr)\n");
      out.write("\t\t\t} else {\n");
      out.write("\t\t\t\treturn this.constructor( context ).find( selector );\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t// HANDLE: $(DOMElement)\n");
      out.write("\t\t} else if ( selector.nodeType ) {\n");
      out.write("\t\t\tthis[ 0 ] = selector;\n");
      out.write("\t\t\tthis.length = 1;\n");
      out.write("\t\t\treturn this;\n");
      out.write("\n");
      out.write("\t\t// HANDLE: $(function)\n");
      out.write("\t\t// Shortcut for document ready\n");
      out.write("\t\t} else if ( isFunction( selector ) ) {\n");
      out.write("\t\t\treturn root.ready !== undefined ?\n");
      out.write("\t\t\t\troot.ready( selector ) :\n");
      out.write("\n");
      out.write("\t\t\t\t// Execute immediately if ready is not present\n");
      out.write("\t\t\t\tselector( jQuery );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\treturn jQuery.makeArray( selector, this );\n");
      out.write("\t};\n");
      out.write("\n");
      out.write("// Give the init function the jQuery prototype for later instantiation\n");
      out.write("init.prototype = jQuery.fn;\n");
      out.write("\n");
      out.write("// Initialize central reference\n");
      out.write("rootjQuery = jQuery( document );\n");
      out.write("\n");
      out.write("\n");
      out.write("var rparentsprev = /^(?:parents|prev(?:Until|All))/,\n");
      out.write("\n");
      out.write("\t// Methods guaranteed to produce a unique set when starting from a unique set\n");
      out.write("\tguaranteedUnique = {\n");
      out.write("\t\tchildren: true,\n");
      out.write("\t\tcontents: true,\n");
      out.write("\t\tnext: true,\n");
      out.write("\t\tprev: true\n");
      out.write("\t};\n");
      out.write("\n");
      out.write("jQuery.fn.extend( {\n");
      out.write("\thas: function( target ) {\n");
      out.write("\t\tvar targets = jQuery( target, this ),\n");
      out.write("\t\t\tl = targets.length;\n");
      out.write("\n");
      out.write("\t\treturn this.filter( function() {\n");
      out.write("\t\t\tvar i = 0;\n");
      out.write("\t\t\tfor ( ; i < l; i++ ) {\n");
      out.write("\t\t\t\tif ( jQuery.contains( this, targets[ i ] ) ) {\n");
      out.write("\t\t\t\t\treturn true;\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t} );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tclosest: function( selectors, context ) {\n");
      out.write("\t\tvar cur,\n");
      out.write("\t\t\ti = 0,\n");
      out.write("\t\t\tl = this.length,\n");
      out.write("\t\t\tmatched = [],\n");
      out.write("\t\t\ttargets = typeof selectors !== \"string\" && jQuery( selectors );\n");
      out.write("\n");
      out.write("\t\t// Positional selectors never match, since there's no _selection_ context\n");
      out.write("\t\tif ( !rneedsContext.test( selectors ) ) {\n");
      out.write("\t\t\tfor ( ; i < l; i++ ) {\n");
      out.write("\t\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t// Always skip document fragments\n");
      out.write("\t\t\t\t\tif ( cur.nodeType < 11 && ( targets ?\n");
      out.write("\t\t\t\t\t\ttargets.index( cur ) > -1 :\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t// Don't pass non-elements to Sizzle\n");
      out.write("\t\t\t\t\t\tcur.nodeType === 1 &&\n");
      out.write("\t\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\tmatched.push( cur );\n");
      out.write("\t\t\t\t\t\tbreak;\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\t// Determine the position of an element within the set\n");
      out.write("\tindex: function( elem ) {\n");
      out.write("\n");
      out.write("\t\t// No argument, return index in parent\n");
      out.write("\t\tif ( !elem ) {\n");
      out.write("\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Index in selector\n");
      out.write("\t\tif ( typeof elem === \"string\" ) {\n");
      out.write("\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Locate the position of the desired element\n");
      out.write("\t\treturn indexOf.call( this,\n");
      out.write("\n");
      out.write("\t\t\t// If it receives a jQuery object, the first element is used\n");
      out.write("\t\t\telem.jquery ? elem[ 0 ] : elem\n");
      out.write("\t\t);\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tadd: function( selector, context ) {\n");
      out.write("\t\treturn this.pushStack(\n");
      out.write("\t\t\tjQuery.uniqueSort(\n");
      out.write("\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\n");
      out.write("\t\t\t)\n");
      out.write("\t\t);\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\taddBack: function( selector ) {\n");
      out.write("\t\treturn this.add( selector == null ?\n");
      out.write("\t\t\tthis.prevObject : this.prevObject.filter( selector )\n");
      out.write("\t\t);\n");
      out.write("\t}\n");
      out.write("} );\n");
      out.write("\n");
      out.write("function sibling( cur, dir ) {\n");
      out.write("\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n");
      out.write("\treturn cur;\n");
      out.write("}\n");
      out.write("\n");
      out.write("jQuery.each( {\n");
      out.write("\tparent: function( elem ) {\n");
      out.write("\t\tvar parent = elem.parentNode;\n");
      out.write("\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n");
      out.write("\t},\n");
      out.write("\tparents: function( elem ) {\n");
      out.write("\t\treturn dir( elem, \"parentNode\" );\n");
      out.write("\t},\n");
      out.write("\tparentsUntil: function( elem, i, until ) {\n");
      out.write("\t\treturn dir( elem, \"parentNode\", until );\n");
      out.write("\t},\n");
      out.write("\tnext: function( elem ) {\n");
      out.write("\t\treturn sibling( elem, \"nextSibling\" );\n");
      out.write("\t},\n");
      out.write("\tprev: function( elem ) {\n");
      out.write("\t\treturn sibling( elem, \"previousSibling\" );\n");
      out.write("\t},\n");
      out.write("\tnextAll: function( elem ) {\n");
      out.write("\t\treturn dir( elem, \"nextSibling\" );\n");
      out.write("\t},\n");
      out.write("\tprevAll: function( elem ) {\n");
      out.write("\t\treturn dir( elem, \"previousSibling\" );\n");
      out.write("\t},\n");
      out.write("\tnextUntil: function( elem, i, until ) {\n");
      out.write("\t\treturn dir( elem, \"nextSibling\", until );\n");
      out.write("\t},\n");
      out.write("\tprevUntil: function( elem, i, until ) {\n");
      out.write("\t\treturn dir( elem, \"previousSibling\", until );\n");
      out.write("\t},\n");
      out.write("\tsiblings: function( elem ) {\n");
      out.write("\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\n");
      out.write("\t},\n");
      out.write("\tchildren: function( elem ) {\n");
      out.write("\t\treturn siblings( elem.firstChild );\n");
      out.write("\t},\n");
      out.write("\tcontents: function( elem ) {\n");
      out.write("\t\tif ( typeof elem.contentDocument !== \"undefined\" ) {\n");
      out.write("\t\t\treturn elem.contentDocument;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n");
      out.write("\t\t// Treat the template element as a regular one in browsers that\n");
      out.write("\t\t// don't support it.\n");
      out.write("\t\tif ( nodeName( elem, \"template\" ) ) {\n");
      out.write("\t\t\telem = elem.content || elem;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\treturn jQuery.merge( [], elem.childNodes );\n");
      out.write("\t}\n");
      out.write("}, function( name, fn ) {\n");
      out.write("\tjQuery.fn[ name ] = function( until, selector ) {\n");
      out.write("\t\tvar matched = jQuery.map( this, fn, until );\n");
      out.write("\n");
      out.write("\t\tif ( name.slice( -5 ) !== \"Until\" ) {\n");
      out.write("\t\t\tselector = until;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tif ( selector && typeof selector === \"string\" ) {\n");
      out.write("\t\t\tmatched = jQuery.filter( selector, matched );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tif ( this.length > 1 ) {\n");
      out.write("\n");
      out.write("\t\t\t// Remove duplicates\n");
      out.write("\t\t\tif ( !guaranteedUnique[ name ] ) {\n");
      out.write("\t\t\t\tjQuery.uniqueSort( matched );\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Reverse order for parents* and prev-derivatives\n");
      out.write("\t\t\tif ( rparentsprev.test( name ) ) {\n");
      out.write("\t\t\t\tmatched.reverse();\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\treturn this.pushStack( matched );\n");
      out.write("\t};\n");
      out.write("} );\n");
      out.write("var rnothtmlwhite = ( /[^\\x20\\t\\r\\n\\f]+/g );\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// Convert String-formatted options into Object-formatted ones\n");
      out.write("function createOptions( options ) {\n");
      out.write("\tvar object = {};\n");
      out.write("\tjQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {\n");
      out.write("\t\tobject[ flag ] = true;\n");
      out.write("\t} );\n");
      out.write("\treturn object;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/*\n");
      out.write(" * Create a callback list using the following parameters:\n");
      out.write(" *\n");
      out.write(" *\toptions: an optional list of space-separated options that will change how\n");
      out.write(" *\t\t\tthe callback list behaves or a more traditional option object\n");
      out.write(" *\n");
      out.write(" * By default a callback list will act like an event callback list and can be\n");
      out.write(" * \"fired\" multiple times.\n");
      out.write(" *\n");
      out.write(" * Possible options:\n");
      out.write(" *\n");
      out.write(" *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n");
      out.write(" *\n");
      out.write(" *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n");
      out.write(" *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n");
      out.write(" *\t\t\t\t\tvalues (like a Deferred)\n");
      out.write(" *\n");
      out.write(" *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n");
      out.write(" *\n");
      out.write(" *\tstopOnFalse:\tinterrupt callings when a callback returns false\n");
      out.write(" *\n");
      out.write(" */\n");
      out.write("jQuery.Callbacks = function( options ) {\n");
      out.write("\n");
      out.write("\t// Convert options from String-formatted to Object-formatted if needed\n");
      out.write("\t// (we check in cache first)\n");
      out.write("\toptions = typeof options === \"string\" ?\n");
      out.write("\t\tcreateOptions( options ) :\n");
      out.write("\t\tjQuery.extend( {}, options );\n");
      out.write("\n");
      out.write("\tvar // Flag to know if list is currently firing\n");
      out.write("\t\tfiring,\n");
      out.write("\n");
      out.write("\t\t// Last fire value for non-forgettable lists\n");
      out.write("\t\tmemory,\n");
      out.write("\n");
      out.write("\t\t// Flag to know if list was already fired\n");
      out.write("\t\tfired,\n");
      out.write("\n");
      out.write("\t\t// Flag to prevent firing\n");
      out.write("\t\tlocked,\n");
      out.write("\n");
      out.write("\t\t// Actual callback list\n");
      out.write("\t\tlist = [],\n");
      out.write("\n");
      out.write("\t\t// Queue of execution data for repeatable lists\n");
      out.write("\t\tqueue = [],\n");
      out.write("\n");
      out.write("\t\t// Index of currently firing callback (modified by add/remove as needed)\n");
      out.write("\t\tfiringIndex = -1,\n");
      out.write("\n");
      out.write("\t\t// Fire callbacks\n");
      out.write("\t\tfire = function() {\n");
      out.write("\n");
      out.write("\t\t\t// Enforce single-firing\n");
      out.write("\t\t\tlocked = locked || options.once;\n");
      out.write("\n");
      out.write("\t\t\t// Execute callbacks for all pending executions,\n");
      out.write("\t\t\t// respecting firingIndex overrides and runtime changes\n");
      out.write("\t\t\tfired = firing = true;\n");
      out.write("\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\n");
      out.write("\t\t\t\tmemory = queue.shift();\n");
      out.write("\t\t\t\twhile ( ++firingIndex < list.length ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t// Run callback and check for early termination\n");
      out.write("\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n");
      out.write("\t\t\t\t\t\toptions.stopOnFalse ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n");
      out.write("\t\t\t\t\t\tfiringIndex = list.length;\n");
      out.write("\t\t\t\t\t\tmemory = false;\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Forget the data if we're done with it\n");
      out.write("\t\t\tif ( !options.memory ) {\n");
      out.write("\t\t\t\tmemory = false;\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\tfiring = false;\n");
      out.write("\n");
      out.write("\t\t\t// Clean up if we're done firing for good\n");
      out.write("\t\t\tif ( locked ) {\n");
      out.write("\n");
      out.write("\t\t\t\t// Keep an empty list if we have data for future add calls\n");
      out.write("\t\t\t\tif ( memory ) {\n");
      out.write("\t\t\t\t\tlist = [];\n");
      out.write("\n");
      out.write("\t\t\t\t// Otherwise, this object is spent\n");
      out.write("\t\t\t\t} else {\n");
      out.write("\t\t\t\t\tlist = \"\";\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t},\n");
      out.write("\n");
      out.write("\t\t// Actual Callbacks object\n");
      out.write("\t\tself = {\n");
      out.write("\n");
      out.write("\t\t\t// Add a callback or a collection of callbacks to the list\n");
      out.write("\t\t\tadd: function() {\n");
      out.write("\t\t\t\tif ( list ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n");
      out.write("\t\t\t\t\tif ( memory && !firing ) {\n");
      out.write("\t\t\t\t\t\tfiringIndex = list.length - 1;\n");
      out.write("\t\t\t\t\t\tqueue.push( memory );\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t\t( function add( args ) {\n");
      out.write("\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n");
      out.write("\t\t\t\t\t\t\tif ( isFunction( arg ) ) {\n");
      out.write("\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n");
      out.write("\t\t\t\t\t\t\t\t\tlist.push( arg );\n");
      out.write("\t\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t\t} else if ( arg && arg.length && toType( arg ) !== \"string\" ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\t// Inspect recursively\n");
      out.write("\t\t\t\t\t\t\t\tadd( arg );\n");
      out.write("\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t} );\n");
      out.write("\t\t\t\t\t} )( arguments );\n");
      out.write("\n");
      out.write("\t\t\t\t\tif ( memory && !firing ) {\n");
      out.write("\t\t\t\t\t\tfire();\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\treturn this;\n");
      out.write("\t\t\t},\n");
      out.write("\n");
      out.write("\t\t\t// Remove a callback from the list\n");
      out.write("\t\t\tremove: function() {\n");
      out.write("\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n");
      out.write("\t\t\t\t\tvar index;\n");
      out.write("\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n");
      out.write("\t\t\t\t\t\tlist.splice( index, 1 );\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t// Handle firing indexes\n");
      out.write("\t\t\t\t\t\tif ( index <= firingIndex ) {\n");
      out.write("\t\t\t\t\t\t\tfiringIndex--;\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t} );\n");
      out.write("\t\t\t\treturn this;\n");
      out.write("\t\t\t},\n");
      out.write("\n");
      out.write("\t\t\t// Check if a given callback is in the list.\n");
      out.write("\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n");
      out.write("\t\t\thas: function( fn ) {\n");
      out.write("\t\t\t\treturn fn ?\n");
      out.write("\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\n");
      out.write("\t\t\t\t\tlist.length > 0;\n");
      out.write("\t\t\t},\n");
      out.write("\n");
      out.write("\t\t\t// Remove all callbacks from the list\n");
      out.write("\t\t\tempty: function() {\n");
      out.write("\t\t\t\tif ( list ) {\n");
      out.write("\t\t\t\t\tlist = [];\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\treturn this;\n");
      out.write("\t\t\t},\n");
      out.write("\n");
      out.write("\t\t\t// Disable .fire and .add\n");
      out.write("\t\t\t// Abort any current/pending executions\n");
      out.write("\t\t\t// Clear all callbacks and values\n");
      out.write("\t\t\tdisable: function() {\n");
      out.write("\t\t\t\tlocked = queue = [];\n");
      out.write("\t\t\t\tlist = memory = \"\";\n");
      out.write("\t\t\t\treturn this;\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tdisabled: function() {\n");
      out.write("\t\t\t\treturn !list;\n");
      out.write("\t\t\t},\n");
      out.write("\n");
      out.write("\t\t\t// Disable .fire\n");
      out.write("\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n");
      out.write("\t\t\t// Abort any pending executions\n");
      out.write("\t\t\tlock: function() {\n");
      out.write("\t\t\t\tlocked = queue = [];\n");
      out.write("\t\t\t\tif ( !memory && !firing ) {\n");
      out.write("\t\t\t\t\tlist = memory = \"\";\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\treturn this;\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tlocked: function() {\n");
      out.write("\t\t\t\treturn !!locked;\n");
      out.write("\t\t\t},\n");
      out.write("\n");
      out.write("\t\t\t// Call all callbacks with the given context and arguments\n");
      out.write("\t\t\tfireWith: function( context, args ) {\n");
      out.write("\t\t\t\tif ( !locked ) {\n");
      out.write("\t\t\t\t\targs = args || [];\n");
      out.write("\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n");
      out.write("\t\t\t\t\tqueue.push( args );\n");
      out.write("\t\t\t\t\tif ( !firing ) {\n");
      out.write("\t\t\t\t\t\tfire();\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\treturn this;\n");
      out.write("\t\t\t},\n");
      out.write("\n");
      out.write("\t\t\t// Call all the callbacks with the given arguments\n");
      out.write("\t\t\tfire: function() {\n");
      out.write("\t\t\t\tself.fireWith( this, arguments );\n");
      out.write("\t\t\t\treturn this;\n");
      out.write("\t\t\t},\n");
      out.write("\n");
      out.write("\t\t\t// To know if the callbacks have already been called at least once\n");
      out.write("\t\t\tfired: function() {\n");
      out.write("\t\t\t\treturn !!fired;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t};\n");
      out.write("\n");
      out.write("\treturn self;\n");
      out.write("};\n");
      out.write("\n");
      out.write("\n");
      out.write("function Identity( v ) {\n");
      out.write("\treturn v;\n");
      out.write("}\n");
      out.write("function Thrower( ex ) {\n");
      out.write("\tthrow ex;\n");
      out.write("}\n");
      out.write("\n");
      out.write("function adoptValue( value, resolve, reject, noValue ) {\n");
      out.write("\tvar method;\n");
      out.write("\n");
      out.write("\ttry {\n");
      out.write("\n");
      out.write("\t\t// Check for promise aspect first to privilege synchronous behavior\n");
      out.write("\t\tif ( value && isFunction( ( method = value.promise ) ) ) {\n");
      out.write("\t\t\tmethod.call( value ).done( resolve ).fail( reject );\n");
      out.write("\n");
      out.write("\t\t// Other thenables\n");
      out.write("\t\t} else if ( value && isFunction( ( method = value.then ) ) ) {\n");
      out.write("\t\t\tmethod.call( value, resolve, reject );\n");
      out.write("\n");
      out.write("\t\t// Other non-thenables\n");
      out.write("\t\t} else {\n");
      out.write("\n");
      out.write("\t\t\t// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n");
      out.write("\t\t\t// * false: [ value ].slice( 0 ) => resolve( value )\n");
      out.write("\t\t\t// * true: [ value ].slice( 1 ) => resolve()\n");
      out.write("\t\t\tresolve.apply( undefined, [ value ].slice( noValue ) );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t// For Promises/A+, convert exceptions into rejections\n");
      out.write("\t// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\n");
      out.write("\t// Deferred#then to conditionally suppress rejection.\n");
      out.write("\t} catch ( value ) {\n");
      out.write("\n");
      out.write("\t\t// Support: Android 4.0 only\n");
      out.write("\t\t// Strict mode functions invoked without .call/.apply get global-object context\n");
      out.write("\t\treject.apply( undefined, [ value ] );\n");
      out.write("\t}\n");
      out.write("}\n");
      out.write("\n");
      out.write("jQuery.extend( {\n");
      out.write("\n");
      out.write("\tDeferred: function( func ) {\n");
      out.write("\t\tvar tuples = [\n");
      out.write("\n");
      out.write("\t\t\t\t// action, add listener, callbacks,\n");
      out.write("\t\t\t\t// ... .then handlers, argument index, [final state]\n");
      out.write("\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ),\n");
      out.write("\t\t\t\t\tjQuery.Callbacks( \"memory\" ), 2 ],\n");
      out.write("\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ),\n");
      out.write("\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 0, \"resolved\" ],\n");
      out.write("\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ),\n");
      out.write("\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 1, \"rejected\" ]\n");
      out.write("\t\t\t],\n");
      out.write("\t\t\tstate = \"pending\",\n");
      out.write("\t\t\tpromise = {\n");
      out.write("\t\t\t\tstate: function() {\n");
      out.write("\t\t\t\t\treturn state;\n");
      out.write("\t\t\t\t},\n");
      out.write("\t\t\t\talways: function() {\n");
      out.write("\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n");
      out.write("\t\t\t\t\treturn this;\n");
      out.write("\t\t\t\t},\n");
      out.write("\t\t\t\t\"catch\": function( fn ) {\n");
      out.write("\t\t\t\t\treturn promise.then( null, fn );\n");
      out.write("\t\t\t\t},\n");
      out.write("\n");
      out.write("\t\t\t\t// Keep pipe for back-compat\n");
      out.write("\t\t\t\tpipe: function( /* fnDone, fnFail, fnProgress */ ) {\n");
      out.write("\t\t\t\t\tvar fns = arguments;\n");
      out.write("\n");
      out.write("\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n");
      out.write("\t\t\t\t\t\tjQuery.each( tuples, function( i, tuple ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t// Map tuples (progress, done, fail) to arguments (done, fail, progress)\n");
      out.write("\t\t\t\t\t\t\tvar fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t// deferred.progress(function() { bind to newDefer or newDefer.notify })\n");
      out.write("\t\t\t\t\t\t\t// deferred.done(function() { bind to newDefer or newDefer.resolve })\n");
      out.write("\t\t\t\t\t\t\t// deferred.fail(function() { bind to newDefer or newDefer.reject })\n");
      out.write("\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {\n");
      out.write("\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\n");
      out.write("\t\t\t\t\t\t\t\tif ( returned && isFunction( returned.promise ) ) {\n");
      out.write("\t\t\t\t\t\t\t\t\treturned.promise()\n");
      out.write("\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )\n");
      out.write("\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n");
      out.write("\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );\n");
      out.write("\t\t\t\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ](\n");
      out.write("\t\t\t\t\t\t\t\t\t\tthis,\n");
      out.write("\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments\n");
      out.write("\t\t\t\t\t\t\t\t\t);\n");
      out.write("\t\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t\t} );\n");
      out.write("\t\t\t\t\t\t} );\n");
      out.write("\t\t\t\t\t\tfns = null;\n");
      out.write("\t\t\t\t\t} ).promise();\n");
      out.write("\t\t\t\t},\n");
      out.write("\t\t\t\tthen: function( onFulfilled, onRejected, onProgress ) {\n");
      out.write("\t\t\t\t\tvar maxDepth = 0;\n");
      out.write("\t\t\t\t\tfunction resolve( depth, deferred, handler, special ) {\n");
      out.write("\t\t\t\t\t\treturn function() {\n");
      out.write("\t\t\t\t\t\t\tvar that = this,\n");
      out.write("\t\t\t\t\t\t\t\targs = arguments,\n");
      out.write("\t\t\t\t\t\t\t\tmightThrow = function() {\n");
      out.write("\t\t\t\t\t\t\t\t\tvar returned, then;\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.3\n");
      out.write("\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-59\n");
      out.write("\t\t\t\t\t\t\t\t\t// Ignore double-resolution attempts\n");
      out.write("\t\t\t\t\t\t\t\t\tif ( depth < maxDepth ) {\n");
      out.write("\t\t\t\t\t\t\t\t\t\treturn;\n");
      out.write("\t\t\t\t\t\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\t\treturned = handler.apply( that, args );\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.1\n");
      out.write("\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-48\n");
      out.write("\t\t\t\t\t\t\t\t\tif ( returned === deferred.promise() ) {\n");
      out.write("\t\t\t\t\t\t\t\t\t\tthrow new TypeError( \"Thenable self-resolution\" );\n");
      out.write("\t\t\t\t\t\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\t\t// Support: Promises/A+ sections 2.3.3.1, 3.5\n");
      out.write("\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-54\n");
      out.write("\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-75\n");
      out.write("\t\t\t\t\t\t\t\t\t// Retrieve `then` only once\n");
      out.write("\t\t\t\t\t\t\t\t\tthen = returned &&\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.4\n");
      out.write("\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-64\n");
      out.write("\t\t\t\t\t\t\t\t\t\t// Only check objects and functions for thenability\n");
      out.write("\t\t\t\t\t\t\t\t\t\t( typeof returned === \"object\" ||\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\ttypeof returned === \"function\" ) &&\n");
      out.write("\t\t\t\t\t\t\t\t\t\treturned.then;\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\t\t// Handle a returned thenable\n");
      out.write("\t\t\t\t\t\t\t\t\tif ( isFunction( then ) ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\t\t\t// Special processors (notify) just wait for resolution\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif ( special ) {\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tthen.call(\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\treturned,\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special )\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t);\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\t\t\t// Normal processors (resolve) also hook into progress\n");
      out.write("\t\t\t\t\t\t\t\t\t\t} else {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t// ...and disregard older resolution values\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tmaxDepth++;\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tthen.call(\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\treturned,\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special ),\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity,\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\tdeferred.notifyWith )\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t);\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\t\t// Handle all other returned values\n");
      out.write("\t\t\t\t\t\t\t\t\t} else {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n");
      out.write("\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif ( handler !== Identity ) {\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\targs = [ returned ];\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\t\t\t// Process the value(s)\n");
      out.write("\t\t\t\t\t\t\t\t\t\t// Default process is resolve\n");
      out.write("\t\t\t\t\t\t\t\t\t\t( special || deferred.resolveWith )( that, args );\n");
      out.write("\t\t\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t\t\t},\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\t// Only normal processors (resolve) catch and reject exceptions\n");
      out.write("\t\t\t\t\t\t\t\tprocess = special ?\n");
      out.write("\t\t\t\t\t\t\t\t\tmightThrow :\n");
      out.write("\t\t\t\t\t\t\t\t\tfunction() {\n");
      out.write("\t\t\t\t\t\t\t\t\t\ttry {\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tmightThrow();\n");
      out.write("\t\t\t\t\t\t\t\t\t\t} catch ( e ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tif ( jQuery.Deferred.exceptionHook ) {\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tjQuery.Deferred.exceptionHook( e,\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\tprocess.stackTrace );\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.4.1\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-61\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t// Ignore post-resolution exceptions\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tif ( depth + 1 >= maxDepth ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tif ( handler !== Thrower ) {\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\targs = [ e ];\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tdeferred.rejectWith( that, args );\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t\t\t\t};\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.1\n");
      out.write("\t\t\t\t\t\t\t// https://promisesaplus.com/#point-57\n");
      out.write("\t\t\t\t\t\t\t// Re-resolve promises immediately to dodge false rejection from\n");
      out.write("\t\t\t\t\t\t\t// subsequent errors\n");
      out.write("\t\t\t\t\t\t\tif ( depth ) {\n");
      out.write("\t\t\t\t\t\t\t\tprocess();\n");
      out.write("\t\t\t\t\t\t\t} else {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\t// Call an optional hook to record the stack, in case of exception\n");
      out.write("\t\t\t\t\t\t\t\t// since it's otherwise lost when execution goes async\n");
      out.write("\t\t\t\t\t\t\t\tif ( jQuery.Deferred.getStackHook ) {\n");
      out.write("\t\t\t\t\t\t\t\t\tprocess.stackTrace = jQuery.Deferred.getStackHook();\n");
      out.write("\t\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t\t\twindow.setTimeout( process );\n");
      out.write("\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t};\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t// progress_handlers.add( ... )\n");
      out.write("\t\t\t\t\t\ttuples[ 0 ][ 3 ].add(\n");
      out.write("\t\t\t\t\t\t\tresolve(\n");
      out.write("\t\t\t\t\t\t\t\t0,\n");
      out.write("\t\t\t\t\t\t\t\tnewDefer,\n");
      out.write("\t\t\t\t\t\t\t\tisFunction( onProgress ) ?\n");
      out.write("\t\t\t\t\t\t\t\t\tonProgress :\n");
      out.write("\t\t\t\t\t\t\t\t\tIdentity,\n");
      out.write("\t\t\t\t\t\t\t\tnewDefer.notifyWith\n");
      out.write("\t\t\t\t\t\t\t)\n");
      out.write("\t\t\t\t\t\t);\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t// fulfilled_handlers.add( ... )\n");
      out.write("\t\t\t\t\t\ttuples[ 1 ][ 3 ].add(\n");
      out.write("\t\t\t\t\t\t\tresolve(\n");
      out.write("\t\t\t\t\t\t\t\t0,\n");
      out.write("\t\t\t\t\t\t\t\tnewDefer,\n");
      out.write("\t\t\t\t\t\t\t\tisFunction( onFulfilled ) ?\n");
      out.write("\t\t\t\t\t\t\t\t\tonFulfilled :\n");
      out.write("\t\t\t\t\t\t\t\t\tIdentity\n");
      out.write("\t\t\t\t\t\t\t)\n");
      out.write("\t\t\t\t\t\t);\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t// rejected_handlers.add( ... )\n");
      out.write("\t\t\t\t\t\ttuples[ 2 ][ 3 ].add(\n");
      out.write("\t\t\t\t\t\t\tresolve(\n");
      out.write("\t\t\t\t\t\t\t\t0,\n");
      out.write("\t\t\t\t\t\t\t\tnewDefer,\n");
      out.write("\t\t\t\t\t\t\t\tisFunction( onRejected ) ?\n");
      out.write("\t\t\t\t\t\t\t\t\tonRejected :\n");
      out.write("\t\t\t\t\t\t\t\t\tThrower\n");
      out.write("\t\t\t\t\t\t\t)\n");
      out.write("\t\t\t\t\t\t);\n");
      out.write("\t\t\t\t\t} ).promise();\n");
      out.write("\t\t\t\t},\n");
      out.write("\n");
      out.write("\t\t\t\t// Get a promise for this deferred\n");
      out.write("\t\t\t\t// If obj is provided, the promise aspect is added to the object\n");
      out.write("\t\t\t\tpromise: function( obj ) {\n");
      out.write("\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tdeferred = {};\n");
      out.write("\n");
      out.write("\t\t// Add list-specific methods\n");
      out.write("\t\tjQuery.each( tuples, function( i, tuple ) {\n");
      out.write("\t\t\tvar list = tuple[ 2 ],\n");
      out.write("\t\t\t\tstateString = tuple[ 5 ];\n");
      out.write("\n");
      out.write("\t\t\t// promise.progress = list.add\n");
      out.write("\t\t\t// promise.done = list.add\n");
      out.write("\t\t\t// promise.fail = list.add\n");
      out.write("\t\t\tpromise[ tuple[ 1 ] ] = list.add;\n");
      out.write("\n");
      out.write("\t\t\t// Handle state\n");
      out.write("\t\t\tif ( stateString ) {\n");
      out.write("\t\t\t\tlist.add(\n");
      out.write("\t\t\t\t\tfunction() {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t// state = \"resolved\" (i.e., fulfilled)\n");
      out.write("\t\t\t\t\t\t// state = \"rejected\"\n");
      out.write("\t\t\t\t\t\tstate = stateString;\n");
      out.write("\t\t\t\t\t},\n");
      out.write("\n");
      out.write("\t\t\t\t\t// rejected_callbacks.disable\n");
      out.write("\t\t\t\t\t// fulfilled_callbacks.disable\n");
      out.write("\t\t\t\t\ttuples[ 3 - i ][ 2 ].disable,\n");
      out.write("\n");
      out.write("\t\t\t\t\t// rejected_handlers.disable\n");
      out.write("\t\t\t\t\t// fulfilled_handlers.disable\n");
      out.write("\t\t\t\t\ttuples[ 3 - i ][ 3 ].disable,\n");
      out.write("\n");
      out.write("\t\t\t\t\t// progress_callbacks.lock\n");
      out.write("\t\t\t\t\ttuples[ 0 ][ 2 ].lock,\n");
      out.write("\n");
      out.write("\t\t\t\t\t// progress_handlers.lock\n");
      out.write("\t\t\t\t\ttuples[ 0 ][ 3 ].lock\n");
      out.write("\t\t\t\t);\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// progress_handlers.fire\n");
      out.write("\t\t\t// fulfilled_handlers.fire\n");
      out.write("\t\t\t// rejected_handlers.fire\n");
      out.write("\t\t\tlist.add( tuple[ 3 ].fire );\n");
      out.write("\n");
      out.write("\t\t\t// deferred.notify = function() { deferred.notifyWith(...) }\n");
      out.write("\t\t\t// deferred.resolve = function() { deferred.resolveWith(...) }\n");
      out.write("\t\t\t// deferred.reject = function() { deferred.rejectWith(...) }\n");
      out.write("\t\t\tdeferred[ tuple[ 0 ] ] = function() {\n");
      out.write("\t\t\t\tdeferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? undefined : this, arguments );\n");
      out.write("\t\t\t\treturn this;\n");
      out.write("\t\t\t};\n");
      out.write("\n");
      out.write("\t\t\t// deferred.notifyWith = list.fireWith\n");
      out.write("\t\t\t// deferred.resolveWith = list.fireWith\n");
      out.write("\t\t\t// deferred.rejectWith = list.fireWith\n");
      out.write("\t\t\tdeferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\n");
      out.write("\t\t} );\n");
      out.write("\n");
      out.write("\t\t// Make the deferred a promise\n");
      out.write("\t\tpromise.promise( deferred );\n");
      out.write("\n");
      out.write("\t\t// Call given func if any\n");
      out.write("\t\tif ( func ) {\n");
      out.write("\t\t\tfunc.call( deferred, deferred );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// All done!\n");
      out.write("\t\treturn deferred;\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\t// Deferred helper\n");
      out.write("\twhen: function( singleValue ) {\n");
      out.write("\t\tvar\n");
      out.write("\n");
      out.write("\t\t\t// count of uncompleted subordinates\n");
      out.write("\t\t\tremaining = arguments.length,\n");
      out.write("\n");
      out.write("\t\t\t// count of unprocessed arguments\n");
      out.write("\t\t\ti = remaining,\n");
      out.write("\n");
      out.write("\t\t\t// subordinate fulfillment data\n");
      out.write("\t\t\tresolveContexts = Array( i ),\n");
      out.write("\t\t\tresolveValues = slice.call( arguments ),\n");
      out.write("\n");
      out.write("\t\t\t// the master Deferred\n");
      out.write("\t\t\tmaster = jQuery.Deferred(),\n");
      out.write("\n");
      out.write("\t\t\t// subordinate callback factory\n");
      out.write("\t\t\tupdateFunc = function( i ) {\n");
      out.write("\t\t\t\treturn function( value ) {\n");
      out.write("\t\t\t\t\tresolveContexts[ i ] = this;\n");
      out.write("\t\t\t\t\tresolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n");
      out.write("\t\t\t\t\tif ( !( --remaining ) ) {\n");
      out.write("\t\t\t\t\t\tmaster.resolveWith( resolveContexts, resolveValues );\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t};\n");
      out.write("\t\t\t};\n");
      out.write("\n");
      out.write("\t\t// Single- and empty arguments are adopted like Promise.resolve\n");
      out.write("\t\tif ( remaining <= 1 ) {\n");
      out.write("\t\t\tadoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,\n");
      out.write("\t\t\t\t!remaining );\n");
      out.write("\n");
      out.write("\t\t\t// Use .then() to unwrap secondary thenables (cf. gh-3000)\n");
      out.write("\t\t\tif ( master.state() === \"pending\" ||\n");
      out.write("\t\t\t\tisFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {\n");
      out.write("\n");
      out.write("\t\t\t\treturn master.then();\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Multiple arguments are aggregated like Promise.all array elements\n");
      out.write("\t\twhile ( i-- ) {\n");
      out.write("\t\t\tadoptValue( resolveValues[ i ], updateFunc( i ), master.reject );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\treturn master.promise();\n");
      out.write("\t}\n");
      out.write("} );\n");
      out.write("\n");
      out.write("\n");
      out.write("// These usually indicate a programmer mistake during development,\n");
      out.write("// warn about them ASAP rather than swallowing them by default.\n");
      out.write("var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n");
      out.write("\n");
      out.write("jQuery.Deferred.exceptionHook = function( error, stack ) {\n");
      out.write("\n");
      out.write("\t// Support: IE 8 - 9 only\n");
      out.write("\t// Console exists when dev tools are open, which can happen at any time\n");
      out.write("\tif ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {\n");
      out.write("\t\twindow.console.warn( \"jQuery.Deferred exception: \" + error.message, error.stack, stack );\n");
      out.write("\t}\n");
      out.write("};\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("jQuery.readyException = function( error ) {\n");
      out.write("\twindow.setTimeout( function() {\n");
      out.write("\t\tthrow error;\n");
      out.write("\t} );\n");
      out.write("};\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// The deferred used on DOM ready\n");
      out.write("var readyList = jQuery.Deferred();\n");
      out.write("\n");
      out.write("jQuery.fn.ready = function( fn ) {\n");
      out.write("\n");
      out.write("\treadyList\n");
      out.write("\t\t.then( fn )\n");
      out.write("\n");
      out.write("\t\t// Wrap jQuery.readyException in a function so that the lookup\n");
      out.write("\t\t// happens at the time of error handling instead of callback\n");
      out.write("\t\t// registration.\n");
      out.write("\t\t.catch( function( error ) {\n");
      out.write("\t\t\tjQuery.readyException( error );\n");
      out.write("\t\t} );\n");
      out.write("\n");
      out.write("\treturn this;\n");
      out.write("};\n");
      out.write("\n");
      out.write("jQuery.extend( {\n");
      out.write("\n");
      out.write("\t// Is the DOM ready to be used? Set to true once it occurs.\n");
      out.write("\tisReady: false,\n");
      out.write("\n");
      out.write("\t// A counter to track how many items to wait for before\n");
      out.write("\t// the ready event fires. See #6781\n");
      out.write("\treadyWait: 1,\n");
      out.write("\n");
      out.write("\t// Handle when the DOM is ready\n");
      out.write("\tready: function( wait ) {\n");
      out.write("\n");
      out.write("\t\t// Abort if there are pending holds or we're already ready\n");
      out.write("\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n");
      out.write("\t\t\treturn;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Remember that the DOM is ready\n");
      out.write("\t\tjQuery.isReady = true;\n");
      out.write("\n");
      out.write("\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n");
      out.write("\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n");
      out.write("\t\t\treturn;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// If there are functions bound, to execute\n");
      out.write("\t\treadyList.resolveWith( document, [ jQuery ] );\n");
      out.write("\t}\n");
      out.write("} );\n");
      out.write("\n");
      out.write("jQuery.ready.then = readyList.then;\n");
      out.write("\n");
      out.write("// The ready event handler and self cleanup method\n");
      out.write("function completed() {\n");
      out.write("\tdocument.removeEventListener( \"DOMContentLoaded\", completed );\n");
      out.write("\twindow.removeEventListener( \"load\", completed );\n");
      out.write("\tjQuery.ready();\n");
      out.write("}\n");
      out.write("\n");
      out.write("// Catch cases where $(document).ready() is called\n");
      out.write("// after the browser event has already occurred.\n");
      out.write("// Support: IE <=9 - 10 only\n");
      out.write("// Older IE sometimes signals \"interactive\" too soon\n");
      out.write("if ( document.readyState === \"complete\" ||\n");
      out.write("\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\n");
      out.write("\n");
      out.write("\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n");
      out.write("\twindow.setTimeout( jQuery.ready );\n");
      out.write("\n");
      out.write("} else {\n");
      out.write("\n");
      out.write("\t// Use the handy event callback\n");
      out.write("\tdocument.addEventListener( \"DOMContentLoaded\", completed );\n");
      out.write("\n");
      out.write("\t// A fallback to window.onload, that will always work\n");
      out.write("\twindow.addEventListener( \"load\", completed );\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// Multifunctional method to get and set values of a collection\n");
      out.write("// The value/s can optionally be executed if it's a function\n");
      out.write("var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n");
      out.write("\tvar i = 0,\n");
      out.write("\t\tlen = elems.length,\n");
      out.write("\t\tbulk = key == null;\n");
      out.write("\n");
      out.write("\t// Sets many values\n");
      out.write("\tif ( toType( key ) === \"object\" ) {\n");
      out.write("\t\tchainable = true;\n");
      out.write("\t\tfor ( i in key ) {\n");
      out.write("\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t// Sets one value\n");
      out.write("\t} else if ( value !== undefined ) {\n");
      out.write("\t\tchainable = true;\n");
      out.write("\n");
      out.write("\t\tif ( !isFunction( value ) ) {\n");
      out.write("\t\t\traw = true;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tif ( bulk ) {\n");
      out.write("\n");
      out.write("\t\t\t// Bulk operations run against the entire set\n");
      out.write("\t\t\tif ( raw ) {\n");
      out.write("\t\t\t\tfn.call( elems, value );\n");
      out.write("\t\t\t\tfn = null;\n");
      out.write("\n");
      out.write("\t\t\t// ...except when executing function values\n");
      out.write("\t\t\t} else {\n");
      out.write("\t\t\t\tbulk = fn;\n");
      out.write("\t\t\t\tfn = function( elem, key, value ) {\n");
      out.write("\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\n");
      out.write("\t\t\t\t};\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tif ( fn ) {\n");
      out.write("\t\t\tfor ( ; i < len; i++ ) {\n");
      out.write("\t\t\t\tfn(\n");
      out.write("\t\t\t\t\telems[ i ], key, raw ?\n");
      out.write("\t\t\t\t\tvalue :\n");
      out.write("\t\t\t\t\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )\n");
      out.write("\t\t\t\t);\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tif ( chainable ) {\n");
      out.write("\t\treturn elems;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// Gets\n");
      out.write("\tif ( bulk ) {\n");
      out.write("\t\treturn fn.call( elems );\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\treturn len ? fn( elems[ 0 ], key ) : emptyGet;\n");
      out.write("};\n");
      out.write("\n");
      out.write("\n");
      out.write("// Matches dashed string for camelizing\n");
      out.write("var rmsPrefix = /^-ms-/,\n");
      out.write("\trdashAlpha = /-([a-z])/g;\n");
      out.write("\n");
      out.write("// Used by camelCase as callback to replace()\n");
      out.write("function fcamelCase( all, letter ) {\n");
      out.write("\treturn letter.toUpperCase();\n");
      out.write("}\n");
      out.write("\n");
      out.write("// Convert dashed to camelCase; used by the css and data modules\n");
      out.write("// Support: IE <=9 - 11, Edge 12 - 15\n");
      out.write("// Microsoft forgot to hump their vendor prefix (#9572)\n");
      out.write("function camelCase( string ) {\n");
      out.write("\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n");
      out.write("}\n");
      out.write("var acceptData = function( owner ) {\n");
      out.write("\n");
      out.write("\t// Accepts only:\n");
      out.write("\t//  - Node\n");
      out.write("\t//    - Node.ELEMENT_NODE\n");
      out.write("\t//    - Node.DOCUMENT_NODE\n");
      out.write("\t//  - Object\n");
      out.write("\t//    - Any\n");
      out.write("\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n");
      out.write("};\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("function Data() {\n");
      out.write("\tthis.expando = jQuery.expando + Data.uid++;\n");
      out.write("}\n");
      out.write("\n");
      out.write("Data.uid = 1;\n");
      out.write("\n");
      out.write("Data.prototype = {\n");
      out.write("\n");
      out.write("\tcache: function( owner ) {\n");
      out.write("\n");
      out.write("\t\t// Check if the owner object already has a cache\n");
      out.write("\t\tvar value = owner[ this.expando ];\n");
      out.write("\n");
      out.write("\t\t// If not, create one\n");
      out.write("\t\tif ( !value ) {\n");
      out.write("\t\t\tvalue = {};\n");
      out.write("\n");
      out.write("\t\t\t// We can accept data for non-element nodes in modern browsers,\n");
      out.write("\t\t\t// but we should not, see #8335.\n");
      out.write("\t\t\t// Always return an empty object.\n");
      out.write("\t\t\tif ( acceptData( owner ) ) {\n");
      out.write("\n");
      out.write("\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\n");
      out.write("\t\t\t\t// use plain assignment\n");
      out.write("\t\t\t\tif ( owner.nodeType ) {\n");
      out.write("\t\t\t\t\towner[ this.expando ] = value;\n");
      out.write("\n");
      out.write("\t\t\t\t// Otherwise secure it in a non-enumerable property\n");
      out.write("\t\t\t\t// configurable must be true to allow the property to be\n");
      out.write("\t\t\t\t// deleted when data is removed\n");
      out.write("\t\t\t\t} else {\n");
      out.write("\t\t\t\t\tObject.defineProperty( owner, this.expando, {\n");
      out.write("\t\t\t\t\t\tvalue: value,\n");
      out.write("\t\t\t\t\t\tconfigurable: true\n");
      out.write("\t\t\t\t\t} );\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\treturn value;\n");
      out.write("\t},\n");
      out.write("\tset: function( owner, data, value ) {\n");
      out.write("\t\tvar prop,\n");
      out.write("\t\t\tcache = this.cache( owner );\n");
      out.write("\n");
      out.write("\t\t// Handle: [ owner, key, value ] args\n");
      out.write("\t\t// Always use camelCase key (gh-2257)\n");
      out.write("\t\tif ( typeof data === \"string\" ) {\n");
      out.write("\t\t\tcache[ camelCase( data ) ] = value;\n");
      out.write("\n");
      out.write("\t\t// Handle: [ owner, { properties } ] args\n");
      out.write("\t\t} else {\n");
      out.write("\n");
      out.write("\t\t\t// Copy the properties one-by-one to the cache object\n");
      out.write("\t\t\tfor ( prop in data ) {\n");
      out.write("\t\t\t\tcache[ camelCase( prop ) ] = data[ prop ];\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t\treturn cache;\n");
      out.write("\t},\n");
      out.write("\tget: function( owner, key ) {\n");
      out.write("\t\treturn key === undefined ?\n");
      out.write("\t\t\tthis.cache( owner ) :\n");
      out.write("\n");
      out.write("\t\t\t// Always use camelCase key (gh-2257)\n");
      out.write("\t\t\towner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];\n");
      out.write("\t},\n");
      out.write("\taccess: function( owner, key, value ) {\n");
      out.write("\n");
      out.write("\t\t// In cases where either:\n");
      out.write("\t\t//\n");
      out.write("\t\t//   1. No key was specified\n");
      out.write("\t\t//   2. A string key was specified, but no value provided\n");
      out.write("\t\t//\n");
      out.write("\t\t// Take the \"read\" path and allow the get method to determine\n");
      out.write("\t\t// which value to return, respectively either:\n");
      out.write("\t\t//\n");
      out.write("\t\t//   1. The entire cache object\n");
      out.write("\t\t//   2. The data stored at the key\n");
      out.write("\t\t//\n");
      out.write("\t\tif ( key === undefined ||\n");
      out.write("\t\t\t\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\n");
      out.write("\n");
      out.write("\t\t\treturn this.get( owner, key );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// When the key is not a string, or both a key and value\n");
      out.write("\t\t// are specified, set or extend (existing objects) with either:\n");
      out.write("\t\t//\n");
      out.write("\t\t//   1. An object of properties\n");
      out.write("\t\t//   2. A key and value\n");
      out.write("\t\t//\n");
      out.write("\t\tthis.set( owner, key, value );\n");
      out.write("\n");
      out.write("\t\t// Since the \"set\" path can have two possible entry points\n");
      out.write("\t\t// return the expected data based on which path was taken[*]\n");
      out.write("\t\treturn value !== undefined ? value : key;\n");
      out.write("\t},\n");
      out.write("\tremove: function( owner, key ) {\n");
      out.write("\t\tvar i,\n");
      out.write("\t\t\tcache = owner[ this.expando ];\n");
      out.write("\n");
      out.write("\t\tif ( cache === undefined ) {\n");
      out.write("\t\t\treturn;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tif ( key !== undefined ) {\n");
      out.write("\n");
      out.write("\t\t\t// Support array or space separated string of keys\n");
      out.write("\t\t\tif ( Array.isArray( key ) ) {\n");
      out.write("\n");
      out.write("\t\t\t\t// If key is an array of keys...\n");
      out.write("\t\t\t\t// We always set camelCase keys, so remove that.\n");
      out.write("\t\t\t\tkey = key.map( camelCase );\n");
      out.write("\t\t\t} else {\n");
      out.write("\t\t\t\tkey = camelCase( key );\n");
      out.write("\n");
      out.write("\t\t\t\t// If a key with the spaces exists, use it.\n");
      out.write("\t\t\t\t// Otherwise, create an array by matching non-whitespace\n");
      out.write("\t\t\t\tkey = key in cache ?\n");
      out.write("\t\t\t\t\t[ key ] :\n");
      out.write("\t\t\t\t\t( key.match( rnothtmlwhite ) || [] );\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\ti = key.length;\n");
      out.write("\n");
      out.write("\t\t\twhile ( i-- ) {\n");
      out.write("\t\t\t\tdelete cache[ key[ i ] ];\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Remove the expando if there's no more data\n");
      out.write("\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n");
      out.write("\n");
      out.write("\t\t\t// Support: Chrome <=35 - 45\n");
      out.write("\t\t\t// Webkit & Blink performance suffers when deleting properties\n");
      out.write("\t\t\t// from DOM nodes, so set to undefined instead\n");
      out.write("\t\t\t// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n");
      out.write("\t\t\tif ( owner.nodeType ) {\n");
      out.write("\t\t\t\towner[ this.expando ] = undefined;\n");
      out.write("\t\t\t} else {\n");
      out.write("\t\t\t\tdelete owner[ this.expando ];\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t},\n");
      out.write("\thasData: function( owner ) {\n");
      out.write("\t\tvar cache = owner[ this.expando ];\n");
      out.write("\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\n");
      out.write("\t}\n");
      out.write("};\n");
      out.write("var dataPriv = new Data();\n");
      out.write("\n");
      out.write("var dataUser = new Data();\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("//\tImplementation Summary\n");
      out.write("//\n");
      out.write("//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n");
      out.write("//\t2. Improve the module's maintainability by reducing the storage\n");
      out.write("//\t\tpaths to a single mechanism.\n");
      out.write("//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n");
      out.write("//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n");
      out.write("//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n");
      out.write("//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n");
      out.write("\n");
      out.write("var rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n");
      out.write("\trmultiDash = /[A-Z]/g;\n");
      out.write("\n");
      out.write("function getData( data ) {\n");
      out.write("\tif ( data === \"true\" ) {\n");
      out.write("\t\treturn true;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tif ( data === \"false\" ) {\n");
      out.write("\t\treturn false;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tif ( data === \"null\" ) {\n");
      out.write("\t\treturn null;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// Only convert to a number if it doesn't change the string\n");
      out.write("\tif ( data === +data + \"\" ) {\n");
      out.write("\t\treturn +data;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tif ( rbrace.test( data ) ) {\n");
      out.write("\t\treturn JSON.parse( data );\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\treturn data;\n");
      out.write("}\n");
      out.write("\n");
      out.write("function dataAttr( elem, key, data ) {\n");
      out.write("\tvar name;\n");
      out.write("\n");
      out.write("\t// If nothing was found internally, try to fetch any\n");
      out.write("\t// data from the HTML5 data-* attribute\n");
      out.write("\tif ( data === undefined && elem.nodeType === 1 ) {\n");
      out.write("\t\tname = \"data-\" + key.replace( rmultiDash, \"-$&\" ).toLowerCase();\n");
      out.write("\t\tdata = elem.getAttribute( name );\n");
      out.write("\n");
      out.write("\t\tif ( typeof data === \"string\" ) {\n");
      out.write("\t\t\ttry {\n");
      out.write("\t\t\t\tdata = getData( data );\n");
      out.write("\t\t\t} catch ( e ) {}\n");
      out.write("\n");
      out.write("\t\t\t// Make sure we set the data so it isn't changed later\n");
      out.write("\t\t\tdataUser.set( elem, key, data );\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\tdata = undefined;\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\treturn data;\n");
      out.write("}\n");
      out.write("\n");
      out.write("jQuery.extend( {\n");
      out.write("\thasData: function( elem ) {\n");
      out.write("\t\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tdata: function( elem, name, data ) {\n");
      out.write("\t\treturn dataUser.access( elem, name, data );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tremoveData: function( elem, name ) {\n");
      out.write("\t\tdataUser.remove( elem, name );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\t// TODO: Now that all calls to _data and _removeData have been replaced\n");
      out.write("\t// with direct calls to dataPriv methods, these can be deprecated.\n");
      out.write("\t_data: function( elem, name, data ) {\n");
      out.write("\t\treturn dataPriv.access( elem, name, data );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\t_removeData: function( elem, name ) {\n");
      out.write("\t\tdataPriv.remove( elem, name );\n");
      out.write("\t}\n");
      out.write("} );\n");
      out.write("\n");
      out.write("jQuery.fn.extend( {\n");
      out.write("\tdata: function( key, value ) {\n");
      out.write("\t\tvar i, name, data,\n");
      out.write("\t\t\telem = this[ 0 ],\n");
      out.write("\t\t\tattrs = elem && elem.attributes;\n");
      out.write("\n");
      out.write("\t\t// Gets all values\n");
      out.write("\t\tif ( key === undefined ) {\n");
      out.write("\t\t\tif ( this.length ) {\n");
      out.write("\t\t\t\tdata = dataUser.get( elem );\n");
      out.write("\n");
      out.write("\t\t\t\tif ( elem.nodeType === 1 && !dataPriv.get( elem, \"hasDataAttrs\" ) ) {\n");
      out.write("\t\t\t\t\ti = attrs.length;\n");
      out.write("\t\t\t\t\twhile ( i-- ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t// Support: IE 11 only\n");
      out.write("\t\t\t\t\t\t// The attrs elements can be null (#14894)\n");
      out.write("\t\t\t\t\t\tif ( attrs[ i ] ) {\n");
      out.write("\t\t\t\t\t\t\tname = attrs[ i ].name;\n");
      out.write("\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\n");
      out.write("\t\t\t\t\t\t\t\tname = camelCase( name.slice( 5 ) );\n");
      out.write("\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\n");
      out.write("\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t\tdataPriv.set( elem, \"hasDataAttrs\", true );\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\treturn data;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Sets multiple values\n");
      out.write("\t\tif ( typeof key === \"object\" ) {\n");
      out.write("\t\t\treturn this.each( function() {\n");
      out.write("\t\t\t\tdataUser.set( this, key );\n");
      out.write("\t\t\t} );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\treturn access( this, function( value ) {\n");
      out.write("\t\t\tvar data;\n");
      out.write("\n");
      out.write("\t\t\t// The calling jQuery object (element matches) is not empty\n");
      out.write("\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n");
      out.write("\t\t\t// `value` parameter was not undefined. An empty jQuery object\n");
      out.write("\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n");
      out.write("\t\t\t// throw an exception if an attempt to read a data cache is made.\n");
      out.write("\t\t\tif ( elem && value === undefined ) {\n");
      out.write("\n");
      out.write("\t\t\t\t// Attempt to get data from the cache\n");
      out.write("\t\t\t\t// The key will always be camelCased in Data\n");
      out.write("\t\t\t\tdata = dataUser.get( elem, key );\n");
      out.write("\t\t\t\tif ( data !== undefined ) {\n");
      out.write("\t\t\t\t\treturn data;\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t// Attempt to \"discover\" the data in\n");
      out.write("\t\t\t\t// HTML5 custom data-* attrs\n");
      out.write("\t\t\t\tdata = dataAttr( elem, key );\n");
      out.write("\t\t\t\tif ( data !== undefined ) {\n");
      out.write("\t\t\t\t\treturn data;\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t// We tried really hard, but the data doesn't exist.\n");
      out.write("\t\t\t\treturn;\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Set the data...\n");
      out.write("\t\t\tthis.each( function() {\n");
      out.write("\n");
      out.write("\t\t\t\t// We always store the camelCased key\n");
      out.write("\t\t\t\tdataUser.set( this, key, value );\n");
      out.write("\t\t\t} );\n");
      out.write("\t\t}, null, value, arguments.length > 1, null, true );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tremoveData: function( key ) {\n");
      out.write("\t\treturn this.each( function() {\n");
      out.write("\t\t\tdataUser.remove( this, key );\n");
      out.write("\t\t} );\n");
      out.write("\t}\n");
      out.write("} );\n");
      out.write("\n");
      out.write("\n");
      out.write("jQuery.extend( {\n");
      out.write("\tqueue: function( elem, type, data ) {\n");
      out.write("\t\tvar queue;\n");
      out.write("\n");
      out.write("\t\tif ( elem ) {\n");
      out.write("\t\t\ttype = ( type || \"fx\" ) + \"queue\";\n");
      out.write("\t\t\tqueue = dataPriv.get( elem, type );\n");
      out.write("\n");
      out.write("\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n");
      out.write("\t\t\tif ( data ) {\n");
      out.write("\t\t\t\tif ( !queue || Array.isArray( data ) ) {\n");
      out.write("\t\t\t\t\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\n");
      out.write("\t\t\t\t} else {\n");
      out.write("\t\t\t\t\tqueue.push( data );\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\treturn queue || [];\n");
      out.write("\t\t}\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tdequeue: function( elem, type ) {\n");
      out.write("\t\ttype = type || \"fx\";\n");
      out.write("\n");
      out.write("\t\tvar queue = jQuery.queue( elem, type ),\n");
      out.write("\t\t\tstartLength = queue.length,\n");
      out.write("\t\t\tfn = queue.shift(),\n");
      out.write("\t\t\thooks = jQuery._queueHooks( elem, type ),\n");
      out.write("\t\t\tnext = function() {\n");
      out.write("\t\t\t\tjQuery.dequeue( elem, type );\n");
      out.write("\t\t\t};\n");
      out.write("\n");
      out.write("\t\t// If the fx queue is dequeued, always remove the progress sentinel\n");
      out.write("\t\tif ( fn === \"inprogress\" ) {\n");
      out.write("\t\t\tfn = queue.shift();\n");
      out.write("\t\t\tstartLength--;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tif ( fn ) {\n");
      out.write("\n");
      out.write("\t\t\t// Add a progress sentinel to prevent the fx queue from being\n");
      out.write("\t\t\t// automatically dequeued\n");
      out.write("\t\t\tif ( type === \"fx\" ) {\n");
      out.write("\t\t\t\tqueue.unshift( \"inprogress\" );\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Clear up the last queue stop function\n");
      out.write("\t\t\tdelete hooks.stop;\n");
      out.write("\t\t\tfn.call( elem, next, hooks );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tif ( !startLength && hooks ) {\n");
      out.write("\t\t\thooks.empty.fire();\n");
      out.write("\t\t}\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\t// Not public - generate a queueHooks object, or return the current one\n");
      out.write("\t_queueHooks: function( elem, type ) {\n");
      out.write("\t\tvar key = type + \"queueHooks\";\n");
      out.write("\t\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\n");
      out.write("\t\t\tempty: jQuery.Callbacks( \"once memory\" ).add( function() {\n");
      out.write("\t\t\t\tdataPriv.remove( elem, [ type + \"queue\", key ] );\n");
      out.write("\t\t\t} )\n");
      out.write("\t\t} );\n");
      out.write("\t}\n");
      out.write("} );\n");
      out.write("\n");
      out.write("jQuery.fn.extend( {\n");
      out.write("\tqueue: function( type, data ) {\n");
      out.write("\t\tvar setter = 2;\n");
      out.write("\n");
      out.write("\t\tif ( typeof type !== \"string\" ) {\n");
      out.write("\t\t\tdata = type;\n");
      out.write("\t\t\ttype = \"fx\";\n");
      out.write("\t\t\tsetter--;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tif ( arguments.length < setter ) {\n");
      out.write("\t\t\treturn jQuery.queue( this[ 0 ], type );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\treturn data === undefined ?\n");
      out.write("\t\t\tthis :\n");
      out.write("\t\t\tthis.each( function() {\n");
      out.write("\t\t\t\tvar queue = jQuery.queue( this, type, data );\n");
      out.write("\n");
      out.write("\t\t\t\t// Ensure a hooks for this queue\n");
      out.write("\t\t\t\tjQuery._queueHooks( this, type );\n");
      out.write("\n");
      out.write("\t\t\t\tif ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\n");
      out.write("\t\t\t\t\tjQuery.dequeue( this, type );\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t} );\n");
      out.write("\t},\n");
      out.write("\tdequeue: function( type ) {\n");
      out.write("\t\treturn this.each( function() {\n");
      out.write("\t\t\tjQuery.dequeue( this, type );\n");
      out.write("\t\t} );\n");
      out.write("\t},\n");
      out.write("\tclearQueue: function( type ) {\n");
      out.write("\t\treturn this.queue( type || \"fx\", [] );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\t// Get a promise resolved when queues of a certain type\n");
      out.write("\t// are emptied (fx is the type by default)\n");
      out.write("\tpromise: function( type, obj ) {\n");
      out.write("\t\tvar tmp,\n");
      out.write("\t\t\tcount = 1,\n");
      out.write("\t\t\tdefer = jQuery.Deferred(),\n");
      out.write("\t\t\telements = this,\n");
      out.write("\t\t\ti = this.length,\n");
      out.write("\t\t\tresolve = function() {\n");
      out.write("\t\t\t\tif ( !( --count ) ) {\n");
      out.write("\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t};\n");
      out.write("\n");
      out.write("\t\tif ( typeof type !== \"string\" ) {\n");
      out.write("\t\t\tobj = type;\n");
      out.write("\t\t\ttype = undefined;\n");
      out.write("\t\t}\n");
      out.write("\t\ttype = type || \"fx\";\n");
      out.write("\n");
      out.write("\t\twhile ( i-- ) {\n");
      out.write("\t\t\ttmp = dataPriv.get( elements[ i ], type + \"queueHooks\" );\n");
      out.write("\t\t\tif ( tmp && tmp.empty ) {\n");
      out.write("\t\t\t\tcount++;\n");
      out.write("\t\t\t\ttmp.empty.add( resolve );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t\tresolve();\n");
      out.write("\t\treturn defer.promise( obj );\n");
      out.write("\t}\n");
      out.write("} );\n");
      out.write("var pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n");
      out.write("\n");
      out.write("var rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\n");
      out.write("\n");
      out.write("\n");
      out.write("var cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\n");
      out.write("\n");
      out.write("var documentElement = document.documentElement;\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\tvar isAttached = function( elem ) {\n");
      out.write("\t\t\treturn jQuery.contains( elem.ownerDocument, elem );\n");
      out.write("\t\t},\n");
      out.write("\t\tcomposed = { composed: true };\n");
      out.write("\n");
      out.write("\t// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only\n");
      out.write("\t// Check attachment across shadow DOM boundaries when possible (gh-3504)\n");
      out.write("\t// Support: iOS 10.0-10.2 only\n");
      out.write("\t// Early iOS 10 versions support `attachShadow` but not `getRootNode`,\n");
      out.write("\t// leading to errors. We need to check for `getRootNode`.\n");
      out.write("\tif ( documentElement.getRootNode ) {\n");
      out.write("\t\tisAttached = function( elem ) {\n");
      out.write("\t\t\treturn jQuery.contains( elem.ownerDocument, elem ) ||\n");
      out.write("\t\t\t\telem.getRootNode( composed ) === elem.ownerDocument;\n");
      out.write("\t\t};\n");
      out.write("\t}\n");
      out.write("var isHiddenWithinTree = function( elem, el ) {\n");
      out.write("\n");
      out.write("\t\t// isHiddenWithinTree might be called from jQuery#filter function;\n");
      out.write("\t\t// in that case, element will be second argument\n");
      out.write("\t\telem = el || elem;\n");
      out.write("\n");
      out.write("\t\t// Inline style trumps all\n");
      out.write("\t\treturn elem.style.display === \"none\" ||\n");
      out.write("\t\t\telem.style.display === \"\" &&\n");
      out.write("\n");
      out.write("\t\t\t// Otherwise, check computed style\n");
      out.write("\t\t\t// Support: Firefox <=43 - 45\n");
      out.write("\t\t\t// Disconnected elements can have computed display: none, so first confirm that elem is\n");
      out.write("\t\t\t// in the document.\n");
      out.write("\t\t\tisAttached( elem ) &&\n");
      out.write("\n");
      out.write("\t\t\tjQuery.css( elem, \"display\" ) === \"none\";\n");
      out.write("\t};\n");
      out.write("\n");
      out.write("var swap = function( elem, options, callback, args ) {\n");
      out.write("\tvar ret, name,\n");
      out.write("\t\told = {};\n");
      out.write("\n");
      out.write("\t// Remember the old values, and insert the new ones\n");
      out.write("\tfor ( name in options ) {\n");
      out.write("\t\told[ name ] = elem.style[ name ];\n");
      out.write("\t\telem.style[ name ] = options[ name ];\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tret = callback.apply( elem, args || [] );\n");
      out.write("\n");
      out.write("\t// Revert the old values\n");
      out.write("\tfor ( name in options ) {\n");
      out.write("\t\telem.style[ name ] = old[ name ];\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\treturn ret;\n");
      out.write("};\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("function adjustCSS( elem, prop, valueParts, tween ) {\n");
      out.write("\tvar adjusted, scale,\n");
      out.write("\t\tmaxIterations = 20,\n");
      out.write("\t\tcurrentValue = tween ?\n");
      out.write("\t\t\tfunction() {\n");
      out.write("\t\t\t\treturn tween.cur();\n");
      out.write("\t\t\t} :\n");
      out.write("\t\t\tfunction() {\n");
      out.write("\t\t\t\treturn jQuery.css( elem, prop, \"\" );\n");
      out.write("\t\t\t},\n");
      out.write("\t\tinitial = currentValue(),\n");
      out.write("\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n");
      out.write("\n");
      out.write("\t\t// Starting value computation is required for potential unit mismatches\n");
      out.write("\t\tinitialInUnit = elem.nodeType &&\n");
      out.write("\t\t\t( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\n");
      out.write("\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\n");
      out.write("\n");
      out.write("\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n");
      out.write("\n");
      out.write("\t\t// Support: Firefox <=54\n");
      out.write("\t\t// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)\n");
      out.write("\t\tinitial = initial / 2;\n");
      out.write("\n");
      out.write("\t\t// Trust units reported by jQuery.css\n");
      out.write("\t\tunit = unit || initialInUnit[ 3 ];\n");
      out.write("\n");
      out.write("\t\t// Iteratively approximate from a nonzero starting point\n");
      out.write("\t\tinitialInUnit = +initial || 1;\n");
      out.write("\n");
      out.write("\t\twhile ( maxIterations-- ) {\n");
      out.write("\n");
      out.write("\t\t\t// Evaluate and update our best guess (doubling guesses that zero out).\n");
      out.write("\t\t\t// Finish if the scale equals or crosses 1 (making the old*new product non-positive).\n");
      out.write("\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\n");
      out.write("\t\t\tif ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {\n");
      out.write("\t\t\t\tmaxIterations = 0;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\tinitialInUnit = initialInUnit / scale;\n");
      out.write("\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tinitialInUnit = initialInUnit * 2;\n");
      out.write("\t\tjQuery.style( elem, prop, initialInUnit + unit );\n");
      out.write("\n");
      out.write("\t\t// Make sure we update the tween properties later on\n");
      out.write("\t\tvalueParts = valueParts || [];\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tif ( valueParts ) {\n");
      out.write("\t\tinitialInUnit = +initialInUnit || +initial || 0;\n");
      out.write("\n");
      out.write("\t\t// Apply relative offset (+=/-=) if specified\n");
      out.write("\t\tadjusted = valueParts[ 1 ] ?\n");
      out.write("\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n");
      out.write("\t\t\t+valueParts[ 2 ];\n");
      out.write("\t\tif ( tween ) {\n");
      out.write("\t\t\ttween.unit = unit;\n");
      out.write("\t\t\ttween.start = initialInUnit;\n");
      out.write("\t\t\ttween.end = adjusted;\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\treturn adjusted;\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("var defaultDisplayMap = {};\n");
      out.write("\n");
      out.write("function getDefaultDisplay( elem ) {\n");
      out.write("\tvar temp,\n");
      out.write("\t\tdoc = elem.ownerDocument,\n");
      out.write("\t\tnodeName = elem.nodeName,\n");
      out.write("\t\tdisplay = defaultDisplayMap[ nodeName ];\n");
      out.write("\n");
      out.write("\tif ( display ) {\n");
      out.write("\t\treturn display;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\ttemp = doc.body.appendChild( doc.createElement( nodeName ) );\n");
      out.write("\tdisplay = jQuery.css( temp, \"display\" );\n");
      out.write("\n");
      out.write("\ttemp.parentNode.removeChild( temp );\n");
      out.write("\n");
      out.write("\tif ( display === \"none\" ) {\n");
      out.write("\t\tdisplay = \"block\";\n");
      out.write("\t}\n");
      out.write("\tdefaultDisplayMap[ nodeName ] = display;\n");
      out.write("\n");
      out.write("\treturn display;\n");
      out.write("}\n");
      out.write("\n");
      out.write("function showHide( elements, show ) {\n");
      out.write("\tvar display, elem,\n");
      out.write("\t\tvalues = [],\n");
      out.write("\t\tindex = 0,\n");
      out.write("\t\tlength = elements.length;\n");
      out.write("\n");
      out.write("\t// Determine new display value for elements that need to change\n");
      out.write("\tfor ( ; index < length; index++ ) {\n");
      out.write("\t\telem = elements[ index ];\n");
      out.write("\t\tif ( !elem.style ) {\n");
      out.write("\t\t\tcontinue;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tdisplay = elem.style.display;\n");
      out.write("\t\tif ( show ) {\n");
      out.write("\n");
      out.write("\t\t\t// Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n");
      out.write("\t\t\t// check is required in this first loop unless we have a nonempty display value (either\n");
      out.write("\t\t\t// inline or about-to-be-restored)\n");
      out.write("\t\t\tif ( display === \"none\" ) {\n");
      out.write("\t\t\t\tvalues[ index ] = dataPriv.get( elem, \"display\" ) || null;\n");
      out.write("\t\t\t\tif ( !values[ index ] ) {\n");
      out.write("\t\t\t\t\telem.style.display = \"\";\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\tif ( elem.style.display === \"\" && isHiddenWithinTree( elem ) ) {\n");
      out.write("\t\t\t\tvalues[ index ] = getDefaultDisplay( elem );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\tif ( display !== \"none\" ) {\n");
      out.write("\t\t\t\tvalues[ index ] = \"none\";\n");
      out.write("\n");
      out.write("\t\t\t\t// Remember what we're overwriting\n");
      out.write("\t\t\t\tdataPriv.set( elem, \"display\", display );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// Set the display of the elements in a second loop to avoid constant reflow\n");
      out.write("\tfor ( index = 0; index < length; index++ ) {\n");
      out.write("\t\tif ( values[ index ] != null ) {\n");
      out.write("\t\t\telements[ index ].style.display = values[ index ];\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\treturn elements;\n");
      out.write("}\n");
      out.write("\n");
      out.write("jQuery.fn.extend( {\n");
      out.write("\tshow: function() {\n");
      out.write("\t\treturn showHide( this, true );\n");
      out.write("\t},\n");
      out.write("\thide: function() {\n");
      out.write("\t\treturn showHide( this );\n");
      out.write("\t},\n");
      out.write("\ttoggle: function( state ) {\n");
      out.write("\t\tif ( typeof state === \"boolean\" ) {\n");
      out.write("\t\t\treturn state ? this.show() : this.hide();\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\treturn this.each( function() {\n");
      out.write("\t\t\tif ( isHiddenWithinTree( this ) ) {\n");
      out.write("\t\t\t\tjQuery( this ).show();\n");
      out.write("\t\t\t} else {\n");
      out.write("\t\t\t\tjQuery( this ).hide();\n");
      out.write("\t\t\t}\n");
      out.write("\t\t} );\n");
      out.write("\t}\n");
      out.write("} );\n");
      out.write("var rcheckableType = ( /^(?:checkbox|radio)$/i );\n");
      out.write("\n");
      out.write("var rtagName = ( /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i );\n");
      out.write("\n");
      out.write("var rscriptType = ( /^$|^module$|\\/(?:java|ecma)script/i );\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// We have to close these tags to support XHTML (#13200)\n");
      out.write("var wrapMap = {\n");
      out.write("\n");
      out.write("\t// Support: IE <=9 only\n");
      out.write("\toption: [ 1, \"<select multiple='multiple'>\", \"</select>\" ],\n");
      out.write("\n");
      out.write("\t// XHTML parsers do not magically insert elements in the\n");
      out.write("\t// same way that tag soup parsers do. So we cannot shorten\n");
      out.write("\t// this by omitting <tbody> or other required elements.\n");
      out.write("\tthead: [ 1, \"<table>\", \"</table>\" ],\n");
      out.write("\tcol: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\n");
      out.write("\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n");
      out.write("\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n");
      out.write("\n");
      out.write("\t_default: [ 0, \"\", \"\" ]\n");
      out.write("};\n");
      out.write("\n");
      out.write("// Support: IE <=9 only\n");
      out.write("wrapMap.optgroup = wrapMap.option;\n");
      out.write("\n");
      out.write("wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\n");
      out.write("wrapMap.th = wrapMap.td;\n");
      out.write("\n");
      out.write("\n");
      out.write("function getAll( context, tag ) {\n");
      out.write("\n");
      out.write("\t// Support: IE <=9 - 11 only\n");
      out.write("\t// Use typeof to avoid zero-argument method invocation on host objects (#15151)\n");
      out.write("\tvar ret;\n");
      out.write("\n");
      out.write("\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n");
      out.write("\t\tret = context.getElementsByTagName( tag || \"*\" );\n");
      out.write("\n");
      out.write("\t} else if ( typeof context.querySelectorAll !== \"undefined\" ) {\n");
      out.write("\t\tret = context.querySelectorAll( tag || \"*\" );\n");
      out.write("\n");
      out.write("\t} else {\n");
      out.write("\t\tret = [];\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tif ( tag === undefined || tag && nodeName( context, tag ) ) {\n");
      out.write("\t\treturn jQuery.merge( [ context ], ret );\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\treturn ret;\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("// Mark scripts as having already been evaluated\n");
      out.write("function setGlobalEval( elems, refElements ) {\n");
      out.write("\tvar i = 0,\n");
      out.write("\t\tl = elems.length;\n");
      out.write("\n");
      out.write("\tfor ( ; i < l; i++ ) {\n");
      out.write("\t\tdataPriv.set(\n");
      out.write("\t\t\telems[ i ],\n");
      out.write("\t\t\t\"globalEval\",\n");
      out.write("\t\t\t!refElements || dataPriv.get( refElements[ i ], \"globalEval\" )\n");
      out.write("\t\t);\n");
      out.write("\t}\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("var rhtml = /<|&#?\\w+;/;\n");
      out.write("\n");
      out.write("function buildFragment( elems, context, scripts, selection, ignored ) {\n");
      out.write("\tvar elem, tmp, tag, wrap, attached, j,\n");
      out.write("\t\tfragment = context.createDocumentFragment(),\n");
      out.write("\t\tnodes = [],\n");
      out.write("\t\ti = 0,\n");
      out.write("\t\tl = elems.length;\n");
      out.write("\n");
      out.write("\tfor ( ; i < l; i++ ) {\n");
      out.write("\t\telem = elems[ i ];\n");
      out.write("\n");
      out.write("\t\tif ( elem || elem === 0 ) {\n");
      out.write("\n");
      out.write("\t\t\t// Add nodes directly\n");
      out.write("\t\t\tif ( toType( elem ) === \"object\" ) {\n");
      out.write("\n");
      out.write("\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n");
      out.write("\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n");
      out.write("\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n");
      out.write("\n");
      out.write("\t\t\t// Convert non-html into a text node\n");
      out.write("\t\t\t} else if ( !rhtml.test( elem ) ) {\n");
      out.write("\t\t\t\tnodes.push( context.createTextNode( elem ) );\n");
      out.write("\n");
      out.write("\t\t\t// Convert html into DOM nodes\n");
      out.write("\t\t\t} else {\n");
      out.write("\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement( \"div\" ) );\n");
      out.write("\n");
      out.write("\t\t\t\t// Deserialize a standard representation\n");
      out.write("\t\t\t\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\n");
      out.write("\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\n");
      out.write("\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n");
      out.write("\n");
      out.write("\t\t\t\t// Descend through wrappers to the right content\n");
      out.write("\t\t\t\tj = wrap[ 0 ];\n");
      out.write("\t\t\t\twhile ( j-- ) {\n");
      out.write("\t\t\t\t\ttmp = tmp.lastChild;\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n");
      out.write("\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n");
      out.write("\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\n");
      out.write("\n");
      out.write("\t\t\t\t// Remember the top-level container\n");
      out.write("\t\t\t\ttmp = fragment.firstChild;\n");
      out.write("\n");
      out.write("\t\t\t\t// Ensure the created nodes are orphaned (#12392)\n");
      out.write("\t\t\t\ttmp.textContent = \"\";\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// Remove wrapper from fragment\n");
      out.write("\tfragment.textContent = \"\";\n");
      out.write("\n");
      out.write("\ti = 0;\n");
      out.write("\twhile ( ( elem = nodes[ i++ ] ) ) {\n");
      out.write("\n");
      out.write("\t\t// Skip elements already in the context collection (trac-4087)\n");
      out.write("\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n");
      out.write("\t\t\tif ( ignored ) {\n");
      out.write("\t\t\t\tignored.push( elem );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\tcontinue;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tattached = isAttached( elem );\n");
      out.write("\n");
      out.write("\t\t// Append to fragment\n");
      out.write("\t\ttmp = getAll( fragment.appendChild( elem ), \"script\" );\n");
      out.write("\n");
      out.write("\t\t// Preserve script evaluation history\n");
      out.write("\t\tif ( attached ) {\n");
      out.write("\t\t\tsetGlobalEval( tmp );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Capture executables\n");
      out.write("\t\tif ( scripts ) {\n");
      out.write("\t\t\tj = 0;\n");
      out.write("\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {\n");
      out.write("\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\n");
      out.write("\t\t\t\t\tscripts.push( elem );\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\treturn fragment;\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("( function() {\n");
      out.write("\tvar fragment = document.createDocumentFragment(),\n");
      out.write("\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) ),\n");
      out.write("\t\tinput = document.createElement( \"input\" );\n");
      out.write("\n");
      out.write("\t// Support: Android 4.0 - 4.3 only\n");
      out.write("\t// Check state lost if the name is set (#11217)\n");
      out.write("\t// Support: Windows Web Apps (WWA)\n");
      out.write("\t// `name` and `type` must use .setAttribute for WWA (#14901)\n");
      out.write("\tinput.setAttribute( \"type\", \"radio\" );\n");
      out.write("\tinput.setAttribute( \"checked\", \"checked\" );\n");
      out.write("\tinput.setAttribute( \"name\", \"t\" );\n");
      out.write("\n");
      out.write("\tdiv.appendChild( input );\n");
      out.write("\n");
      out.write("\t// Support: Android <=4.1 only\n");
      out.write("\t// Older WebKit doesn't clone checked state correctly in fragments\n");
      out.write("\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n");
      out.write("\n");
      out.write("\t// Support: IE <=11 only\n");
      out.write("\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n");
      out.write("\tdiv.innerHTML = \"<textarea>x</textarea>\";\n");
      out.write("\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n");
      out.write("} )();\n");
      out.write("\n");
      out.write("\n");
      out.write("var\n");
      out.write("\trkeyEvent = /^key/,\n");
      out.write("\trmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\n");
      out.write("\trtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n");
      out.write("\n");
      out.write("function returnTrue() {\n");
      out.write("\treturn true;\n");
      out.write("}\n");
      out.write("\n");
      out.write("function returnFalse() {\n");
      out.write("\treturn false;\n");
      out.write("}\n");
      out.write("\n");
      out.write("// Support: IE <=9 - 11+\n");
      out.write("// focus() and blur() are asynchronous, except when they are no-op.\n");
      out.write("// So expect focus to be synchronous when the element is already active,\n");
      out.write("// and blur to be synchronous when the element is not already active.\n");
      out.write("// (focus and blur are always synchronous in other supported browsers,\n");
      out.write("// this just defines when we can count on it).\n");
      out.write("function expectSync( elem, type ) {\n");
      out.write("\treturn ( elem === safeActiveElement() ) === ( type === \"focus\" );\n");
      out.write("}\n");
      out.write("\n");
      out.write("// Support: IE <=9 only\n");
      out.write("// Accessing document.activeElement can throw unexpectedly\n");
      out.write("// https://bugs.jquery.com/ticket/13393\n");
      out.write("function safeActiveElement() {\n");
      out.write("\ttry {\n");
      out.write("\t\treturn document.activeElement;\n");
      out.write("\t} catch ( err ) { }\n");
      out.write("}\n");
      out.write("\n");
      out.write("function on( elem, types, selector, data, fn, one ) {\n");
      out.write("\tvar origFn, type;\n");
      out.write("\n");
      out.write("\t// Types can be a map of types/handlers\n");
      out.write("\tif ( typeof types === \"object\" ) {\n");
      out.write("\n");
      out.write("\t\t// ( types-Object, selector, data )\n");
      out.write("\t\tif ( typeof selector !== \"string\" ) {\n");
      out.write("\n");
      out.write("\t\t\t// ( types-Object, data )\n");
      out.write("\t\t\tdata = data || selector;\n");
      out.write("\t\t\tselector = undefined;\n");
      out.write("\t\t}\n");
      out.write("\t\tfor ( type in types ) {\n");
      out.write("\t\t\ton( elem, type, selector, data, types[ type ], one );\n");
      out.write("\t\t}\n");
      out.write("\t\treturn elem;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tif ( data == null && fn == null ) {\n");
      out.write("\n");
      out.write("\t\t// ( types, fn )\n");
      out.write("\t\tfn = selector;\n");
      out.write("\t\tdata = selector = undefined;\n");
      out.write("\t} else if ( fn == null ) {\n");
      out.write("\t\tif ( typeof selector === \"string\" ) {\n");
      out.write("\n");
      out.write("\t\t\t// ( types, selector, fn )\n");
      out.write("\t\t\tfn = data;\n");
      out.write("\t\t\tdata = undefined;\n");
      out.write("\t\t} else {\n");
      out.write("\n");
      out.write("\t\t\t// ( types, data, fn )\n");
      out.write("\t\t\tfn = data;\n");
      out.write("\t\t\tdata = selector;\n");
      out.write("\t\t\tselector = undefined;\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\tif ( fn === false ) {\n");
      out.write("\t\tfn = returnFalse;\n");
      out.write("\t} else if ( !fn ) {\n");
      out.write("\t\treturn elem;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tif ( one === 1 ) {\n");
      out.write("\t\torigFn = fn;\n");
      out.write("\t\tfn = function( event ) {\n");
      out.write("\n");
      out.write("\t\t\t// Can use an empty set, since event contains the info\n");
      out.write("\t\t\tjQuery().off( event );\n");
      out.write("\t\t\treturn origFn.apply( this, arguments );\n");
      out.write("\t\t};\n");
      out.write("\n");
      out.write("\t\t// Use same guid so caller can remove using origFn\n");
      out.write("\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n");
      out.write("\t}\n");
      out.write("\treturn elem.each( function() {\n");
      out.write("\t\tjQuery.event.add( this, types, fn, data, selector );\n");
      out.write("\t} );\n");
      out.write("}\n");
      out.write("\n");
      out.write("/*\n");
      out.write(" * Helper functions for managing events -- not part of the public interface.\n");
      out.write(" * Props to Dean Edwards' addEvent library for many of the ideas.\n");
      out.write(" */\n");
      out.write("jQuery.event = {\n");
      out.write("\n");
      out.write("\tglobal: {},\n");
      out.write("\n");
      out.write("\tadd: function( elem, types, handler, data, selector ) {\n");
      out.write("\n");
      out.write("\t\tvar handleObjIn, eventHandle, tmp,\n");
      out.write("\t\t\tevents, t, handleObj,\n");
      out.write("\t\t\tspecial, handlers, type, namespaces, origType,\n");
      out.write("\t\t\telemData = dataPriv.get( elem );\n");
      out.write("\n");
      out.write("\t\t// Don't attach events to noData or text/comment nodes (but allow plain objects)\n");
      out.write("\t\tif ( !elemData ) {\n");
      out.write("\t\t\treturn;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Caller can pass in an object of custom data in lieu of the handler\n");
      out.write("\t\tif ( handler.handler ) {\n");
      out.write("\t\t\thandleObjIn = handler;\n");
      out.write("\t\t\thandler = handleObjIn.handler;\n");
      out.write("\t\t\tselector = handleObjIn.selector;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Ensure that invalid selectors throw exceptions at attach time\n");
      out.write("\t\t// Evaluate against documentElement in case elem is a non-element node (e.g., document)\n");
      out.write("\t\tif ( selector ) {\n");
      out.write("\t\t\tjQuery.find.matchesSelector( documentElement, selector );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n");
      out.write("\t\tif ( !handler.guid ) {\n");
      out.write("\t\t\thandler.guid = jQuery.guid++;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Init the element's event structure and main handler, if this is the first\n");
      out.write("\t\tif ( !( events = elemData.events ) ) {\n");
      out.write("\t\t\tevents = elemData.events = {};\n");
      out.write("\t\t}\n");
      out.write("\t\tif ( !( eventHandle = elemData.handle ) ) {\n");
      out.write("\t\t\teventHandle = elemData.handle = function( e ) {\n");
      out.write("\n");
      out.write("\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n");
      out.write("\t\t\t\t// when an event is called after a page has unloaded\n");
      out.write("\t\t\t\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ?\n");
      out.write("\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\n");
      out.write("\t\t\t};\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Handle multiple events separated by a space\n");
      out.write("\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n");
      out.write("\t\tt = types.length;\n");
      out.write("\t\twhile ( t-- ) {\n");
      out.write("\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n");
      out.write("\t\t\ttype = origType = tmp[ 1 ];\n");
      out.write("\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n");
      out.write("\n");
      out.write("\t\t\t// There *must* be a type, no attaching namespace-only handlers\n");
      out.write("\t\t\tif ( !type ) {\n");
      out.write("\t\t\t\tcontinue;\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// If event changes its type, use the special event handlers for the changed type\n");
      out.write("\t\t\tspecial = jQuery.event.special[ type ] || {};\n");
      out.write("\n");
      out.write("\t\t\t// If selector defined, determine special event api type, otherwise given type\n");
      out.write("\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n");
      out.write("\n");
      out.write("\t\t\t// Update special based on newly reset type\n");
      out.write("\t\t\tspecial = jQuery.event.special[ type ] || {};\n");
      out.write("\n");
      out.write("\t\t\t// handleObj is passed to all event handlers\n");
      out.write("\t\t\thandleObj = jQuery.extend( {\n");
      out.write("\t\t\t\ttype: type,\n");
      out.write("\t\t\t\torigType: origType,\n");
      out.write("\t\t\t\tdata: data,\n");
      out.write("\t\t\t\thandler: handler,\n");
      out.write("\t\t\t\tguid: handler.guid,\n");
      out.write("\t\t\t\tselector: selector,\n");
      out.write("\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n");
      out.write("\t\t\t\tnamespace: namespaces.join( \".\" )\n");
      out.write("\t\t\t}, handleObjIn );\n");
      out.write("\n");
      out.write("\t\t\t// Init the event handler queue if we're the first\n");
      out.write("\t\t\tif ( !( handlers = events[ type ] ) ) {\n");
      out.write("\t\t\t\thandlers = events[ type ] = [];\n");
      out.write("\t\t\t\thandlers.delegateCount = 0;\n");
      out.write("\n");
      out.write("\t\t\t\t// Only use addEventListener if the special events handler returns false\n");
      out.write("\t\t\t\tif ( !special.setup ||\n");
      out.write("\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\tif ( elem.addEventListener ) {\n");
      out.write("\t\t\t\t\t\telem.addEventListener( type, eventHandle );\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\tif ( special.add ) {\n");
      out.write("\t\t\t\tspecial.add.call( elem, handleObj );\n");
      out.write("\n");
      out.write("\t\t\t\tif ( !handleObj.handler.guid ) {\n");
      out.write("\t\t\t\t\thandleObj.handler.guid = handler.guid;\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Add to the element's handler list, delegates in front\n");
      out.write("\t\t\tif ( selector ) {\n");
      out.write("\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\n");
      out.write("\t\t\t} else {\n");
      out.write("\t\t\t\thandlers.push( handleObj );\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Keep track of which events have ever been used, for event optimization\n");
      out.write("\t\t\tjQuery.event.global[ type ] = true;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\t// Detach an event or set of events from an element\n");
      out.write("\tremove: function( elem, types, handler, selector, mappedTypes ) {\n");
      out.write("\n");
      out.write("\t\tvar j, origCount, tmp,\n");
      out.write("\t\t\tevents, t, handleObj,\n");
      out.write("\t\t\tspecial, handlers, type, namespaces, origType,\n");
      out.write("\t\t\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\n");
      out.write("\n");
      out.write("\t\tif ( !elemData || !( events = elemData.events ) ) {\n");
      out.write("\t\t\treturn;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Once for each type.namespace in types; type may be omitted\n");
      out.write("\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n");
      out.write("\t\tt = types.length;\n");
      out.write("\t\twhile ( t-- ) {\n");
      out.write("\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n");
      out.write("\t\t\ttype = origType = tmp[ 1 ];\n");
      out.write("\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n");
      out.write("\n");
      out.write("\t\t\t// Unbind all events (on this namespace, if provided) for the element\n");
      out.write("\t\t\tif ( !type ) {\n");
      out.write("\t\t\t\tfor ( type in events ) {\n");
      out.write("\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\tcontinue;\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\tspecial = jQuery.event.special[ type ] || {};\n");
      out.write("\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n");
      out.write("\t\t\thandlers = events[ type ] || [];\n");
      out.write("\t\t\ttmp = tmp[ 2 ] &&\n");
      out.write("\t\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" );\n");
      out.write("\n");
      out.write("\t\t\t// Remove matching events\n");
      out.write("\t\t\torigCount = j = handlers.length;\n");
      out.write("\t\t\twhile ( j-- ) {\n");
      out.write("\t\t\t\thandleObj = handlers[ j ];\n");
      out.write("\n");
      out.write("\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\n");
      out.write("\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\n");
      out.write("\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\n");
      out.write("\t\t\t\t\t( !selector || selector === handleObj.selector ||\n");
      out.write("\t\t\t\t\t\tselector === \"**\" && handleObj.selector ) ) {\n");
      out.write("\t\t\t\t\thandlers.splice( j, 1 );\n");
      out.write("\n");
      out.write("\t\t\t\t\tif ( handleObj.selector ) {\n");
      out.write("\t\t\t\t\t\thandlers.delegateCount--;\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t\tif ( special.remove ) {\n");
      out.write("\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n");
      out.write("\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n");
      out.write("\t\t\tif ( origCount && !handlers.length ) {\n");
      out.write("\t\t\t\tif ( !special.teardown ||\n");
      out.write("\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\tdelete events[ type ];\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Remove data and the expando if it's no longer used\n");
      out.write("\t\tif ( jQuery.isEmptyObject( events ) ) {\n");
      out.write("\t\t\tdataPriv.remove( elem, \"handle events\" );\n");
      out.write("\t\t}\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tdispatch: function( nativeEvent ) {\n");
      out.write("\n");
      out.write("\t\t// Make a writable jQuery.Event from the native event object\n");
      out.write("\t\tvar event = jQuery.event.fix( nativeEvent );\n");
      out.write("\n");
      out.write("\t\tvar i, j, ret, matched, handleObj, handlerQueue,\n");
      out.write("\t\t\targs = new Array( arguments.length ),\n");
      out.write("\t\t\thandlers = ( dataPriv.get( this, \"events\" ) || {} )[ event.type ] || [],\n");
      out.write("\t\t\tspecial = jQuery.event.special[ event.type ] || {};\n");
      out.write("\n");
      out.write("\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n");
      out.write("\t\targs[ 0 ] = event;\n");
      out.write("\n");
      out.write("\t\tfor ( i = 1; i < arguments.length; i++ ) {\n");
      out.write("\t\t\targs[ i ] = arguments[ i ];\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tevent.delegateTarget = this;\n");
      out.write("\n");
      out.write("\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n");
      out.write("\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n");
      out.write("\t\t\treturn;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Determine handlers\n");
      out.write("\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\n");
      out.write("\n");
      out.write("\t\t// Run delegates first; they may want to stop propagation beneath us\n");
      out.write("\t\ti = 0;\n");
      out.write("\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n");
      out.write("\t\t\tevent.currentTarget = matched.elem;\n");
      out.write("\n");
      out.write("\t\t\tj = 0;\n");
      out.write("\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\n");
      out.write("\t\t\t\t!event.isImmediatePropagationStopped() ) {\n");
      out.write("\n");
      out.write("\t\t\t\t// If the event is namespaced, then each handler is only invoked if it is\n");
      out.write("\t\t\t\t// specially universal or its namespaces are a superset of the event's.\n");
      out.write("\t\t\t\tif ( !event.rnamespace || handleObj.namespace === false ||\n");
      out.write("\t\t\t\t\tevent.rnamespace.test( handleObj.namespace ) ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\tevent.handleObj = handleObj;\n");
      out.write("\t\t\t\t\tevent.data = handleObj.data;\n");
      out.write("\n");
      out.write("\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n");
      out.write("\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );\n");
      out.write("\n");
      out.write("\t\t\t\t\tif ( ret !== undefined ) {\n");
      out.write("\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {\n");
      out.write("\t\t\t\t\t\t\tevent.preventDefault();\n");
      out.write("\t\t\t\t\t\t\tevent.stopPropagation();\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Call the postDispatch hook for the mapped type\n");
      out.write("\t\tif ( special.postDispatch ) {\n");
      out.write("\t\t\tspecial.postDispatch.call( this, event );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\treturn event.result;\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\thandlers: function( event, handlers ) {\n");
      out.write("\t\tvar i, handleObj, sel, matchedHandlers, matchedSelectors,\n");
      out.write("\t\t\thandlerQueue = [],\n");
      out.write("\t\t\tdelegateCount = handlers.delegateCount,\n");
      out.write("\t\t\tcur = event.target;\n");
      out.write("\n");
      out.write("\t\t// Find delegate handlers\n");
      out.write("\t\tif ( delegateCount &&\n");
      out.write("\n");
      out.write("\t\t\t// Support: IE <=9\n");
      out.write("\t\t\t// Black-hole SVG <use> instance trees (trac-13180)\n");
      out.write("\t\t\tcur.nodeType &&\n");
      out.write("\n");
      out.write("\t\t\t// Support: Firefox <=42\n");
      out.write("\t\t\t// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n");
      out.write("\t\t\t// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n");
      out.write("\t\t\t// Support: IE 11 only\n");
      out.write("\t\t\t// ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\n");
      out.write("\t\t\t!( event.type === \"click\" && event.button >= 1 ) ) {\n");
      out.write("\n");
      out.write("\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\n");
      out.write("\n");
      out.write("\t\t\t\t// Don't check non-elements (#13208)\n");
      out.write("\t\t\t\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n");
      out.write("\t\t\t\tif ( cur.nodeType === 1 && !( event.type === \"click\" && cur.disabled === true ) ) {\n");
      out.write("\t\t\t\t\tmatchedHandlers = [];\n");
      out.write("\t\t\t\t\tmatchedSelectors = {};\n");
      out.write("\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\n");
      out.write("\t\t\t\t\t\thandleObj = handlers[ i ];\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t// Don't conflict with Object.prototype properties (#13203)\n");
      out.write("\t\t\t\t\t\tsel = handleObj.selector + \" \";\n");
      out.write("\n");
      out.write("\t\t\t\t\t\tif ( matchedSelectors[ sel ] === undefined ) {\n");
      out.write("\t\t\t\t\t\t\tmatchedSelectors[ sel ] = handleObj.needsContext ?\n");
      out.write("\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) > -1 :\n");
      out.write("\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\tif ( matchedSelectors[ sel ] ) {\n");
      out.write("\t\t\t\t\t\t\tmatchedHandlers.push( handleObj );\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t\tif ( matchedHandlers.length ) {\n");
      out.write("\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matchedHandlers } );\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Add the remaining (directly-bound) handlers\n");
      out.write("\t\tcur = this;\n");
      out.write("\t\tif ( delegateCount < handlers.length ) {\n");
      out.write("\t\t\thandlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\treturn handlerQueue;\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\taddProp: function( name, hook ) {\n");
      out.write("\t\tObject.defineProperty( jQuery.Event.prototype, name, {\n");
      out.write("\t\t\tenumerable: true,\n");
      out.write("\t\t\tconfigurable: true,\n");
      out.write("\n");
      out.write("\t\t\tget: isFunction( hook ) ?\n");
      out.write("\t\t\t\tfunction() {\n");
      out.write("\t\t\t\t\tif ( this.originalEvent ) {\n");
      out.write("\t\t\t\t\t\t\treturn hook( this.originalEvent );\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t} :\n");
      out.write("\t\t\t\tfunction() {\n");
      out.write("\t\t\t\t\tif ( this.originalEvent ) {\n");
      out.write("\t\t\t\t\t\t\treturn this.originalEvent[ name ];\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t},\n");
      out.write("\n");
      out.write("\t\t\tset: function( value ) {\n");
      out.write("\t\t\t\tObject.defineProperty( this, name, {\n");
      out.write("\t\t\t\t\tenumerable: true,\n");
      out.write("\t\t\t\t\tconfigurable: true,\n");
      out.write("\t\t\t\t\twritable: true,\n");
      out.write("\t\t\t\t\tvalue: value\n");
      out.write("\t\t\t\t} );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t} );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tfix: function( originalEvent ) {\n");
      out.write("\t\treturn originalEvent[ jQuery.expando ] ?\n");
      out.write("\t\t\toriginalEvent :\n");
      out.write("\t\t\tnew jQuery.Event( originalEvent );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tspecial: {\n");
      out.write("\t\tload: {\n");
      out.write("\n");
      out.write("\t\t\t// Prevent triggered image.load events from bubbling to window.load\n");
      out.write("\t\t\tnoBubble: true\n");
      out.write("\t\t},\n");
      out.write("\t\tclick: {\n");
      out.write("\n");
      out.write("\t\t\t// Utilize native event to ensure correct state for checkable inputs\n");
      out.write("\t\t\tsetup: function( data ) {\n");
      out.write("\n");
      out.write("\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\n");
      out.write("\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\n");
      out.write("\t\t\t\tvar el = this || data;\n");
      out.write("\n");
      out.write("\t\t\t\t// Claim the first handler\n");
      out.write("\t\t\t\tif ( rcheckableType.test( el.type ) &&\n");
      out.write("\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t// dataPriv.set( el, \"click\", ... )\n");
      out.write("\t\t\t\t\tleverageNative( el, \"click\", returnTrue );\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t// Return false to allow normal processing in the caller\n");
      out.write("\t\t\t\treturn false;\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\ttrigger: function( data ) {\n");
      out.write("\n");
      out.write("\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\n");
      out.write("\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\n");
      out.write("\t\t\t\tvar el = this || data;\n");
      out.write("\n");
      out.write("\t\t\t\t// Force setup before triggering a click\n");
      out.write("\t\t\t\tif ( rcheckableType.test( el.type ) &&\n");
      out.write("\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\tleverageNative( el, \"click\" );\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t// Return non-false to allow normal event-path propagation\n");
      out.write("\t\t\t\treturn true;\n");
      out.write("\t\t\t},\n");
      out.write("\n");
      out.write("\t\t\t// For cross-browser consistency, suppress native .click() on links\n");
      out.write("\t\t\t// Also prevent it if we're currently inside a leveraged native-event stack\n");
      out.write("\t\t\t_default: function( event ) {\n");
      out.write("\t\t\t\tvar target = event.target;\n");
      out.write("\t\t\t\treturn rcheckableType.test( target.type ) &&\n");
      out.write("\t\t\t\t\ttarget.click && nodeName( target, \"input\" ) &&\n");
      out.write("\t\t\t\t\tdataPriv.get( target, \"click\" ) ||\n");
      out.write("\t\t\t\t\tnodeName( target, \"a\" );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t},\n");
      out.write("\n");
      out.write("\t\tbeforeunload: {\n");
      out.write("\t\t\tpostDispatch: function( event ) {\n");
      out.write("\n");
      out.write("\t\t\t\t// Support: Firefox 20+\n");
      out.write("\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n");
      out.write("\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\n");
      out.write("\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("};\n");
      out.write("\n");
      out.write("// Ensure the presence of an event listener that handles manually-triggered\n");
      out.write("// synthetic events by interrupting progress until reinvoked in response to\n");
      out.write("// *native* events that it fires directly, ensuring that state changes have\n");
      out.write("// already occurred before other listeners are invoked.\n");
      out.write("function leverageNative( el, type, expectSync ) {\n");
      out.write("\n");
      out.write("\t// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add\n");
      out.write("\tif ( !expectSync ) {\n");
      out.write("\t\tif ( dataPriv.get( el, type ) === undefined ) {\n");
      out.write("\t\t\tjQuery.event.add( el, type, returnTrue );\n");
      out.write("\t\t}\n");
      out.write("\t\treturn;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// Register the controller as a special universal handler for all event namespaces\n");
      out.write("\tdataPriv.set( el, type, false );\n");
      out.write("\tjQuery.event.add( el, type, {\n");
      out.write("\t\tnamespace: false,\n");
      out.write("\t\thandler: function( event ) {\n");
      out.write("\t\t\tvar notAsync, result,\n");
      out.write("\t\t\t\tsaved = dataPriv.get( this, type );\n");
      out.write("\n");
      out.write("\t\t\tif ( ( event.isTrigger & 1 ) && this[ type ] ) {\n");
      out.write("\n");
      out.write("\t\t\t\t// Interrupt processing of the outer synthetic .trigger()ed event\n");
      out.write("\t\t\t\t// Saved data should be false in such cases, but might be a leftover capture object\n");
      out.write("\t\t\t\t// from an async native handler (gh-4350)\n");
      out.write("\t\t\t\tif ( !saved.length ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t// Store arguments for use when handling the inner native event\n");
      out.write("\t\t\t\t\t// There will always be at least one argument (an event object), so this array\n");
      out.write("\t\t\t\t\t// will not be confused with a leftover capture object.\n");
      out.write("\t\t\t\t\tsaved = slice.call( arguments );\n");
      out.write("\t\t\t\t\tdataPriv.set( this, type, saved );\n");
      out.write("\n");
      out.write("\t\t\t\t\t// Trigger the native event and capture its result\n");
      out.write("\t\t\t\t\t// Support: IE <=9 - 11+\n");
      out.write("\t\t\t\t\t// focus() and blur() are asynchronous\n");
      out.write("\t\t\t\t\tnotAsync = expectSync( this, type );\n");
      out.write("\t\t\t\t\tthis[ type ]();\n");
      out.write("\t\t\t\t\tresult = dataPriv.get( this, type );\n");
      out.write("\t\t\t\t\tif ( saved !== result || notAsync ) {\n");
      out.write("\t\t\t\t\t\tdataPriv.set( this, type, false );\n");
      out.write("\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\tresult = {};\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t\tif ( saved !== result ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t// Cancel the outer synthetic event\n");
      out.write("\t\t\t\t\t\tevent.stopImmediatePropagation();\n");
      out.write("\t\t\t\t\t\tevent.preventDefault();\n");
      out.write("\t\t\t\t\t\treturn result.value;\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t// If this is an inner synthetic event for an event with a bubbling surrogate\n");
      out.write("\t\t\t\t// (focus or blur), assume that the surrogate already propagated from triggering the\n");
      out.write("\t\t\t\t// native event and prevent that from happening again here.\n");
      out.write("\t\t\t\t// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the\n");
      out.write("\t\t\t\t// bubbling surrogate propagates *after* the non-bubbling base), but that seems\n");
      out.write("\t\t\t\t// less bad than duplication.\n");
      out.write("\t\t\t\t} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {\n");
      out.write("\t\t\t\t\tevent.stopPropagation();\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// If this is a native event triggered above, everything is now in order\n");
      out.write("\t\t\t// Fire an inner synthetic event with the original arguments\n");
      out.write("\t\t\t} else if ( saved.length ) {\n");
      out.write("\n");
      out.write("\t\t\t\t// ...and capture the result\n");
      out.write("\t\t\t\tdataPriv.set( this, type, {\n");
      out.write("\t\t\t\t\tvalue: jQuery.event.trigger(\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t// Support: IE <=9 - 11+\n");
      out.write("\t\t\t\t\t\t// Extend with the prototype to reset the above stopImmediatePropagation()\n");
      out.write("\t\t\t\t\t\tjQuery.extend( saved[ 0 ], jQuery.Event.prototype ),\n");
      out.write("\t\t\t\t\t\tsaved.slice( 1 ),\n");
      out.write("\t\t\t\t\t\tthis\n");
      out.write("\t\t\t\t\t)\n");
      out.write("\t\t\t\t} );\n");
      out.write("\n");
      out.write("\t\t\t\t// Abort handling of the native event\n");
      out.write("\t\t\t\tevent.stopImmediatePropagation();\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t} );\n");
      out.write("}\n");
      out.write("\n");
      out.write("jQuery.removeEvent = function( elem, type, handle ) {\n");
      out.write("\n");
      out.write("\t// This \"if\" is needed for plain objects\n");
      out.write("\tif ( elem.removeEventListener ) {\n");
      out.write("\t\telem.removeEventListener( type, handle );\n");
      out.write("\t}\n");
      out.write("};\n");
      out.write("\n");
      out.write("jQuery.Event = function( src, props ) {\n");
      out.write("\n");
      out.write("\t// Allow instantiation without the 'new' keyword\n");
      out.write("\tif ( !( this instanceof jQuery.Event ) ) {\n");
      out.write("\t\treturn new jQuery.Event( src, props );\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// Event object\n");
      out.write("\tif ( src && src.type ) {\n");
      out.write("\t\tthis.originalEvent = src;\n");
      out.write("\t\tthis.type = src.type;\n");
      out.write("\n");
      out.write("\t\t// Events bubbling up the document may have been marked as prevented\n");
      out.write("\t\t// by a handler lower down the tree; reflect the correct value.\n");
      out.write("\t\tthis.isDefaultPrevented = src.defaultPrevented ||\n");
      out.write("\t\t\t\tsrc.defaultPrevented === undefined &&\n");
      out.write("\n");
      out.write("\t\t\t\t// Support: Android <=2.3 only\n");
      out.write("\t\t\t\tsrc.returnValue === false ?\n");
      out.write("\t\t\treturnTrue :\n");
      out.write("\t\t\treturnFalse;\n");
      out.write("\n");
      out.write("\t\t// Create target properties\n");
      out.write("\t\t// Support: Safari <=6 - 7 only\n");
      out.write("\t\t// Target should not be a text node (#504, #13143)\n");
      out.write("\t\tthis.target = ( src.target && src.target.nodeType === 3 ) ?\n");
      out.write("\t\t\tsrc.target.parentNode :\n");
      out.write("\t\t\tsrc.target;\n");
      out.write("\n");
      out.write("\t\tthis.currentTarget = src.currentTarget;\n");
      out.write("\t\tthis.relatedTarget = src.relatedTarget;\n");
      out.write("\n");
      out.write("\t// Event type\n");
      out.write("\t} else {\n");
      out.write("\t\tthis.type = src;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// Put explicitly provided properties onto the event object\n");
      out.write("\tif ( props ) {\n");
      out.write("\t\tjQuery.extend( this, props );\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// Create a timestamp if incoming event doesn't have one\n");
      out.write("\tthis.timeStamp = src && src.timeStamp || Date.now();\n");
      out.write("\n");
      out.write("\t// Mark it as fixed\n");
      out.write("\tthis[ jQuery.expando ] = true;\n");
      out.write("};\n");
      out.write("\n");
      out.write("// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n");
      out.write("// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\n");
      out.write("jQuery.Event.prototype = {\n");
      out.write("\tconstructor: jQuery.Event,\n");
      out.write("\tisDefaultPrevented: returnFalse,\n");
      out.write("\tisPropagationStopped: returnFalse,\n");
      out.write("\tisImmediatePropagationStopped: returnFalse,\n");
      out.write("\tisSimulated: false,\n");
      out.write("\n");
      out.write("\tpreventDefault: function() {\n");
      out.write("\t\tvar e = this.originalEvent;\n");
      out.write("\n");
      out.write("\t\tthis.isDefaultPrevented = returnTrue;\n");
      out.write("\n");
      out.write("\t\tif ( e && !this.isSimulated ) {\n");
      out.write("\t\t\te.preventDefault();\n");
      out.write("\t\t}\n");
      out.write("\t},\n");
      out.write("\tstopPropagation: function() {\n");
      out.write("\t\tvar e = this.originalEvent;\n");
      out.write("\n");
      out.write("\t\tthis.isPropagationStopped = returnTrue;\n");
      out.write("\n");
      out.write("\t\tif ( e && !this.isSimulated ) {\n");
      out.write("\t\t\te.stopPropagation();\n");
      out.write("\t\t}\n");
      out.write("\t},\n");
      out.write("\tstopImmediatePropagation: function() {\n");
      out.write("\t\tvar e = this.originalEvent;\n");
      out.write("\n");
      out.write("\t\tthis.isImmediatePropagationStopped = returnTrue;\n");
      out.write("\n");
      out.write("\t\tif ( e && !this.isSimulated ) {\n");
      out.write("\t\t\te.stopImmediatePropagation();\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tthis.stopPropagation();\n");
      out.write("\t}\n");
      out.write("};\n");
      out.write("\n");
      out.write("// Includes all common event props including KeyEvent and MouseEvent specific props\n");
      out.write("jQuery.each( {\n");
      out.write("\taltKey: true,\n");
      out.write("\tbubbles: true,\n");
      out.write("\tcancelable: true,\n");
      out.write("\tchangedTouches: true,\n");
      out.write("\tctrlKey: true,\n");
      out.write("\tdetail: true,\n");
      out.write("\teventPhase: true,\n");
      out.write("\tmetaKey: true,\n");
      out.write("\tpageX: true,\n");
      out.write("\tpageY: true,\n");
      out.write("\tshiftKey: true,\n");
      out.write("\tview: true,\n");
      out.write("\t\"char\": true,\n");
      out.write("\tcode: true,\n");
      out.write("\tcharCode: true,\n");
      out.write("\tkey: true,\n");
      out.write("\tkeyCode: true,\n");
      out.write("\tbutton: true,\n");
      out.write("\tbuttons: true,\n");
      out.write("\tclientX: true,\n");
      out.write("\tclientY: true,\n");
      out.write("\toffsetX: true,\n");
      out.write("\toffsetY: true,\n");
      out.write("\tpointerId: true,\n");
      out.write("\tpointerType: true,\n");
      out.write("\tscreenX: true,\n");
      out.write("\tscreenY: true,\n");
      out.write("\ttargetTouches: true,\n");
      out.write("\ttoElement: true,\n");
      out.write("\ttouches: true,\n");
      out.write("\n");
      out.write("\twhich: function( event ) {\n");
      out.write("\t\tvar button = event.button;\n");
      out.write("\n");
      out.write("\t\t// Add which for key events\n");
      out.write("\t\tif ( event.which == null && rkeyEvent.test( event.type ) ) {\n");
      out.write("\t\t\treturn event.charCode != null ? event.charCode : event.keyCode;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Add which for click: 1 === left; 2 === middle; 3 === right\n");
      out.write("\t\tif ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {\n");
      out.write("\t\t\tif ( button & 1 ) {\n");
      out.write("\t\t\t\treturn 1;\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\tif ( button & 2 ) {\n");
      out.write("\t\t\t\treturn 3;\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\tif ( button & 4 ) {\n");
      out.write("\t\t\t\treturn 2;\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\treturn 0;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\treturn event.which;\n");
      out.write("\t}\n");
      out.write("}, jQuery.event.addProp );\n");
      out.write("\n");
      out.write("jQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( type, delegateType ) {\n");
      out.write("\tjQuery.event.special[ type ] = {\n");
      out.write("\n");
      out.write("\t\t// Utilize native event if possible so blur/focus sequence is correct\n");
      out.write("\t\tsetup: function() {\n");
      out.write("\n");
      out.write("\t\t\t// Claim the first handler\n");
      out.write("\t\t\t// dataPriv.set( this, \"focus\", ... )\n");
      out.write("\t\t\t// dataPriv.set( this, \"blur\", ... )\n");
      out.write("\t\t\tleverageNative( this, type, expectSync );\n");
      out.write("\n");
      out.write("\t\t\t// Return false to allow normal processing in the caller\n");
      out.write("\t\t\treturn false;\n");
      out.write("\t\t},\n");
      out.write("\t\ttrigger: function() {\n");
      out.write("\n");
      out.write("\t\t\t// Force setup before trigger\n");
      out.write("\t\t\tleverageNative( this, type );\n");
      out.write("\n");
      out.write("\t\t\t// Return non-false to allow normal event-path propagation\n");
      out.write("\t\t\treturn true;\n");
      out.write("\t\t},\n");
      out.write("\n");
      out.write("\t\tdelegateType: delegateType\n");
      out.write("\t};\n");
      out.write("} );\n");
      out.write("\n");
      out.write("// Create mouseenter/leave events using mouseover/out and event-time checks\n");
      out.write("// so that event delegation works in jQuery.\n");
      out.write("// Do the same for pointerenter/pointerleave and pointerover/pointerout\n");
      out.write("//\n");
      out.write("// Support: Safari 7 only\n");
      out.write("// Safari sends mouseenter too often; see:\n");
      out.write("// https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n");
      out.write("// for the description of the bug (it existed in older Chrome versions as well).\n");
      out.write("jQuery.each( {\n");
      out.write("\tmouseenter: \"mouseover\",\n");
      out.write("\tmouseleave: \"mouseout\",\n");
      out.write("\tpointerenter: \"pointerover\",\n");
      out.write("\tpointerleave: \"pointerout\"\n");
      out.write("}, function( orig, fix ) {\n");
      out.write("\tjQuery.event.special[ orig ] = {\n");
      out.write("\t\tdelegateType: fix,\n");
      out.write("\t\tbindType: fix,\n");
      out.write("\n");
      out.write("\t\thandle: function( event ) {\n");
      out.write("\t\t\tvar ret,\n");
      out.write("\t\t\t\ttarget = this,\n");
      out.write("\t\t\t\trelated = event.relatedTarget,\n");
      out.write("\t\t\t\thandleObj = event.handleObj;\n");
      out.write("\n");
      out.write("\t\t\t// For mouseenter/leave call the handler if related is outside the target.\n");
      out.write("\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n");
      out.write("\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n");
      out.write("\t\t\t\tevent.type = handleObj.origType;\n");
      out.write("\t\t\t\tret = handleObj.handler.apply( this, arguments );\n");
      out.write("\t\t\t\tevent.type = fix;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\treturn ret;\n");
      out.write("\t\t}\n");
      out.write("\t};\n");
      out.write("} );\n");
      out.write("\n");
      out.write("jQuery.fn.extend( {\n");
      out.write("\n");
      out.write("\ton: function( types, selector, data, fn ) {\n");
      out.write("\t\treturn on( this, types, selector, data, fn );\n");
      out.write("\t},\n");
      out.write("\tone: function( types, selector, data, fn ) {\n");
      out.write("\t\treturn on( this, types, selector, data, fn, 1 );\n");
      out.write("\t},\n");
      out.write("\toff: function( types, selector, fn ) {\n");
      out.write("\t\tvar handleObj, type;\n");
      out.write("\t\tif ( types && types.preventDefault && types.handleObj ) {\n");
      out.write("\n");
      out.write("\t\t\t// ( event )  dispatched jQuery.Event\n");
      out.write("\t\t\thandleObj = types.handleObj;\n");
      out.write("\t\t\tjQuery( types.delegateTarget ).off(\n");
      out.write("\t\t\t\thandleObj.namespace ?\n");
      out.write("\t\t\t\t\thandleObj.origType + \".\" + handleObj.namespace :\n");
      out.write("\t\t\t\t\thandleObj.origType,\n");
      out.write("\t\t\t\thandleObj.selector,\n");
      out.write("\t\t\t\thandleObj.handler\n");
      out.write("\t\t\t);\n");
      out.write("\t\t\treturn this;\n");
      out.write("\t\t}\n");
      out.write("\t\tif ( typeof types === \"object\" ) {\n");
      out.write("\n");
      out.write("\t\t\t// ( types-object [, selector] )\n");
      out.write("\t\t\tfor ( type in types ) {\n");
      out.write("\t\t\t\tthis.off( type, selector, types[ type ] );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\treturn this;\n");
      out.write("\t\t}\n");
      out.write("\t\tif ( selector === false || typeof selector === \"function\" ) {\n");
      out.write("\n");
      out.write("\t\t\t// ( types [, fn] )\n");
      out.write("\t\t\tfn = selector;\n");
      out.write("\t\t\tselector = undefined;\n");
      out.write("\t\t}\n");
      out.write("\t\tif ( fn === false ) {\n");
      out.write("\t\t\tfn = returnFalse;\n");
      out.write("\t\t}\n");
      out.write("\t\treturn this.each( function() {\n");
      out.write("\t\t\tjQuery.event.remove( this, types, fn, selector );\n");
      out.write("\t\t} );\n");
      out.write("\t}\n");
      out.write("} );\n");
      out.write("\n");
      out.write("\n");
      out.write("var\n");
      out.write("\n");
      out.write("\t/* eslint-disable max-len */\n");
      out.write("\n");
      out.write("\t// See https://github.com/eslint/eslint/issues/3229\n");
      out.write("\trxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi,\n");
      out.write("\n");
      out.write("\t/* eslint-enable */\n");
      out.write("\n");
      out.write("\t// Support: IE <=10 - 11, Edge 12 - 13 only\n");
      out.write("\t// In IE/Edge using regex groups here causes severe slowdowns.\n");
      out.write("\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n");
      out.write("\trnoInnerhtml = /<script|<style|<link/i,\n");
      out.write("\n");
      out.write("\t// checked=\"checked\" or checked\n");
      out.write("\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n");
      out.write("\trcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n");
      out.write("\n");
      out.write("// Prefer a tbody over its parent table for containing new rows\n");
      out.write("function manipulationTarget( elem, content ) {\n");
      out.write("\tif ( nodeName( elem, \"table\" ) &&\n");
      out.write("\t\tnodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ) {\n");
      out.write("\n");
      out.write("\t\treturn jQuery( elem ).children( \"tbody\" )[ 0 ] || elem;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\treturn elem;\n");
      out.write("}\n");
      out.write("\n");
      out.write("// Replace/restore the type attribute of script elements for safe DOM manipulation\n");
      out.write("function disableScript( elem ) {\n");
      out.write("\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\n");
      out.write("\treturn elem;\n");
      out.write("}\n");
      out.write("function restoreScript( elem ) {\n");
      out.write("\tif ( ( elem.type || \"\" ).slice( 0, 5 ) === \"true/\" ) {\n");
      out.write("\t\telem.type = elem.type.slice( 5 );\n");
      out.write("\t} else {\n");
      out.write("\t\telem.removeAttribute( \"type\" );\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\treturn elem;\n");
      out.write("}\n");
      out.write("\n");
      out.write("function cloneCopyEvent( src, dest ) {\n");
      out.write("\tvar i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;\n");
      out.write("\n");
      out.write("\tif ( dest.nodeType !== 1 ) {\n");
      out.write("\t\treturn;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// 1. Copy private data: events, handlers, etc.\n");
      out.write("\tif ( dataPriv.hasData( src ) ) {\n");
      out.write("\t\tpdataOld = dataPriv.access( src );\n");
      out.write("\t\tpdataCur = dataPriv.set( dest, pdataOld );\n");
      out.write("\t\tevents = pdataOld.events;\n");
      out.write("\n");
      out.write("\t\tif ( events ) {\n");
      out.write("\t\t\tdelete pdataCur.handle;\n");
      out.write("\t\t\tpdataCur.events = {};\n");
      out.write("\n");
      out.write("\t\t\tfor ( type in events ) {\n");
      out.write("\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n");
      out.write("\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// 2. Copy user data\n");
      out.write("\tif ( dataUser.hasData( src ) ) {\n");
      out.write("\t\tudataOld = dataUser.access( src );\n");
      out.write("\t\tudataCur = jQuery.extend( {}, udataOld );\n");
      out.write("\n");
      out.write("\t\tdataUser.set( dest, udataCur );\n");
      out.write("\t}\n");
      out.write("}\n");
      out.write("\n");
      out.write("// Fix IE bugs, see support tests\n");
      out.write("function fixInput( src, dest ) {\n");
      out.write("\tvar nodeName = dest.nodeName.toLowerCase();\n");
      out.write("\n");
      out.write("\t// Fails to persist the checked state of a cloned checkbox or radio button.\n");
      out.write("\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n");
      out.write("\t\tdest.checked = src.checked;\n");
      out.write("\n");
      out.write("\t// Fails to return the selected option to the default selected state when cloning options\n");
      out.write("\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n");
      out.write("\t\tdest.defaultValue = src.defaultValue;\n");
      out.write("\t}\n");
      out.write("}\n");
      out.write("\n");
      out.write("function domManip( collection, args, callback, ignored ) {\n");
      out.write("\n");
      out.write("\t// Flatten any nested arrays\n");
      out.write("\targs = concat.apply( [], args );\n");
      out.write("\n");
      out.write("\tvar fragment, first, scripts, hasScripts, node, doc,\n");
      out.write("\t\ti = 0,\n");
      out.write("\t\tl = collection.length,\n");
      out.write("\t\tiNoClone = l - 1,\n");
      out.write("\t\tvalue = args[ 0 ],\n");
      out.write("\t\tvalueIsFunction = isFunction( value );\n");
      out.write("\n");
      out.write("\t// We can't cloneNode fragments that contain checked, in WebKit\n");
      out.write("\tif ( valueIsFunction ||\n");
      out.write("\t\t\t( l > 1 && typeof value === \"string\" &&\n");
      out.write("\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n");
      out.write("\t\treturn collection.each( function( index ) {\n");
      out.write("\t\t\tvar self = collection.eq( index );\n");
      out.write("\t\t\tif ( valueIsFunction ) {\n");
      out.write("\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\tdomManip( self, args, callback, ignored );\n");
      out.write("\t\t} );\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tif ( l ) {\n");
      out.write("\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n");
      out.write("\t\tfirst = fragment.firstChild;\n");
      out.write("\n");
      out.write("\t\tif ( fragment.childNodes.length === 1 ) {\n");
      out.write("\t\t\tfragment = first;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Require either new content or an interest in ignored elements to invoke the callback\n");
      out.write("\t\tif ( first || ignored ) {\n");
      out.write("\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n");
      out.write("\t\t\thasScripts = scripts.length;\n");
      out.write("\n");
      out.write("\t\t\t// Use the original fragment for the last item\n");
      out.write("\t\t\t// instead of the first because it can end up\n");
      out.write("\t\t\t// being emptied incorrectly in certain situations (#8070).\n");
      out.write("\t\t\tfor ( ; i < l; i++ ) {\n");
      out.write("\t\t\t\tnode = fragment;\n");
      out.write("\n");
      out.write("\t\t\t\tif ( i !== iNoClone ) {\n");
      out.write("\t\t\t\t\tnode = jQuery.clone( node, true, true );\n");
      out.write("\n");
      out.write("\t\t\t\t\t// Keep references to cloned scripts for later restoration\n");
      out.write("\t\t\t\t\tif ( hasScripts ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n");
      out.write("\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n");
      out.write("\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\tcallback.call( collection[ i ], node, i );\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\tif ( hasScripts ) {\n");
      out.write("\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n");
      out.write("\n");
      out.write("\t\t\t\t// Reenable scripts\n");
      out.write("\t\t\t\tjQuery.map( scripts, restoreScript );\n");
      out.write("\n");
      out.write("\t\t\t\t// Evaluate executable scripts on first document insertion\n");
      out.write("\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n");
      out.write("\t\t\t\t\tnode = scripts[ i ];\n");
      out.write("\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n");
      out.write("\t\t\t\t\t\t!dataPriv.access( node, \"globalEval\" ) &&\n");
      out.write("\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\tif ( node.src && ( node.type || \"\" ).toLowerCase()  !== \"module\" ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n");
      out.write("\t\t\t\t\t\t\tif ( jQuery._evalUrl && !node.noModule ) {\n");
      out.write("\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src, {\n");
      out.write("\t\t\t\t\t\t\t\t\tnonce: node.nonce || node.getAttribute( \"nonce\" )\n");
      out.write("\t\t\t\t\t\t\t\t} );\n");
      out.write("\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\t\tDOMEval( node.textContent.replace( rcleanScript, \"\" ), node, doc );\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\treturn collection;\n");
      out.write("}\n");
      out.write("\n");
      out.write("function remove( elem, selector, keepData ) {\n");
      out.write("\tvar node,\n");
      out.write("\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\n");
      out.write("\t\ti = 0;\n");
      out.write("\n");
      out.write("\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\n");
      out.write("\t\tif ( !keepData && node.nodeType === 1 ) {\n");
      out.write("\t\t\tjQuery.cleanData( getAll( node ) );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tif ( node.parentNode ) {\n");
      out.write("\t\t\tif ( keepData && isAttached( node ) ) {\n");
      out.write("\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\tnode.parentNode.removeChild( node );\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\treturn elem;\n");
      out.write("}\n");
      out.write("\n");
      out.write("jQuery.extend( {\n");
      out.write("\thtmlPrefilter: function( html ) {\n");
      out.write("\t\treturn html.replace( rxhtmlTag, \"<$1></$2>\" );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n");
      out.write("\t\tvar i, l, srcElements, destElements,\n");
      out.write("\t\t\tclone = elem.cloneNode( true ),\n");
      out.write("\t\t\tinPage = isAttached( elem );\n");
      out.write("\n");
      out.write("\t\t// Fix IE cloning issues\n");
      out.write("\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n");
      out.write("\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\n");
      out.write("\n");
      out.write("\t\t\t// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n");
      out.write("\t\t\tdestElements = getAll( clone );\n");
      out.write("\t\t\tsrcElements = getAll( elem );\n");
      out.write("\n");
      out.write("\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n");
      out.write("\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Copy the events from the original to the clone\n");
      out.write("\t\tif ( dataAndEvents ) {\n");
      out.write("\t\t\tif ( deepDataAndEvents ) {\n");
      out.write("\t\t\t\tsrcElements = srcElements || getAll( elem );\n");
      out.write("\t\t\t\tdestElements = destElements || getAll( clone );\n");
      out.write("\n");
      out.write("\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n");
      out.write("\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t} else {\n");
      out.write("\t\t\t\tcloneCopyEvent( elem, clone );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Preserve script evaluation history\n");
      out.write("\t\tdestElements = getAll( clone, \"script\" );\n");
      out.write("\t\tif ( destElements.length > 0 ) {\n");
      out.write("\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Return the cloned set\n");
      out.write("\t\treturn clone;\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tcleanData: function( elems ) {\n");
      out.write("\t\tvar data, elem, type,\n");
      out.write("\t\t\tspecial = jQuery.event.special,\n");
      out.write("\t\t\ti = 0;\n");
      out.write("\n");
      out.write("\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n");
      out.write("\t\t\tif ( acceptData( elem ) ) {\n");
      out.write("\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\n");
      out.write("\t\t\t\t\tif ( data.events ) {\n");
      out.write("\t\t\t\t\t\tfor ( type in data.events ) {\n");
      out.write("\t\t\t\t\t\t\tif ( special[ type ] ) {\n");
      out.write("\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n");
      out.write("\t\t\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n");
      out.write("\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t\t// Support: Chrome <=35 - 45+\n");
      out.write("\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n");
      out.write("\t\t\t\t\telem[ dataPriv.expando ] = undefined;\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\tif ( elem[ dataUser.expando ] ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t// Support: Chrome <=35 - 45+\n");
      out.write("\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n");
      out.write("\t\t\t\t\telem[ dataUser.expando ] = undefined;\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("} );\n");
      out.write("\n");
      out.write("jQuery.fn.extend( {\n");
      out.write("\tdetach: function( selector ) {\n");
      out.write("\t\treturn remove( this, selector, true );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tremove: function( selector ) {\n");
      out.write("\t\treturn remove( this, selector );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\ttext: function( value ) {\n");
      out.write("\t\treturn access( this, function( value ) {\n");
      out.write("\t\t\treturn value === undefined ?\n");
      out.write("\t\t\t\tjQuery.text( this ) :\n");
      out.write("\t\t\t\tthis.empty().each( function() {\n");
      out.write("\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n");
      out.write("\t\t\t\t\t\tthis.textContent = value;\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t} );\n");
      out.write("\t\t}, null, value, arguments.length );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tappend: function() {\n");
      out.write("\t\treturn domManip( this, arguments, function( elem ) {\n");
      out.write("\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n");
      out.write("\t\t\t\tvar target = manipulationTarget( this, elem );\n");
      out.write("\t\t\t\ttarget.appendChild( elem );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t} );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tprepend: function() {\n");
      out.write("\t\treturn domManip( this, arguments, function( elem ) {\n");
      out.write("\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n");
      out.write("\t\t\t\tvar target = manipulationTarget( this, elem );\n");
      out.write("\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t} );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tbefore: function() {\n");
      out.write("\t\treturn domManip( this, arguments, function( elem ) {\n");
      out.write("\t\t\tif ( this.parentNode ) {\n");
      out.write("\t\t\t\tthis.parentNode.insertBefore( elem, this );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t} );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tafter: function() {\n");
      out.write("\t\treturn domManip( this, arguments, function( elem ) {\n");
      out.write("\t\t\tif ( this.parentNode ) {\n");
      out.write("\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t} );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tempty: function() {\n");
      out.write("\t\tvar elem,\n");
      out.write("\t\t\ti = 0;\n");
      out.write("\n");
      out.write("\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n");
      out.write("\t\t\tif ( elem.nodeType === 1 ) {\n");
      out.write("\n");
      out.write("\t\t\t\t// Prevent memory leaks\n");
      out.write("\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n");
      out.write("\n");
      out.write("\t\t\t\t// Remove any remaining nodes\n");
      out.write("\t\t\t\telem.textContent = \"\";\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\treturn this;\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tclone: function( dataAndEvents, deepDataAndEvents ) {\n");
      out.write("\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n");
      out.write("\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n");
      out.write("\n");
      out.write("\t\treturn this.map( function() {\n");
      out.write("\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n");
      out.write("\t\t} );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\thtml: function( value ) {\n");
      out.write("\t\treturn access( this, function( value ) {\n");
      out.write("\t\t\tvar elem = this[ 0 ] || {},\n");
      out.write("\t\t\t\ti = 0,\n");
      out.write("\t\t\t\tl = this.length;\n");
      out.write("\n");
      out.write("\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n");
      out.write("\t\t\t\treturn elem.innerHTML;\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// See if we can take a shortcut and just use innerHTML\n");
      out.write("\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n");
      out.write("\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n");
      out.write("\n");
      out.write("\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n");
      out.write("\n");
      out.write("\t\t\t\ttry {\n");
      out.write("\t\t\t\t\tfor ( ; i < l; i++ ) {\n");
      out.write("\t\t\t\t\t\telem = this[ i ] || {};\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n");
      out.write("\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n");
      out.write("\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n");
      out.write("\t\t\t\t\t\t\telem.innerHTML = value;\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t\telem = 0;\n");
      out.write("\n");
      out.write("\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n");
      out.write("\t\t\t\t} catch ( e ) {}\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\tif ( elem ) {\n");
      out.write("\t\t\t\tthis.empty().append( value );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}, null, value, arguments.length );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\treplaceWith: function() {\n");
      out.write("\t\tvar ignored = [];\n");
      out.write("\n");
      out.write("\t\t// Make the changes, replacing each non-ignored context element with the new content\n");
      out.write("\t\treturn domManip( this, arguments, function( elem ) {\n");
      out.write("\t\t\tvar parent = this.parentNode;\n");
      out.write("\n");
      out.write("\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\n");
      out.write("\t\t\t\tjQuery.cleanData( getAll( this ) );\n");
      out.write("\t\t\t\tif ( parent ) {\n");
      out.write("\t\t\t\t\tparent.replaceChild( elem, this );\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t// Force callback invocation\n");
      out.write("\t\t}, ignored );\n");
      out.write("\t}\n");
      out.write("} );\n");
      out.write("\n");
      out.write("jQuery.each( {\n");
      out.write("\tappendTo: \"append\",\n");
      out.write("\tprependTo: \"prepend\",\n");
      out.write("\tinsertBefore: \"before\",\n");
      out.write("\tinsertAfter: \"after\",\n");
      out.write("\treplaceAll: \"replaceWith\"\n");
      out.write("}, function( name, original ) {\n");
      out.write("\tjQuery.fn[ name ] = function( selector ) {\n");
      out.write("\t\tvar elems,\n");
      out.write("\t\t\tret = [],\n");
      out.write("\t\t\tinsert = jQuery( selector ),\n");
      out.write("\t\t\tlast = insert.length - 1,\n");
      out.write("\t\t\ti = 0;\n");
      out.write("\n");
      out.write("\t\tfor ( ; i <= last; i++ ) {\n");
      out.write("\t\t\telems = i === last ? this : this.clone( true );\n");
      out.write("\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n");
      out.write("\n");
      out.write("\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n");
      out.write("\t\t\t// .get() because push.apply(_, arraylike) throws on ancient WebKit\n");
      out.write("\t\t\tpush.apply( ret, elems.get() );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\treturn this.pushStack( ret );\n");
      out.write("\t};\n");
      out.write("} );\n");
      out.write("var rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\n");
      out.write("\n");
      out.write("var getStyles = function( elem ) {\n");
      out.write("\n");
      out.write("\t\t// Support: IE <=11 only, Firefox <=30 (#15098, #14150)\n");
      out.write("\t\t// IE throws on elements created in popups\n");
      out.write("\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n");
      out.write("\t\tvar view = elem.ownerDocument.defaultView;\n");
      out.write("\n");
      out.write("\t\tif ( !view || !view.opener ) {\n");
      out.write("\t\t\tview = window;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\treturn view.getComputedStyle( elem );\n");
      out.write("\t};\n");
      out.write("\n");
      out.write("var rboxStyle = new RegExp( cssExpand.join( \"|\" ), \"i\" );\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("( function() {\n");
      out.write("\n");
      out.write("\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n");
      out.write("\t// so they're executed at the same time to save the second computation.\n");
      out.write("\tfunction computeStyleTests() {\n");
      out.write("\n");
      out.write("\t\t// This is a singleton, we need to execute it only once\n");
      out.write("\t\tif ( !div ) {\n");
      out.write("\t\t\treturn;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tcontainer.style.cssText = \"position:absolute;left:-11111px;width:60px;\" +\n");
      out.write("\t\t\t\"margin-top:1px;padding:0;border:0\";\n");
      out.write("\t\tdiv.style.cssText =\n");
      out.write("\t\t\t\"position:relative;display:block;box-sizing:border-box;overflow:scroll;\" +\n");
      out.write("\t\t\t\"margin:auto;border:1px;padding:1px;\" +\n");
      out.write("\t\t\t\"width:60%;top:1%\";\n");
      out.write("\t\tdocumentElement.appendChild( container ).appendChild( div );\n");
      out.write("\n");
      out.write("\t\tvar divStyle = window.getComputedStyle( div );\n");
      out.write("\t\tpixelPositionVal = divStyle.top !== \"1%\";\n");
      out.write("\n");
      out.write("\t\t// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n");
      out.write("\t\treliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;\n");
      out.write("\n");
      out.write("\t\t// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3\n");
      out.write("\t\t// Some styles come back with percentage values, even though they shouldn't\n");
      out.write("\t\tdiv.style.right = \"60%\";\n");
      out.write("\t\tpixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;\n");
      out.write("\n");
      out.write("\t\t// Support: IE 9 - 11 only\n");
      out.write("\t\t// Detect misreporting of content dimensions for box-sizing:border-box elements\n");
      out.write("\t\tboxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;\n");
      out.write("\n");
      out.write("\t\t// Support: IE 9 only\n");
      out.write("\t\t// Detect overflow:scroll screwiness (gh-3699)\n");
      out.write("\t\t// Support: Chrome <=64\n");
      out.write("\t\t// Don't get tricked when zoom affects offsetWidth (gh-4029)\n");
      out.write("\t\tdiv.style.position = \"absolute\";\n");
      out.write("\t\tscrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;\n");
      out.write("\n");
      out.write("\t\tdocumentElement.removeChild( container );\n");
      out.write("\n");
      out.write("\t\t// Nullify the div so it wouldn't be stored in the memory and\n");
      out.write("\t\t// it will also be a sign that checks already performed\n");
      out.write("\t\tdiv = null;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction roundPixelMeasures( measure ) {\n");
      out.write("\t\treturn Math.round( parseFloat( measure ) );\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tvar pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,\n");
      out.write("\t\treliableMarginLeftVal,\n");
      out.write("\t\tcontainer = document.createElement( \"div\" ),\n");
      out.write("\t\tdiv = document.createElement( \"div\" );\n");
      out.write("\n");
      out.write("\t// Finish early in limited (non-browser) environments\n");
      out.write("\tif ( !div.style ) {\n");
      out.write("\t\treturn;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// Support: IE <=9 - 11 only\n");
      out.write("\t// Style of cloned element affects source element cloned (#8908)\n");
      out.write("\tdiv.style.backgroundClip = \"content-box\";\n");
      out.write("\tdiv.cloneNode( true ).style.backgroundClip = \"\";\n");
      out.write("\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n");
      out.write("\n");
      out.write("\tjQuery.extend( support, {\n");
      out.write("\t\tboxSizingReliable: function() {\n");
      out.write("\t\t\tcomputeStyleTests();\n");
      out.write("\t\t\treturn boxSizingReliableVal;\n");
      out.write("\t\t},\n");
      out.write("\t\tpixelBoxStyles: function() {\n");
      out.write("\t\t\tcomputeStyleTests();\n");
      out.write("\t\t\treturn pixelBoxStylesVal;\n");
      out.write("\t\t},\n");
      out.write("\t\tpixelPosition: function() {\n");
      out.write("\t\t\tcomputeStyleTests();\n");
      out.write("\t\t\treturn pixelPositionVal;\n");
      out.write("\t\t},\n");
      out.write("\t\treliableMarginLeft: function() {\n");
      out.write("\t\t\tcomputeStyleTests();\n");
      out.write("\t\t\treturn reliableMarginLeftVal;\n");
      out.write("\t\t},\n");
      out.write("\t\tscrollboxSize: function() {\n");
      out.write("\t\t\tcomputeStyleTests();\n");
      out.write("\t\t\treturn scrollboxSizeVal;\n");
      out.write("\t\t}\n");
      out.write("\t} );\n");
      out.write("} )();\n");
      out.write("\n");
      out.write("\n");
      out.write("function curCSS( elem, name, computed ) {\n");
      out.write("\tvar width, minWidth, maxWidth, ret,\n");
      out.write("\n");
      out.write("\t\t// Support: Firefox 51+\n");
      out.write("\t\t// Retrieving style before computed somehow\n");
      out.write("\t\t// fixes an issue with getting wrong values\n");
      out.write("\t\t// on detached elements\n");
      out.write("\t\tstyle = elem.style;\n");
      out.write("\n");
      out.write("\tcomputed = computed || getStyles( elem );\n");
      out.write("\n");
      out.write("\t// getPropertyValue is needed for:\n");
      out.write("\t//   .css('filter') (IE 9 only, #12537)\n");
      out.write("\t//   .css('--customProperty) (#3144)\n");
      out.write("\tif ( computed ) {\n");
      out.write("\t\tret = computed.getPropertyValue( name ) || computed[ name ];\n");
      out.write("\n");
      out.write("\t\tif ( ret === \"\" && !isAttached( elem ) ) {\n");
      out.write("\t\t\tret = jQuery.style( elem, name );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n");
      out.write("\t\t// Android Browser returns percentage for some values,\n");
      out.write("\t\t// but width seems to be reliably pixels.\n");
      out.write("\t\t// This is against the CSSOM draft spec:\n");
      out.write("\t\t// https://drafts.csswg.org/cssom/#resolved-values\n");
      out.write("\t\tif ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {\n");
      out.write("\n");
      out.write("\t\t\t// Remember the original values\n");
      out.write("\t\t\twidth = style.width;\n");
      out.write("\t\t\tminWidth = style.minWidth;\n");
      out.write("\t\t\tmaxWidth = style.maxWidth;\n");
      out.write("\n");
      out.write("\t\t\t// Put in the new values to get a computed value out\n");
      out.write("\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n");
      out.write("\t\t\tret = computed.width;\n");
      out.write("\n");
      out.write("\t\t\t// Revert the changed values\n");
      out.write("\t\t\tstyle.width = width;\n");
      out.write("\t\t\tstyle.minWidth = minWidth;\n");
      out.write("\t\t\tstyle.maxWidth = maxWidth;\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\treturn ret !== undefined ?\n");
      out.write("\n");
      out.write("\t\t// Support: IE <=9 - 11 only\n");
      out.write("\t\t// IE returns zIndex value as an integer.\n");
      out.write("\t\tret + \"\" :\n");
      out.write("\t\tret;\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("function addGetHookIf( conditionFn, hookFn ) {\n");
      out.write("\n");
      out.write("\t// Define the hook, we'll check on the first run if it's really needed.\n");
      out.write("\treturn {\n");
      out.write("\t\tget: function() {\n");
      out.write("\t\t\tif ( conditionFn() ) {\n");
      out.write("\n");
      out.write("\t\t\t\t// Hook not needed (or it's not possible to use it due\n");
      out.write("\t\t\t\t// to missing dependency), remove it.\n");
      out.write("\t\t\t\tdelete this.get;\n");
      out.write("\t\t\t\treturn;\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n");
      out.write("\t\t\treturn ( this.get = hookFn ).apply( this, arguments );\n");
      out.write("\t\t}\n");
      out.write("\t};\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("var cssPrefixes = [ \"Webkit\", \"Moz\", \"ms\" ],\n");
      out.write("\temptyStyle = document.createElement( \"div\" ).style,\n");
      out.write("\tvendorProps = {};\n");
      out.write("\n");
      out.write("// Return a vendor-prefixed property or undefined\n");
      out.write("function vendorPropName( name ) {\n");
      out.write("\n");
      out.write("\t// Check for vendor prefixed names\n");
      out.write("\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\n");
      out.write("\t\ti = cssPrefixes.length;\n");
      out.write("\n");
      out.write("\twhile ( i-- ) {\n");
      out.write("\t\tname = cssPrefixes[ i ] + capName;\n");
      out.write("\t\tif ( name in emptyStyle ) {\n");
      out.write("\t\t\treturn name;\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("}\n");
      out.write("\n");
      out.write("// Return a potentially-mapped jQuery.cssProps or vendor prefixed property\n");
      out.write("function finalPropName( name ) {\n");
      out.write("\tvar final = jQuery.cssProps[ name ] || vendorProps[ name ];\n");
      out.write("\n");
      out.write("\tif ( final ) {\n");
      out.write("\t\treturn final;\n");
      out.write("\t}\n");
      out.write("\tif ( name in emptyStyle ) {\n");
      out.write("\t\treturn name;\n");
      out.write("\t}\n");
      out.write("\treturn vendorProps[ name ] = vendorPropName( name ) || name;\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("var\n");
      out.write("\n");
      out.write("\t// Swappable if display is none or starts with table\n");
      out.write("\t// except \"table\", \"table-cell\", or \"table-caption\"\n");
      out.write("\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n");
      out.write("\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n");
      out.write("\trcustomProp = /^--/,\n");
      out.write("\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n");
      out.write("\tcssNormalTransform = {\n");
      out.write("\t\tletterSpacing: \"0\",\n");
      out.write("\t\tfontWeight: \"400\"\n");
      out.write("\t};\n");
      out.write("\n");
      out.write("function setPositiveNumber( elem, value, subtract ) {\n");
      out.write("\n");
      out.write("\t// Any relative (+/-) values have already been\n");
      out.write("\t// normalized at this point\n");
      out.write("\tvar matches = rcssNum.exec( value );\n");
      out.write("\treturn matches ?\n");
      out.write("\n");
      out.write("\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n");
      out.write("\t\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || \"px\" ) :\n");
      out.write("\t\tvalue;\n");
      out.write("}\n");
      out.write("\n");
      out.write("function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {\n");
      out.write("\tvar i = dimension === \"width\" ? 1 : 0,\n");
      out.write("\t\textra = 0,\n");
      out.write("\t\tdelta = 0;\n");
      out.write("\n");
      out.write("\t// Adjustment may not be necessary\n");
      out.write("\tif ( box === ( isBorderBox ? \"border\" : \"content\" ) ) {\n");
      out.write("\t\treturn 0;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfor ( ; i < 4; i += 2 ) {\n");
      out.write("\n");
      out.write("\t\t// Both box models exclude margin\n");
      out.write("\t\tif ( box === \"margin\" ) {\n");
      out.write("\t\t\tdelta += jQuery.css( elem, box + cssExpand[ i ], true, styles );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// If we get here with a content-box, we're seeking \"padding\" or \"border\" or \"margin\"\n");
      out.write("\t\tif ( !isBorderBox ) {\n");
      out.write("\n");
      out.write("\t\t\t// Add padding\n");
      out.write("\t\t\tdelta += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n");
      out.write("\n");
      out.write("\t\t\t// For \"border\" or \"margin\", add border\n");
      out.write("\t\t\tif ( box !== \"padding\" ) {\n");
      out.write("\t\t\t\tdelta += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n");
      out.write("\n");
      out.write("\t\t\t// But still keep track of it otherwise\n");
      out.write("\t\t\t} else {\n");
      out.write("\t\t\t\textra += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t// If we get here with a border-box (content + padding + border), we're seeking \"content\" or\n");
      out.write("\t\t// \"padding\" or \"margin\"\n");
      out.write("\t\t} else {\n");
      out.write("\n");
      out.write("\t\t\t// For \"content\", subtract padding\n");
      out.write("\t\t\tif ( box === \"content\" ) {\n");
      out.write("\t\t\t\tdelta -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// For \"content\" or \"padding\", subtract border\n");
      out.write("\t\t\tif ( box !== \"margin\" ) {\n");
      out.write("\t\t\t\tdelta -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// Account for positive content-box scroll gutter when requested by providing computedVal\n");
      out.write("\tif ( !isBorderBox && computedVal >= 0 ) {\n");
      out.write("\n");
      out.write("\t\t// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border\n");
      out.write("\t\t// Assuming integer scroll gutter, subtract the rest and round down\n");
      out.write("\t\tdelta += Math.max( 0, Math.ceil(\n");
      out.write("\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n");
      out.write("\t\t\tcomputedVal -\n");
      out.write("\t\t\tdelta -\n");
      out.write("\t\t\textra -\n");
      out.write("\t\t\t0.5\n");
      out.write("\n");
      out.write("\t\t// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter\n");
      out.write("\t\t// Use an explicit zero to avoid NaN (gh-3964)\n");
      out.write("\t\t) ) || 0;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\treturn delta;\n");
      out.write("}\n");
      out.write("\n");
      out.write("function getWidthOrHeight( elem, dimension, extra ) {\n");
      out.write("\n");
      out.write("\t// Start with computed style\n");
      out.write("\tvar styles = getStyles( elem ),\n");
      out.write("\n");
      out.write("\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).\n");
      out.write("\t\t// Fake content-box until we know it's needed to know the true value.\n");
      out.write("\t\tboxSizingNeeded = !support.boxSizingReliable() || extra,\n");
      out.write("\t\tisBorderBox = boxSizingNeeded &&\n");
      out.write("\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n");
      out.write("\t\tvalueIsBorderBox = isBorderBox,\n");
      out.write("\n");
      out.write("\t\tval = curCSS( elem, dimension, styles ),\n");
      out.write("\t\toffsetProp = \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );\n");
      out.write("\n");
      out.write("\t// Support: Firefox <=54\n");
      out.write("\t// Return a confounding non-pixel value or feign ignorance, as appropriate.\n");
      out.write("\tif ( rnumnonpx.test( val ) ) {\n");
      out.write("\t\tif ( !extra ) {\n");
      out.write("\t\t\treturn val;\n");
      out.write("\t\t}\n");
      out.write("\t\tval = \"auto\";\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\n");
      out.write("\t// Fall back to offsetWidth/offsetHeight when value is \"auto\"\n");
      out.write("\t// This happens for inline elements with no explicit setting (gh-3571)\n");
      out.write("\t// Support: Android <=4.1 - 4.3 only\n");
      out.write("\t// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)\n");
      out.write("\t// Support: IE 9-11 only\n");
      out.write("\t// Also use offsetWidth/offsetHeight for when box sizing is unreliable\n");
      out.write("\t// We use getClientRects() to check for hidden/disconnected.\n");
      out.write("\t// In those cases, the computed value can be trusted to be border-box\n");
      out.write("\tif ( ( !support.boxSizingReliable() && isBorderBox ||\n");
      out.write("\t\tval === \"auto\" ||\n");
      out.write("\t\t!parseFloat( val ) && jQuery.css( elem, \"display\", false, styles ) === \"inline\" ) &&\n");
      out.write("\t\telem.getClientRects().length ) {\n");
      out.write("\n");
      out.write("\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\n");
      out.write("\n");
      out.write("\t\t// Where available, offsetWidth/offsetHeight approximate border box dimensions.\n");
      out.write("\t\t// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the\n");
      out.write("\t\t// retrieved value as a content box dimension.\n");
      out.write("\t\tvalueIsBorderBox = offsetProp in elem;\n");
      out.write("\t\tif ( valueIsBorderBox ) {\n");
      out.write("\t\t\tval = elem[ offsetProp ];\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// Normalize \"\" and auto\n");
      out.write("\tval = parseFloat( val ) || 0;\n");
      out.write("\n");
      out.write("\t// Adjust for the element's box model\n");
      out.write("\treturn ( val +\n");
      out.write("\t\tboxModelAdjustment(\n");
      out.write("\t\t\telem,\n");
      out.write("\t\t\tdimension,\n");
      out.write("\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\n");
      out.write("\t\t\tvalueIsBorderBox,\n");
      out.write("\t\t\tstyles,\n");
      out.write("\n");
      out.write("\t\t\t// Provide the current computed size to request scroll gutter calculation (gh-3589)\n");
      out.write("\t\t\tval\n");
      out.write("\t\t)\n");
      out.write("\t) + \"px\";\n");
      out.write("}\n");
      out.write("\n");
      out.write("jQuery.extend( {\n");
      out.write("\n");
      out.write("\t// Add in style property hooks for overriding the default\n");
      out.write("\t// behavior of getting and setting a style property\n");
      out.write("\tcssHooks: {\n");
      out.write("\t\topacity: {\n");
      out.write("\t\t\tget: function( elem, computed ) {\n");
      out.write("\t\t\t\tif ( computed ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t// We should always get a number back from opacity\n");
      out.write("\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\n");
      out.write("\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\t// Don't automatically add \"px\" to these possibly-unitless properties\n");
      out.write("\tcssNumber: {\n");
      out.write("\t\t\"animationIterationCount\": true,\n");
      out.write("\t\t\"columnCount\": true,\n");
      out.write("\t\t\"fillOpacity\": true,\n");
      out.write("\t\t\"flexGrow\": true,\n");
      out.write("\t\t\"flexShrink\": true,\n");
      out.write("\t\t\"fontWeight\": true,\n");
      out.write("\t\t\"gridArea\": true,\n");
      out.write("\t\t\"gridColumn\": true,\n");
      out.write("\t\t\"gridColumnEnd\": true,\n");
      out.write("\t\t\"gridColumnStart\": true,\n");
      out.write("\t\t\"gridRow\": true,\n");
      out.write("\t\t\"gridRowEnd\": true,\n");
      out.write("\t\t\"gridRowStart\": true,\n");
      out.write("\t\t\"lineHeight\": true,\n");
      out.write("\t\t\"opacity\": true,\n");
      out.write("\t\t\"order\": true,\n");
      out.write("\t\t\"orphans\": true,\n");
      out.write("\t\t\"widows\": true,\n");
      out.write("\t\t\"zIndex\": true,\n");
      out.write("\t\t\"zoom\": true\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\t// Add in properties whose names you wish to fix before\n");
      out.write("\t// setting or getting the value\n");
      out.write("\tcssProps: {},\n");
      out.write("\n");
      out.write("\t// Get and set the style property on a DOM Node\n");
      out.write("\tstyle: function( elem, name, value, extra ) {\n");
      out.write("\n");
      out.write("\t\t// Don't set styles on text and comment nodes\n");
      out.write("\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n");
      out.write("\t\t\treturn;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Make sure that we're working with the right name\n");
      out.write("\t\tvar ret, type, hooks,\n");
      out.write("\t\t\torigName = camelCase( name ),\n");
      out.write("\t\t\tisCustomProp = rcustomProp.test( name ),\n");
      out.write("\t\t\tstyle = elem.style;\n");
      out.write("\n");
      out.write("\t\t// Make sure that we're working with the right name. We don't\n");
      out.write("\t\t// want to query the value if it is a CSS custom property\n");
      out.write("\t\t// since they are user-defined.\n");
      out.write("\t\tif ( !isCustomProp ) {\n");
      out.write("\t\t\tname = finalPropName( origName );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Gets hook for the prefixed version, then unprefixed version\n");
      out.write("\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n");
      out.write("\n");
      out.write("\t\t// Check if we're setting a value\n");
      out.write("\t\tif ( value !== undefined ) {\n");
      out.write("\t\t\ttype = typeof value;\n");
      out.write("\n");
      out.write("\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (#7345)\n");
      out.write("\t\t\tif ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n");
      out.write("\t\t\t\tvalue = adjustCSS( elem, name, ret );\n");
      out.write("\n");
      out.write("\t\t\t\t// Fixes bug #9237\n");
      out.write("\t\t\t\ttype = \"number\";\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Make sure that null and NaN values aren't set (#7116)\n");
      out.write("\t\t\tif ( value == null || value !== value ) {\n");
      out.write("\t\t\t\treturn;\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\n");
      out.write("\t\t\t// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append\n");
      out.write("\t\t\t// \"px\" to a few hardcoded values.\n");
      out.write("\t\t\tif ( type === \"number\" && !isCustomProp ) {\n");
      out.write("\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// background-* props affect original clone's values\n");
      out.write("\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\n");
      out.write("\t\t\t\tstyle[ name ] = \"inherit\";\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n");
      out.write("\t\t\tif ( !hooks || !( \"set\" in hooks ) ||\n");
      out.write("\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n");
      out.write("\n");
      out.write("\t\t\t\tif ( isCustomProp ) {\n");
      out.write("\t\t\t\t\tstyle.setProperty( name, value );\n");
      out.write("\t\t\t\t} else {\n");
      out.write("\t\t\t\t\tstyle[ name ] = value;\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t} else {\n");
      out.write("\n");
      out.write("\t\t\t// If a hook was provided get the non-computed value from there\n");
      out.write("\t\t\tif ( hooks && \"get\" in hooks &&\n");
      out.write("\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n");
      out.write("\n");
      out.write("\t\t\t\treturn ret;\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Otherwise just get the value from the style object\n");
      out.write("\t\t\treturn style[ name ];\n");
      out.write("\t\t}\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tcss: function( elem, name, extra, styles ) {\n");
      out.write("\t\tvar val, num, hooks,\n");
      out.write("\t\t\torigName = camelCase( name ),\n");
      out.write("\t\t\tisCustomProp = rcustomProp.test( name );\n");
      out.write("\n");
      out.write("\t\t// Make sure that we're working with the right name. We don't\n");
      out.write("\t\t// want to modify the value if it is a CSS custom property\n");
      out.write("\t\t// since they are user-defined.\n");
      out.write("\t\tif ( !isCustomProp ) {\n");
      out.write("\t\t\tname = finalPropName( origName );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Try prefixed name followed by the unprefixed name\n");
      out.write("\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n");
      out.write("\n");
      out.write("\t\t// If a hook was provided get the computed value from there\n");
      out.write("\t\tif ( hooks && \"get\" in hooks ) {\n");
      out.write("\t\t\tval = hooks.get( elem, true, extra );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Otherwise, if a way to get the computed value exists, use that\n");
      out.write("\t\tif ( val === undefined ) {\n");
      out.write("\t\t\tval = curCSS( elem, name, styles );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Convert \"normal\" to computed value\n");
      out.write("\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\n");
      out.write("\t\t\tval = cssNormalTransform[ name ];\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n");
      out.write("\t\tif ( extra === \"\" || extra ) {\n");
      out.write("\t\t\tnum = parseFloat( val );\n");
      out.write("\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\treturn val;\n");
      out.write("\t}\n");
      out.write("} );\n");
      out.write("\n");
      out.write("jQuery.each( [ \"height\", \"width\" ], function( i, dimension ) {\n");
      out.write("\tjQuery.cssHooks[ dimension ] = {\n");
      out.write("\t\tget: function( elem, computed, extra ) {\n");
      out.write("\t\t\tif ( computed ) {\n");
      out.write("\n");
      out.write("\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n");
      out.write("\t\t\t\t// but it must have a current display style that would benefit\n");
      out.write("\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\n");
      out.write("\n");
      out.write("\t\t\t\t\t// Support: Safari 8+\n");
      out.write("\t\t\t\t\t// Table columns in Safari have non-zero offsetWidth & zero\n");
      out.write("\t\t\t\t\t// getBoundingClientRect().width unless display is changed.\n");
      out.write("\t\t\t\t\t// Support: IE <=11 only\n");
      out.write("\t\t\t\t\t// Running getBoundingClientRect on a disconnected node\n");
      out.write("\t\t\t\t\t// in IE throws an error.\n");
      out.write("\t\t\t\t\t( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?\n");
      out.write("\t\t\t\t\t\tswap( elem, cssShow, function() {\n");
      out.write("\t\t\t\t\t\t\treturn getWidthOrHeight( elem, dimension, extra );\n");
      out.write("\t\t\t\t\t\t} ) :\n");
      out.write("\t\t\t\t\t\tgetWidthOrHeight( elem, dimension, extra );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t},\n");
      out.write("\n");
      out.write("\t\tset: function( elem, value, extra ) {\n");
      out.write("\t\t\tvar matches,\n");
      out.write("\t\t\t\tstyles = getStyles( elem ),\n");
      out.write("\n");
      out.write("\t\t\t\t// Only read styles.position if the test has a chance to fail\n");
      out.write("\t\t\t\t// to avoid forcing a reflow.\n");
      out.write("\t\t\t\tscrollboxSizeBuggy = !support.scrollboxSize() &&\n");
      out.write("\t\t\t\t\tstyles.position === \"absolute\",\n");
      out.write("\n");
      out.write("\t\t\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)\n");
      out.write("\t\t\t\tboxSizingNeeded = scrollboxSizeBuggy || extra,\n");
      out.write("\t\t\t\tisBorderBox = boxSizingNeeded &&\n");
      out.write("\t\t\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n");
      out.write("\t\t\t\tsubtract = extra ?\n");
      out.write("\t\t\t\t\tboxModelAdjustment(\n");
      out.write("\t\t\t\t\t\telem,\n");
      out.write("\t\t\t\t\t\tdimension,\n");
      out.write("\t\t\t\t\t\textra,\n");
      out.write("\t\t\t\t\t\tisBorderBox,\n");
      out.write("\t\t\t\t\t\tstyles\n");
      out.write("\t\t\t\t\t) :\n");
      out.write("\t\t\t\t\t0;\n");
      out.write("\n");
      out.write("\t\t\t// Account for unreliable border-box dimensions by comparing offset* to computed and\n");
      out.write("\t\t\t// faking a content-box to get border and padding (gh-3699)\n");
      out.write("\t\t\tif ( isBorderBox && scrollboxSizeBuggy ) {\n");
      out.write("\t\t\t\tsubtract -= Math.ceil(\n");
      out.write("\t\t\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n");
      out.write("\t\t\t\t\tparseFloat( styles[ dimension ] ) -\n");
      out.write("\t\t\t\t\tboxModelAdjustment( elem, dimension, \"border\", false, styles ) -\n");
      out.write("\t\t\t\t\t0.5\n");
      out.write("\t\t\t\t);\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Convert to pixels if value adjustment is needed\n");
      out.write("\t\t\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&\n");
      out.write("\t\t\t\t( matches[ 3 ] || \"px\" ) !== \"px\" ) {\n");
      out.write("\n");
      out.write("\t\t\t\telem.style[ dimension ] = value;\n");
      out.write("\t\t\t\tvalue = jQuery.css( elem, dimension );\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\treturn setPositiveNumber( elem, value, subtract );\n");
      out.write("\t\t}\n");
      out.write("\t};\n");
      out.write("} );\n");
      out.write("\n");
      out.write("jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n");
      out.write("\tfunction( elem, computed ) {\n");
      out.write("\t\tif ( computed ) {\n");
      out.write("\t\t\treturn ( parseFloat( curCSS( elem, \"marginLeft\" ) ) ||\n");
      out.write("\t\t\t\telem.getBoundingClientRect().left -\n");
      out.write("\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {\n");
      out.write("\t\t\t\t\t\treturn elem.getBoundingClientRect().left;\n");
      out.write("\t\t\t\t\t} )\n");
      out.write("\t\t\t\t) + \"px\";\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write(");\n");
      out.write("\n");
      out.write("// These hooks are used by animate to expand properties\n");
      out.write("jQuery.each( {\n");
      out.write("\tmargin: \"\",\n");
      out.write("\tpadding: \"\",\n");
      out.write("\tborder: \"Width\"\n");
      out.write("}, function( prefix, suffix ) {\n");
      out.write("\tjQuery.cssHooks[ prefix + suffix ] = {\n");
      out.write("\t\texpand: function( value ) {\n");
      out.write("\t\t\tvar i = 0,\n");
      out.write("\t\t\t\texpanded = {},\n");
      out.write("\n");
      out.write("\t\t\t\t// Assumes a single number if not a string\n");
      out.write("\t\t\t\tparts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\n");
      out.write("\n");
      out.write("\t\t\tfor ( ; i < 4; i++ ) {\n");
      out.write("\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\n");
      out.write("\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\treturn expanded;\n");
      out.write("\t\t}\n");
      out.write("\t};\n");
      out.write("\n");
      out.write("\tif ( prefix !== \"margin\" ) {\n");
      out.write("\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n");
      out.write("\t}\n");
      out.write("} );\n");
      out.write("\n");
      out.write("jQuery.fn.extend( {\n");
      out.write("\tcss: function( name, value ) {\n");
      out.write("\t\treturn access( this, function( elem, name, value ) {\n");
      out.write("\t\t\tvar styles, len,\n");
      out.write("\t\t\t\tmap = {},\n");
      out.write("\t\t\t\ti = 0;\n");
      out.write("\n");
      out.write("\t\t\tif ( Array.isArray( name ) ) {\n");
      out.write("\t\t\t\tstyles = getStyles( elem );\n");
      out.write("\t\t\t\tlen = name.length;\n");
      out.write("\n");
      out.write("\t\t\t\tfor ( ; i < len; i++ ) {\n");
      out.write("\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\treturn map;\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\treturn value !== undefined ?\n");
      out.write("\t\t\t\tjQuery.style( elem, name, value ) :\n");
      out.write("\t\t\t\tjQuery.css( elem, name );\n");
      out.write("\t\t}, name, value, arguments.length > 1 );\n");
      out.write("\t}\n");
      out.write("} );\n");
      out.write("\n");
      out.write("\n");
      out.write("function Tween( elem, options, prop, end, easing ) {\n");
      out.write("\treturn new Tween.prototype.init( elem, options, prop, end, easing );\n");
      out.write("}\n");
      out.write("jQuery.Tween = Tween;\n");
      out.write("\n");
      out.write("Tween.prototype = {\n");
      out.write("\tconstructor: Tween,\n");
      out.write("\tinit: function( elem, options, prop, end, easing, unit ) {\n");
      out.write("\t\tthis.elem = elem;\n");
      out.write("\t\tthis.prop = prop;\n");
      out.write("\t\tthis.easing = easing || jQuery.easing._default;\n");
      out.write("\t\tthis.options = options;\n");
      out.write("\t\tthis.start = this.now = this.cur();\n");
      out.write("\t\tthis.end = end;\n");
      out.write("\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n");
      out.write("\t},\n");
      out.write("\tcur: function() {\n");
      out.write("\t\tvar hooks = Tween.propHooks[ this.prop ];\n");
      out.write("\n");
      out.write("\t\treturn hooks && hooks.get ?\n");
      out.write("\t\t\thooks.get( this ) :\n");
      out.write("\t\t\tTween.propHooks._default.get( this );\n");
      out.write("\t},\n");
      out.write("\trun: function( percent ) {\n");
      out.write("\t\tvar eased,\n");
      out.write("\t\t\thooks = Tween.propHooks[ this.prop ];\n");
      out.write("\n");
      out.write("\t\tif ( this.options.duration ) {\n");
      out.write("\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\n");
      out.write("\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\n");
      out.write("\t\t\t);\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\tthis.pos = eased = percent;\n");
      out.write("\t\t}\n");
      out.write("\t\tthis.now = ( this.end - this.start ) * eased + this.start;\n");
      out.write("\n");
      out.write("\t\tif ( this.options.step ) {\n");
      out.write("\t\t\tthis.options.step.call( this.elem, this.now, this );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tif ( hooks && hooks.set ) {\n");
      out.write("\t\t\thooks.set( this );\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\tTween.propHooks._default.set( this );\n");
      out.write("\t\t}\n");
      out.write("\t\treturn this;\n");
      out.write("\t}\n");
      out.write("};\n");
      out.write("\n");
      out.write("Tween.prototype.init.prototype = Tween.prototype;\n");
      out.write("\n");
      out.write("Tween.propHooks = {\n");
      out.write("\t_default: {\n");
      out.write("\t\tget: function( tween ) {\n");
      out.write("\t\t\tvar result;\n");
      out.write("\n");
      out.write("\t\t\t// Use a property on the element directly when it is not a DOM element,\n");
      out.write("\t\t\t// or when there is no matching style property that exists.\n");
      out.write("\t\t\tif ( tween.elem.nodeType !== 1 ||\n");
      out.write("\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n");
      out.write("\t\t\t\treturn tween.elem[ tween.prop ];\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n");
      out.write("\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n");
      out.write("\t\t\t// Simple values such as \"10px\" are parsed to Float;\n");
      out.write("\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\n");
      out.write("\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\n");
      out.write("\n");
      out.write("\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n");
      out.write("\t\t\treturn !result || result === \"auto\" ? 0 : result;\n");
      out.write("\t\t},\n");
      out.write("\t\tset: function( tween ) {\n");
      out.write("\n");
      out.write("\t\t\t// Use step hook for back compat.\n");
      out.write("\t\t\t// Use cssHook if its there.\n");
      out.write("\t\t\t// Use .style if available and use plain properties where available.\n");
      out.write("\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\n");
      out.write("\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\n");
      out.write("\t\t\t} else if ( tween.elem.nodeType === 1 && (\n");
      out.write("\t\t\t\t\tjQuery.cssHooks[ tween.prop ] ||\n");
      out.write("\t\t\t\t\ttween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {\n");
      out.write("\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n");
      out.write("\t\t\t} else {\n");
      out.write("\t\t\t\ttween.elem[ tween.prop ] = tween.now;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("};\n");
      out.write("\n");
      out.write("// Support: IE <=9 only\n");
      out.write("// Panic based approach to setting things on disconnected nodes\n");
      out.write("Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n");
      out.write("\tset: function( tween ) {\n");
      out.write("\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\n");
      out.write("\t\t\ttween.elem[ tween.prop ] = tween.now;\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("};\n");
      out.write("\n");
      out.write("jQuery.easing = {\n");
      out.write("\tlinear: function( p ) {\n");
      out.write("\t\treturn p;\n");
      out.write("\t},\n");
      out.write("\tswing: function( p ) {\n");
      out.write("\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\n");
      out.write("\t},\n");
      out.write("\t_default: \"swing\"\n");
      out.write("};\n");
      out.write("\n");
      out.write("jQuery.fx = Tween.prototype.init;\n");
      out.write("\n");
      out.write("// Back compat <1.8 extension point\n");
      out.write("jQuery.fx.step = {};\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("var\n");
      out.write("\tfxNow, inProgress,\n");
      out.write("\trfxtypes = /^(?:toggle|show|hide)$/,\n");
      out.write("\trrun = /queueHooks$/;\n");
      out.write("\n");
      out.write("function schedule() {\n");
      out.write("\tif ( inProgress ) {\n");
      out.write("\t\tif ( document.hidden === false && window.requestAnimationFrame ) {\n");
      out.write("\t\t\twindow.requestAnimationFrame( schedule );\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\twindow.setTimeout( schedule, jQuery.fx.interval );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tjQuery.fx.tick();\n");
      out.write("\t}\n");
      out.write("}\n");
      out.write("\n");
      out.write("// Animations created synchronously will run synchronously\n");
      out.write("function createFxNow() {\n");
      out.write("\twindow.setTimeout( function() {\n");
      out.write("\t\tfxNow = undefined;\n");
      out.write("\t} );\n");
      out.write("\treturn ( fxNow = Date.now() );\n");
      out.write("}\n");
      out.write("\n");
      out.write("// Generate parameters to create a standard animation\n");
      out.write("function genFx( type, includeWidth ) {\n");
      out.write("\tvar which,\n");
      out.write("\t\ti = 0,\n");
      out.write("\t\tattrs = { height: type };\n");
      out.write("\n");
      out.write("\t// If we include width, step value is 1 to do all cssExpand values,\n");
      out.write("\t// otherwise step value is 2 to skip over Left and Right\n");
      out.write("\tincludeWidth = includeWidth ? 1 : 0;\n");
      out.write("\tfor ( ; i < 4; i += 2 - includeWidth ) {\n");
      out.write("\t\twhich = cssExpand[ i ];\n");
      out.write("\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tif ( includeWidth ) {\n");
      out.write("\t\tattrs.opacity = attrs.width = type;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\treturn attrs;\n");
      out.write("}\n");
      out.write("\n");
      out.write("function createTween( value, prop, animation ) {\n");
      out.write("\tvar tween,\n");
      out.write("\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\n");
      out.write("\t\tindex = 0,\n");
      out.write("\t\tlength = collection.length;\n");
      out.write("\tfor ( ; index < length; index++ ) {\n");
      out.write("\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n");
      out.write("\n");
      out.write("\t\t\t// We're done with this property\n");
      out.write("\t\t\treturn tween;\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("}\n");
      out.write("\n");
      out.write("function defaultPrefilter( elem, props, opts ) {\n");
      out.write("\tvar prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,\n");
      out.write("\t\tisBox = \"width\" in props || \"height\" in props,\n");
      out.write("\t\tanim = this,\n");
      out.write("\t\torig = {},\n");
      out.write("\t\tstyle = elem.style,\n");
      out.write("\t\thidden = elem.nodeType && isHiddenWithinTree( elem ),\n");
      out.write("\t\tdataShow = dataPriv.get( elem, \"fxshow\" );\n");
      out.write("\n");
      out.write("\t// Queue-skipping animations hijack the fx hooks\n");
      out.write("\tif ( !opts.queue ) {\n");
      out.write("\t\thooks = jQuery._queueHooks( elem, \"fx\" );\n");
      out.write("\t\tif ( hooks.unqueued == null ) {\n");
      out.write("\t\t\thooks.unqueued = 0;\n");
      out.write("\t\t\toldfire = hooks.empty.fire;\n");
      out.write("\t\t\thooks.empty.fire = function() {\n");
      out.write("\t\t\t\tif ( !hooks.unqueued ) {\n");
      out.write("\t\t\t\t\toldfire();\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t};\n");
      out.write("\t\t}\n");
      out.write("\t\thooks.unqueued++;\n");
      out.write("\n");
      out.write("\t\tanim.always( function() {\n");
      out.write("\n");
      out.write("\t\t\t// Ensure the complete handler is called before this completes\n");
      out.write("\t\t\tanim.always( function() {\n");
      out.write("\t\t\t\thooks.unqueued--;\n");
      out.write("\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\n");
      out.write("\t\t\t\t\thooks.empty.fire();\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t} );\n");
      out.write("\t\t} );\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// Detect show/hide animations\n");
      out.write("\tfor ( prop in props ) {\n");
      out.write("\t\tvalue = props[ prop ];\n");
      out.write("\t\tif ( rfxtypes.test( value ) ) {\n");
      out.write("\t\t\tdelete props[ prop ];\n");
      out.write("\t\t\ttoggle = toggle || value === \"toggle\";\n");
      out.write("\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n");
      out.write("\n");
      out.write("\t\t\t\t// Pretend to be hidden if this is a \"show\" and\n");
      out.write("\t\t\t\t// there is still data from a stopped show/hide\n");
      out.write("\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\n");
      out.write("\t\t\t\t\thidden = true;\n");
      out.write("\n");
      out.write("\t\t\t\t// Ignore all other no-op show/hide data\n");
      out.write("\t\t\t\t} else {\n");
      out.write("\t\t\t\t\tcontinue;\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// Bail out if this is a no-op like .hide().hide()\n");
      out.write("\tpropTween = !jQuery.isEmptyObject( props );\n");
      out.write("\tif ( !propTween && jQuery.isEmptyObject( orig ) ) {\n");
      out.write("\t\treturn;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// Restrict \"overflow\" and \"display\" styles during box animations\n");
      out.write("\tif ( isBox && elem.nodeType === 1 ) {\n");
      out.write("\n");
      out.write("\t\t// Support: IE <=9 - 11, Edge 12 - 15\n");
      out.write("\t\t// Record all 3 overflow attributes because IE does not infer the shorthand\n");
      out.write("\t\t// from identically-valued overflowX and overflowY and Edge just mirrors\n");
      out.write("\t\t// the overflowX value there.\n");
      out.write("\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n");
      out.write("\n");
      out.write("\t\t// Identify a display type, preferring old show/hide data over the CSS cascade\n");
      out.write("\t\trestoreDisplay = dataShow && dataShow.display;\n");
      out.write("\t\tif ( restoreDisplay == null ) {\n");
      out.write("\t\t\trestoreDisplay = dataPriv.get( elem, \"display\" );\n");
      out.write("\t\t}\n");
      out.write("\t\tdisplay = jQuery.css( elem, \"display\" );\n");
      out.write("\t\tif ( display === \"none\" ) {\n");
      out.write("\t\t\tif ( restoreDisplay ) {\n");
      out.write("\t\t\t\tdisplay = restoreDisplay;\n");
      out.write("\t\t\t} else {\n");
      out.write("\n");
      out.write("\t\t\t\t// Get nonempty value(s) by temporarily forcing visibility\n");
      out.write("\t\t\t\tshowHide( [ elem ], true );\n");
      out.write("\t\t\t\trestoreDisplay = elem.style.display || restoreDisplay;\n");
      out.write("\t\t\t\tdisplay = jQuery.css( elem, \"display\" );\n");
      out.write("\t\t\t\tshowHide( [ elem ] );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Animate inline elements as inline-block\n");
      out.write("\t\tif ( display === \"inline\" || display === \"inline-block\" && restoreDisplay != null ) {\n");
      out.write("\t\t\tif ( jQuery.css( elem, \"float\" ) === \"none\" ) {\n");
      out.write("\n");
      out.write("\t\t\t\t// Restore the original display value at the end of pure show/hide animations\n");
      out.write("\t\t\t\tif ( !propTween ) {\n");
      out.write("\t\t\t\t\tanim.done( function() {\n");
      out.write("\t\t\t\t\t\tstyle.display = restoreDisplay;\n");
      out.write("\t\t\t\t\t} );\n");
      out.write("\t\t\t\t\tif ( restoreDisplay == null ) {\n");
      out.write("\t\t\t\t\t\tdisplay = style.display;\n");
      out.write("\t\t\t\t\t\trestoreDisplay = display === \"none\" ? \"\" : display;\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\tstyle.display = \"inline-block\";\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tif ( opts.overflow ) {\n");
      out.write("\t\tstyle.overflow = \"hidden\";\n");
      out.write("\t\tanim.always( function() {\n");
      out.write("\t\t\tstyle.overflow = opts.overflow[ 0 ];\n");
      out.write("\t\t\tstyle.overflowX = opts.overflow[ 1 ];\n");
      out.write("\t\t\tstyle.overflowY = opts.overflow[ 2 ];\n");
      out.write("\t\t} );\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// Implement show/hide animations\n");
      out.write("\tpropTween = false;\n");
      out.write("\tfor ( prop in orig ) {\n");
      out.write("\n");
      out.write("\t\t// General show/hide setup for this element animation\n");
      out.write("\t\tif ( !propTween ) {\n");
      out.write("\t\t\tif ( dataShow ) {\n");
      out.write("\t\t\t\tif ( \"hidden\" in dataShow ) {\n");
      out.write("\t\t\t\t\thidden = dataShow.hidden;\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t} else {\n");
      out.write("\t\t\t\tdataShow = dataPriv.access( elem, \"fxshow\", { display: restoreDisplay } );\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\n");
      out.write("\t\t\tif ( toggle ) {\n");
      out.write("\t\t\t\tdataShow.hidden = !hidden;\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Show elements before animating them\n");
      out.write("\t\t\tif ( hidden ) {\n");
      out.write("\t\t\t\tshowHide( [ elem ], true );\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t/* eslint-disable no-loop-func */\n");
      out.write("\n");
      out.write("\t\t\tanim.done( function() {\n");
      out.write("\n");
      out.write("\t\t\t/* eslint-enable no-loop-func */\n");
      out.write("\n");
      out.write("\t\t\t\t// The final step of a \"hide\" animation is actually hiding the element\n");
      out.write("\t\t\t\tif ( !hidden ) {\n");
      out.write("\t\t\t\t\tshowHide( [ elem ] );\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\tdataPriv.remove( elem, \"fxshow\" );\n");
      out.write("\t\t\t\tfor ( prop in orig ) {\n");
      out.write("\t\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t} );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Per-property setup\n");
      out.write("\t\tpropTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n");
      out.write("\t\tif ( !( prop in dataShow ) ) {\n");
      out.write("\t\t\tdataShow[ prop ] = propTween.start;\n");
      out.write("\t\t\tif ( hidden ) {\n");
      out.write("\t\t\t\tpropTween.end = propTween.start;\n");
      out.write("\t\t\t\tpropTween.start = 0;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("}\n");
      out.write("\n");
      out.write("function propFilter( props, specialEasing ) {\n");
      out.write("\tvar index, name, easing, value, hooks;\n");
      out.write("\n");
      out.write("\t// camelCase, specialEasing and expand cssHook pass\n");
      out.write("\tfor ( index in props ) {\n");
      out.write("\t\tname = camelCase( index );\n");
      out.write("\t\teasing = specialEasing[ name ];\n");
      out.write("\t\tvalue = props[ index ];\n");
      out.write("\t\tif ( Array.isArray( value ) ) {\n");
      out.write("\t\t\teasing = value[ 1 ];\n");
      out.write("\t\t\tvalue = props[ index ] = value[ 0 ];\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tif ( index !== name ) {\n");
      out.write("\t\t\tprops[ name ] = value;\n");
      out.write("\t\t\tdelete props[ index ];\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\thooks = jQuery.cssHooks[ name ];\n");
      out.write("\t\tif ( hooks && \"expand\" in hooks ) {\n");
      out.write("\t\t\tvalue = hooks.expand( value );\n");
      out.write("\t\t\tdelete props[ name ];\n");
      out.write("\n");
      out.write("\t\t\t// Not quite $.extend, this won't overwrite existing keys.\n");
      out.write("\t\t\t// Reusing 'index' because we have the correct \"name\"\n");
      out.write("\t\t\tfor ( index in value ) {\n");
      out.write("\t\t\t\tif ( !( index in props ) ) {\n");
      out.write("\t\t\t\t\tprops[ index ] = value[ index ];\n");
      out.write("\t\t\t\t\tspecialEasing[ index ] = easing;\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\tspecialEasing[ name ] = easing;\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("}\n");
      out.write("\n");
      out.write("function Animation( elem, properties, options ) {\n");
      out.write("\tvar result,\n");
      out.write("\t\tstopped,\n");
      out.write("\t\tindex = 0,\n");
      out.write("\t\tlength = Animation.prefilters.length,\n");
      out.write("\t\tdeferred = jQuery.Deferred().always( function() {\n");
      out.write("\n");
      out.write("\t\t\t// Don't match elem in the :animated selector\n");
      out.write("\t\t\tdelete tick.elem;\n");
      out.write("\t\t} ),\n");
      out.write("\t\ttick = function() {\n");
      out.write("\t\t\tif ( stopped ) {\n");
      out.write("\t\t\t\treturn false;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\tvar currentTime = fxNow || createFxNow(),\n");
      out.write("\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n");
      out.write("\n");
      out.write("\t\t\t\t// Support: Android 2.3 only\n");
      out.write("\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\n");
      out.write("\t\t\t\ttemp = remaining / animation.duration || 0,\n");
      out.write("\t\t\t\tpercent = 1 - temp,\n");
      out.write("\t\t\t\tindex = 0,\n");
      out.write("\t\t\t\tlength = animation.tweens.length;\n");
      out.write("\n");
      out.write("\t\t\tfor ( ; index < length; index++ ) {\n");
      out.write("\t\t\t\tanimation.tweens[ index ].run( percent );\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\n");
      out.write("\n");
      out.write("\t\t\t// If there's more to do, yield\n");
      out.write("\t\t\tif ( percent < 1 && length ) {\n");
      out.write("\t\t\t\treturn remaining;\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// If this was an empty animation, synthesize a final progress notification\n");
      out.write("\t\t\tif ( !length ) {\n");
      out.write("\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Resolve the animation and report its conclusion\n");
      out.write("\t\t\tdeferred.resolveWith( elem, [ animation ] );\n");
      out.write("\t\t\treturn false;\n");
      out.write("\t\t},\n");
      out.write("\t\tanimation = deferred.promise( {\n");
      out.write("\t\t\telem: elem,\n");
      out.write("\t\t\tprops: jQuery.extend( {}, properties ),\n");
      out.write("\t\t\topts: jQuery.extend( true, {\n");
      out.write("\t\t\t\tspecialEasing: {},\n");
      out.write("\t\t\t\teasing: jQuery.easing._default\n");
      out.write("\t\t\t}, options ),\n");
      out.write("\t\t\toriginalProperties: properties,\n");
      out.write("\t\t\toriginalOptions: options,\n");
      out.write("\t\t\tstartTime: fxNow || createFxNow(),\n");
      out.write("\t\t\tduration: options.duration,\n");
      out.write("\t\t\ttweens: [],\n");
      out.write("\t\t\tcreateTween: function( prop, end ) {\n");
      out.write("\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\n");
      out.write("\t\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\n");
      out.write("\t\t\t\tanimation.tweens.push( tween );\n");
      out.write("\t\t\t\treturn tween;\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tstop: function( gotoEnd ) {\n");
      out.write("\t\t\t\tvar index = 0,\n");
      out.write("\n");
      out.write("\t\t\t\t\t// If we are going to the end, we want to run all the tweens\n");
      out.write("\t\t\t\t\t// otherwise we skip this part\n");
      out.write("\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n");
      out.write("\t\t\t\tif ( stopped ) {\n");
      out.write("\t\t\t\t\treturn this;\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\tstopped = true;\n");
      out.write("\t\t\t\tfor ( ; index < length; index++ ) {\n");
      out.write("\t\t\t\t\tanimation.tweens[ index ].run( 1 );\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n");
      out.write("\t\t\t\tif ( gotoEnd ) {\n");
      out.write("\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n");
      out.write("\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\n");
      out.write("\t\t\t\t} else {\n");
      out.write("\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\treturn this;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t} ),\n");
      out.write("\t\tprops = animation.props;\n");
      out.write("\n");
      out.write("\tpropFilter( props, animation.opts.specialEasing );\n");
      out.write("\n");
      out.write("\tfor ( ; index < length; index++ ) {\n");
      out.write("\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n");
      out.write("\t\tif ( result ) {\n");
      out.write("\t\t\tif ( isFunction( result.stop ) ) {\n");
      out.write("\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n");
      out.write("\t\t\t\t\tresult.stop.bind( result );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\treturn result;\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tjQuery.map( props, createTween, animation );\n");
      out.write("\n");
      out.write("\tif ( isFunction( animation.opts.start ) ) {\n");
      out.write("\t\tanimation.opts.start.call( elem, animation );\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// Attach callbacks from options\n");
      out.write("\tanimation\n");
      out.write("\t\t.progress( animation.opts.progress )\n");
      out.write("\t\t.done( animation.opts.done, animation.opts.complete )\n");
      out.write("\t\t.fail( animation.opts.fail )\n");
      out.write("\t\t.always( animation.opts.always );\n");
      out.write("\n");
      out.write("\tjQuery.fx.timer(\n");
      out.write("\t\tjQuery.extend( tick, {\n");
      out.write("\t\t\telem: elem,\n");
      out.write("\t\t\tanim: animation,\n");
      out.write("\t\t\tqueue: animation.opts.queue\n");
      out.write("\t\t} )\n");
      out.write("\t);\n");
      out.write("\n");
      out.write("\treturn animation;\n");
      out.write("}\n");
      out.write("\n");
      out.write("jQuery.Animation = jQuery.extend( Animation, {\n");
      out.write("\n");
      out.write("\ttweeners: {\n");
      out.write("\t\t\"*\": [ function( prop, value ) {\n");
      out.write("\t\t\tvar tween = this.createTween( prop, value );\n");
      out.write("\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n");
      out.write("\t\t\treturn tween;\n");
      out.write("\t\t} ]\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\ttweener: function( props, callback ) {\n");
      out.write("\t\tif ( isFunction( props ) ) {\n");
      out.write("\t\t\tcallback = props;\n");
      out.write("\t\t\tprops = [ \"*\" ];\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\tprops = props.match( rnothtmlwhite );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tvar prop,\n");
      out.write("\t\t\tindex = 0,\n");
      out.write("\t\t\tlength = props.length;\n");
      out.write("\n");
      out.write("\t\tfor ( ; index < length; index++ ) {\n");
      out.write("\t\t\tprop = props[ index ];\n");
      out.write("\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n");
      out.write("\t\t\tAnimation.tweeners[ prop ].unshift( callback );\n");
      out.write("\t\t}\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tprefilters: [ defaultPrefilter ],\n");
      out.write("\n");
      out.write("\tprefilter: function( callback, prepend ) {\n");
      out.write("\t\tif ( prepend ) {\n");
      out.write("\t\t\tAnimation.prefilters.unshift( callback );\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\tAnimation.prefilters.push( callback );\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("} );\n");
      out.write("\n");
      out.write("jQuery.speed = function( speed, easing, fn ) {\n");
      out.write("\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n");
      out.write("\t\tcomplete: fn || !fn && easing ||\n");
      out.write("\t\t\tisFunction( speed ) && speed,\n");
      out.write("\t\tduration: speed,\n");
      out.write("\t\teasing: fn && easing || easing && !isFunction( easing ) && easing\n");
      out.write("\t};\n");
      out.write("\n");
      out.write("\t// Go to the end state if fx are off\n");
      out.write("\tif ( jQuery.fx.off ) {\n");
      out.write("\t\topt.duration = 0;\n");
      out.write("\n");
      out.write("\t} else {\n");
      out.write("\t\tif ( typeof opt.duration !== \"number\" ) {\n");
      out.write("\t\t\tif ( opt.duration in jQuery.fx.speeds ) {\n");
      out.write("\t\t\t\topt.duration = jQuery.fx.speeds[ opt.duration ];\n");
      out.write("\n");
      out.write("\t\t\t} else {\n");
      out.write("\t\t\t\topt.duration = jQuery.fx.speeds._default;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// Normalize opt.queue - true/undefined/null -> \"fx\"\n");
      out.write("\tif ( opt.queue == null || opt.queue === true ) {\n");
      out.write("\t\topt.queue = \"fx\";\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// Queueing\n");
      out.write("\topt.old = opt.complete;\n");
      out.write("\n");
      out.write("\topt.complete = function() {\n");
      out.write("\t\tif ( isFunction( opt.old ) ) {\n");
      out.write("\t\t\topt.old.call( this );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tif ( opt.queue ) {\n");
      out.write("\t\t\tjQuery.dequeue( this, opt.queue );\n");
      out.write("\t\t}\n");
      out.write("\t};\n");
      out.write("\n");
      out.write("\treturn opt;\n");
      out.write("};\n");
      out.write("\n");
      out.write("jQuery.fn.extend( {\n");
      out.write("\tfadeTo: function( speed, to, easing, callback ) {\n");
      out.write("\n");
      out.write("\t\t// Show any hidden elements after setting opacity to 0\n");
      out.write("\t\treturn this.filter( isHiddenWithinTree ).css( \"opacity\", 0 ).show()\n");
      out.write("\n");
      out.write("\t\t\t// Animate to the value specified\n");
      out.write("\t\t\t.end().animate( { opacity: to }, speed, easing, callback );\n");
      out.write("\t},\n");
      out.write("\tanimate: function( prop, speed, easing, callback ) {\n");
      out.write("\t\tvar empty = jQuery.isEmptyObject( prop ),\n");
      out.write("\t\t\toptall = jQuery.speed( speed, easing, callback ),\n");
      out.write("\t\t\tdoAnimation = function() {\n");
      out.write("\n");
      out.write("\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n");
      out.write("\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\n");
      out.write("\n");
      out.write("\t\t\t\t// Empty animations, or finishing resolves immediately\n");
      out.write("\t\t\t\tif ( empty || dataPriv.get( this, \"finish\" ) ) {\n");
      out.write("\t\t\t\t\tanim.stop( true );\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t};\n");
      out.write("\t\t\tdoAnimation.finish = doAnimation;\n");
      out.write("\n");
      out.write("\t\treturn empty || optall.queue === false ?\n");
      out.write("\t\t\tthis.each( doAnimation ) :\n");
      out.write("\t\t\tthis.queue( optall.queue, doAnimation );\n");
      out.write("\t},\n");
      out.write("\tstop: function( type, clearQueue, gotoEnd ) {\n");
      out.write("\t\tvar stopQueue = function( hooks ) {\n");
      out.write("\t\t\tvar stop = hooks.stop;\n");
      out.write("\t\t\tdelete hooks.stop;\n");
      out.write("\t\t\tstop( gotoEnd );\n");
      out.write("\t\t};\n");
      out.write("\n");
      out.write("\t\tif ( typeof type !== \"string\" ) {\n");
      out.write("\t\t\tgotoEnd = clearQueue;\n");
      out.write("\t\t\tclearQueue = type;\n");
      out.write("\t\t\ttype = undefined;\n");
      out.write("\t\t}\n");
      out.write("\t\tif ( clearQueue && type !== false ) {\n");
      out.write("\t\t\tthis.queue( type || \"fx\", [] );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\treturn this.each( function() {\n");
      out.write("\t\t\tvar dequeue = true,\n");
      out.write("\t\t\t\tindex = type != null && type + \"queueHooks\",\n");
      out.write("\t\t\t\ttimers = jQuery.timers,\n");
      out.write("\t\t\t\tdata = dataPriv.get( this );\n");
      out.write("\n");
      out.write("\t\t\tif ( index ) {\n");
      out.write("\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\n");
      out.write("\t\t\t\t\tstopQueue( data[ index ] );\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t} else {\n");
      out.write("\t\t\t\tfor ( index in data ) {\n");
      out.write("\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n");
      out.write("\t\t\t\t\t\tstopQueue( data[ index ] );\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\tfor ( index = timers.length; index--; ) {\n");
      out.write("\t\t\t\tif ( timers[ index ].elem === this &&\n");
      out.write("\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\n");
      out.write("\t\t\t\t\tdequeue = false;\n");
      out.write("\t\t\t\t\ttimers.splice( index, 1 );\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Start the next in the queue if the last step wasn't forced.\n");
      out.write("\t\t\t// Timers currently will call their complete callbacks, which\n");
      out.write("\t\t\t// will dequeue but only if they were gotoEnd.\n");
      out.write("\t\t\tif ( dequeue || !gotoEnd ) {\n");
      out.write("\t\t\t\tjQuery.dequeue( this, type );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t} );\n");
      out.write("\t},\n");
      out.write("\tfinish: function( type ) {\n");
      out.write("\t\tif ( type !== false ) {\n");
      out.write("\t\t\ttype = type || \"fx\";\n");
      out.write("\t\t}\n");
      out.write("\t\treturn this.each( function() {\n");
      out.write("\t\t\tvar index,\n");
      out.write("\t\t\t\tdata = dataPriv.get( this ),\n");
      out.write("\t\t\t\tqueue = data[ type + \"queue\" ],\n");
      out.write("\t\t\t\thooks = data[ type + \"queueHooks\" ],\n");
      out.write("\t\t\t\ttimers = jQuery.timers,\n");
      out.write("\t\t\t\tlength = queue ? queue.length : 0;\n");
      out.write("\n");
      out.write("\t\t\t// Enable finishing flag on private data\n");
      out.write("\t\t\tdata.finish = true;\n");
      out.write("\n");
      out.write("\t\t\t// Empty the queue first\n");
      out.write("\t\t\tjQuery.queue( this, type, [] );\n");
      out.write("\n");
      out.write("\t\t\tif ( hooks && hooks.stop ) {\n");
      out.write("\t\t\t\thooks.stop.call( this, true );\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Look for any active animations, and finish them\n");
      out.write("\t\t\tfor ( index = timers.length; index--; ) {\n");
      out.write("\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n");
      out.write("\t\t\t\t\ttimers[ index ].anim.stop( true );\n");
      out.write("\t\t\t\t\ttimers.splice( index, 1 );\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Look for any animations in the old queue and finish them\n");
      out.write("\t\t\tfor ( index = 0; index < length; index++ ) {\n");
      out.write("\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\n");
      out.write("\t\t\t\t\tqueue[ index ].finish.call( this );\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Turn off finishing flag\n");
      out.write("\t\t\tdelete data.finish;\n");
      out.write("\t\t} );\n");
      out.write("\t}\n");
      out.write("} );\n");
      out.write("\n");
      out.write("jQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( i, name ) {\n");
      out.write("\tvar cssFn = jQuery.fn[ name ];\n");
      out.write("\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n");
      out.write("\t\treturn speed == null || typeof speed === \"boolean\" ?\n");
      out.write("\t\t\tcssFn.apply( this, arguments ) :\n");
      out.write("\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\n");
      out.write("\t};\n");
      out.write("} );\n");
      out.write("\n");
      out.write("// Generate shortcuts for custom animations\n");
      out.write("jQuery.each( {\n");
      out.write("\tslideDown: genFx( \"show\" ),\n");
      out.write("\tslideUp: genFx( \"hide\" ),\n");
      out.write("\tslideToggle: genFx( \"toggle\" ),\n");
      out.write("\tfadeIn: { opacity: \"show\" },\n");
      out.write("\tfadeOut: { opacity: \"hide\" },\n");
      out.write("\tfadeToggle: { opacity: \"toggle\" }\n");
      out.write("}, function( name, props ) {\n");
      out.write("\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n");
      out.write("\t\treturn this.animate( props, speed, easing, callback );\n");
      out.write("\t};\n");
      out.write("} );\n");
      out.write("\n");
      out.write("jQuery.timers = [];\n");
      out.write("jQuery.fx.tick = function() {\n");
      out.write("\tvar timer,\n");
      out.write("\t\ti = 0,\n");
      out.write("\t\ttimers = jQuery.timers;\n");
      out.write("\n");
      out.write("\tfxNow = Date.now();\n");
      out.write("\n");
      out.write("\tfor ( ; i < timers.length; i++ ) {\n");
      out.write("\t\ttimer = timers[ i ];\n");
      out.write("\n");
      out.write("\t\t// Run the timer and safely remove it when done (allowing for external removal)\n");
      out.write("\t\tif ( !timer() && timers[ i ] === timer ) {\n");
      out.write("\t\t\ttimers.splice( i--, 1 );\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tif ( !timers.length ) {\n");
      out.write("\t\tjQuery.fx.stop();\n");
      out.write("\t}\n");
      out.write("\tfxNow = undefined;\n");
      out.write("};\n");
      out.write("\n");
      out.write("jQuery.fx.timer = function( timer ) {\n");
      out.write("\tjQuery.timers.push( timer );\n");
      out.write("\tjQuery.fx.start();\n");
      out.write("};\n");
      out.write("\n");
      out.write("jQuery.fx.interval = 13;\n");
      out.write("jQuery.fx.start = function() {\n");
      out.write("\tif ( inProgress ) {\n");
      out.write("\t\treturn;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tinProgress = true;\n");
      out.write("\tschedule();\n");
      out.write("};\n");
      out.write("\n");
      out.write("jQuery.fx.stop = function() {\n");
      out.write("\tinProgress = null;\n");
      out.write("};\n");
      out.write("\n");
      out.write("jQuery.fx.speeds = {\n");
      out.write("\tslow: 600,\n");
      out.write("\tfast: 200,\n");
      out.write("\n");
      out.write("\t// Default speed\n");
      out.write("\t_default: 400\n");
      out.write("};\n");
      out.write("\n");
      out.write("\n");
      out.write("// Based off of the plugin by Clint Helfers, with permission.\n");
      out.write("// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\n");
      out.write("jQuery.fn.delay = function( time, type ) {\n");
      out.write("\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n");
      out.write("\ttype = type || \"fx\";\n");
      out.write("\n");
      out.write("\treturn this.queue( type, function( next, hooks ) {\n");
      out.write("\t\tvar timeout = window.setTimeout( next, time );\n");
      out.write("\t\thooks.stop = function() {\n");
      out.write("\t\t\twindow.clearTimeout( timeout );\n");
      out.write("\t\t};\n");
      out.write("\t} );\n");
      out.write("};\n");
      out.write("\n");
      out.write("\n");
      out.write("( function() {\n");
      out.write("\tvar input = document.createElement( \"input\" ),\n");
      out.write("\t\tselect = document.createElement( \"select\" ),\n");
      out.write("\t\topt = select.appendChild( document.createElement( \"option\" ) );\n");
      out.write("\n");
      out.write("\tinput.type = \"checkbox\";\n");
      out.write("\n");
      out.write("\t// Support: Android <=4.3 only\n");
      out.write("\t// Default value for a checkbox should be \"on\"\n");
      out.write("\tsupport.checkOn = input.value !== \"\";\n");
      out.write("\n");
      out.write("\t// Support: IE <=11 only\n");
      out.write("\t// Must access selectedIndex to make default options select\n");
      out.write("\tsupport.optSelected = opt.selected;\n");
      out.write("\n");
      out.write("\t// Support: IE <=11 only\n");
      out.write("\t// An input loses its value after becoming a radio\n");
      out.write("\tinput = document.createElement( \"input\" );\n");
      out.write("\tinput.value = \"t\";\n");
      out.write("\tinput.type = \"radio\";\n");
      out.write("\tsupport.radioValue = input.value === \"t\";\n");
      out.write("} )();\n");
      out.write("\n");
      out.write("\n");
      out.write("var boolHook,\n");
      out.write("\tattrHandle = jQuery.expr.attrHandle;\n");
      out.write("\n");
      out.write("jQuery.fn.extend( {\n");
      out.write("\tattr: function( name, value ) {\n");
      out.write("\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tremoveAttr: function( name ) {\n");
      out.write("\t\treturn this.each( function() {\n");
      out.write("\t\t\tjQuery.removeAttr( this, name );\n");
      out.write("\t\t} );\n");
      out.write("\t}\n");
      out.write("} );\n");
      out.write("\n");
      out.write("jQuery.extend( {\n");
      out.write("\tattr: function( elem, name, value ) {\n");
      out.write("\t\tvar ret, hooks,\n");
      out.write("\t\t\tnType = elem.nodeType;\n");
      out.write("\n");
      out.write("\t\t// Don't get/set attributes on text, comment and attribute nodes\n");
      out.write("\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n");
      out.write("\t\t\treturn;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Fallback to prop when attributes are not supported\n");
      out.write("\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n");
      out.write("\t\t\treturn jQuery.prop( elem, name, value );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Attribute hooks are determined by the lowercase version\n");
      out.write("\t\t// Grab necessary hook if one is defined\n");
      out.write("\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n");
      out.write("\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ] ||\n");
      out.write("\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tif ( value !== undefined ) {\n");
      out.write("\t\t\tif ( value === null ) {\n");
      out.write("\t\t\t\tjQuery.removeAttr( elem, name );\n");
      out.write("\t\t\t\treturn;\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\tif ( hooks && \"set\" in hooks &&\n");
      out.write("\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n");
      out.write("\t\t\t\treturn ret;\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\telem.setAttribute( name, value + \"\" );\n");
      out.write("\t\t\treturn value;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n");
      out.write("\t\t\treturn ret;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tret = jQuery.find.attr( elem, name );\n");
      out.write("\n");
      out.write("\t\t// Non-existent attributes return null, we normalize to undefined\n");
      out.write("\t\treturn ret == null ? undefined : ret;\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tattrHooks: {\n");
      out.write("\t\ttype: {\n");
      out.write("\t\t\tset: function( elem, value ) {\n");
      out.write("\t\t\t\tif ( !support.radioValue && value === \"radio\" &&\n");
      out.write("\t\t\t\t\tnodeName( elem, \"input\" ) ) {\n");
      out.write("\t\t\t\t\tvar val = elem.value;\n");
      out.write("\t\t\t\t\telem.setAttribute( \"type\", value );\n");
      out.write("\t\t\t\t\tif ( val ) {\n");
      out.write("\t\t\t\t\t\telem.value = val;\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t\treturn value;\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tremoveAttr: function( elem, value ) {\n");
      out.write("\t\tvar name,\n");
      out.write("\t\t\ti = 0,\n");
      out.write("\n");
      out.write("\t\t\t// Attribute names can contain non-HTML whitespace characters\n");
      out.write("\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n");
      out.write("\t\t\tattrNames = value && value.match( rnothtmlwhite );\n");
      out.write("\n");
      out.write("\t\tif ( attrNames && elem.nodeType === 1 ) {\n");
      out.write("\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n");
      out.write("\t\t\t\telem.removeAttribute( name );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("} );\n");
      out.write("\n");
      out.write("// Hooks for boolean attributes\n");
      out.write("boolHook = {\n");
      out.write("\tset: function( elem, value, name ) {\n");
      out.write("\t\tif ( value === false ) {\n");
      out.write("\n");
      out.write("\t\t\t// Remove boolean attributes when set to false\n");
      out.write("\t\t\tjQuery.removeAttr( elem, name );\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\telem.setAttribute( name, name );\n");
      out.write("\t\t}\n");
      out.write("\t\treturn name;\n");
      out.write("\t}\n");
      out.write("};\n");
      out.write("\n");
      out.write("jQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( i, name ) {\n");
      out.write("\tvar getter = attrHandle[ name ] || jQuery.find.attr;\n");
      out.write("\n");
      out.write("\tattrHandle[ name ] = function( elem, name, isXML ) {\n");
      out.write("\t\tvar ret, handle,\n");
      out.write("\t\t\tlowercaseName = name.toLowerCase();\n");
      out.write("\n");
      out.write("\t\tif ( !isXML ) {\n");
      out.write("\n");
      out.write("\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n");
      out.write("\t\t\thandle = attrHandle[ lowercaseName ];\n");
      out.write("\t\t\tattrHandle[ lowercaseName ] = ret;\n");
      out.write("\t\t\tret = getter( elem, name, isXML ) != null ?\n");
      out.write("\t\t\t\tlowercaseName :\n");
      out.write("\t\t\t\tnull;\n");
      out.write("\t\t\tattrHandle[ lowercaseName ] = handle;\n");
      out.write("\t\t}\n");
      out.write("\t\treturn ret;\n");
      out.write("\t};\n");
      out.write("} );\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("var rfocusable = /^(?:input|select|textarea|button)$/i,\n");
      out.write("\trclickable = /^(?:a|area)$/i;\n");
      out.write("\n");
      out.write("jQuery.fn.extend( {\n");
      out.write("\tprop: function( name, value ) {\n");
      out.write("\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tremoveProp: function( name ) {\n");
      out.write("\t\treturn this.each( function() {\n");
      out.write("\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n");
      out.write("\t\t} );\n");
      out.write("\t}\n");
      out.write("} );\n");
      out.write("\n");
      out.write("jQuery.extend( {\n");
      out.write("\tprop: function( elem, name, value ) {\n");
      out.write("\t\tvar ret, hooks,\n");
      out.write("\t\t\tnType = elem.nodeType;\n");
      out.write("\n");
      out.write("\t\t// Don't get/set properties on text, comment and attribute nodes\n");
      out.write("\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n");
      out.write("\t\t\treturn;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n");
      out.write("\n");
      out.write("\t\t\t// Fix name and attach hooks\n");
      out.write("\t\t\tname = jQuery.propFix[ name ] || name;\n");
      out.write("\t\t\thooks = jQuery.propHooks[ name ];\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tif ( value !== undefined ) {\n");
      out.write("\t\t\tif ( hooks && \"set\" in hooks &&\n");
      out.write("\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n");
      out.write("\t\t\t\treturn ret;\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\treturn ( elem[ name ] = value );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n");
      out.write("\t\t\treturn ret;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\treturn elem[ name ];\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tpropHooks: {\n");
      out.write("\t\ttabIndex: {\n");
      out.write("\t\t\tget: function( elem ) {\n");
      out.write("\n");
      out.write("\t\t\t\t// Support: IE <=9 - 11 only\n");
      out.write("\t\t\t\t// elem.tabIndex doesn't always return the\n");
      out.write("\t\t\t\t// correct value when it hasn't been explicitly set\n");
      out.write("\t\t\t\t// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n");
      out.write("\t\t\t\t// Use proper attribute retrieval(#12072)\n");
      out.write("\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\n");
      out.write("\n");
      out.write("\t\t\t\tif ( tabindex ) {\n");
      out.write("\t\t\t\t\treturn parseInt( tabindex, 10 );\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\tif (\n");
      out.write("\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n");
      out.write("\t\t\t\t\trclickable.test( elem.nodeName ) &&\n");
      out.write("\t\t\t\t\telem.href\n");
      out.write("\t\t\t\t) {\n");
      out.write("\t\t\t\t\treturn 0;\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\treturn -1;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tpropFix: {\n");
      out.write("\t\t\"for\": \"htmlFor\",\n");
      out.write("\t\t\"class\": \"className\"\n");
      out.write("\t}\n");
      out.write("} );\n");
      out.write("\n");
      out.write("// Support: IE <=11 only\n");
      out.write("// Accessing the selectedIndex property\n");
      out.write("// forces the browser to respect setting selected\n");
      out.write("// on the option\n");
      out.write("// The getter ensures a default option is selected\n");
      out.write("// when in an optgroup\n");
      out.write("// eslint rule \"no-unused-expressions\" is disabled for this code\n");
      out.write("// since it considers such accessions noop\n");
      out.write("if ( !support.optSelected ) {\n");
      out.write("\tjQuery.propHooks.selected = {\n");
      out.write("\t\tget: function( elem ) {\n");
      out.write("\n");
      out.write("\t\t\t/* eslint no-unused-expressions: \"off\" */\n");
      out.write("\n");
      out.write("\t\t\tvar parent = elem.parentNode;\n");
      out.write("\t\t\tif ( parent && parent.parentNode ) {\n");
      out.write("\t\t\t\tparent.parentNode.selectedIndex;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\treturn null;\n");
      out.write("\t\t},\n");
      out.write("\t\tset: function( elem ) {\n");
      out.write("\n");
      out.write("\t\t\t/* eslint no-unused-expressions: \"off\" */\n");
      out.write("\n");
      out.write("\t\t\tvar parent = elem.parentNode;\n");
      out.write("\t\t\tif ( parent ) {\n");
      out.write("\t\t\t\tparent.selectedIndex;\n");
      out.write("\n");
      out.write("\t\t\t\tif ( parent.parentNode ) {\n");
      out.write("\t\t\t\t\tparent.parentNode.selectedIndex;\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t};\n");
      out.write("}\n");
      out.write("\n");
      out.write("jQuery.each( [\n");
      out.write("\t\"tabIndex\",\n");
      out.write("\t\"readOnly\",\n");
      out.write("\t\"maxLength\",\n");
      out.write("\t\"cellSpacing\",\n");
      out.write("\t\"cellPadding\",\n");
      out.write("\t\"rowSpan\",\n");
      out.write("\t\"colSpan\",\n");
      out.write("\t\"useMap\",\n");
      out.write("\t\"frameBorder\",\n");
      out.write("\t\"contentEditable\"\n");
      out.write("], function() {\n");
      out.write("\tjQuery.propFix[ this.toLowerCase() ] = this;\n");
      out.write("} );\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\t// Strip and collapse whitespace according to HTML spec\n");
      out.write("\t// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\n");
      out.write("\tfunction stripAndCollapse( value ) {\n");
      out.write("\t\tvar tokens = value.match( rnothtmlwhite ) || [];\n");
      out.write("\t\treturn tokens.join( \" \" );\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\n");
      out.write("function getClass( elem ) {\n");
      out.write("\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n");
      out.write("}\n");
      out.write("\n");
      out.write("function classesToArray( value ) {\n");
      out.write("\tif ( Array.isArray( value ) ) {\n");
      out.write("\t\treturn value;\n");
      out.write("\t}\n");
      out.write("\tif ( typeof value === \"string\" ) {\n");
      out.write("\t\treturn value.match( rnothtmlwhite ) || [];\n");
      out.write("\t}\n");
      out.write("\treturn [];\n");
      out.write("}\n");
      out.write("\n");
      out.write("jQuery.fn.extend( {\n");
      out.write("\taddClass: function( value ) {\n");
      out.write("\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n");
      out.write("\t\t\ti = 0;\n");
      out.write("\n");
      out.write("\t\tif ( isFunction( value ) ) {\n");
      out.write("\t\t\treturn this.each( function( j ) {\n");
      out.write("\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n");
      out.write("\t\t\t} );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tclasses = classesToArray( value );\n");
      out.write("\n");
      out.write("\t\tif ( classes.length ) {\n");
      out.write("\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n");
      out.write("\t\t\t\tcurValue = getClass( elem );\n");
      out.write("\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n");
      out.write("\n");
      out.write("\t\t\t\tif ( cur ) {\n");
      out.write("\t\t\t\t\tj = 0;\n");
      out.write("\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n");
      out.write("\t\t\t\t\t\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\n");
      out.write("\t\t\t\t\t\t\tcur += clazz + \" \";\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n");
      out.write("\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n");
      out.write("\t\t\t\t\tif ( curValue !== finalValue ) {\n");
      out.write("\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\treturn this;\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tremoveClass: function( value ) {\n");
      out.write("\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n");
      out.write("\t\t\ti = 0;\n");
      out.write("\n");
      out.write("\t\tif ( isFunction( value ) ) {\n");
      out.write("\t\t\treturn this.each( function( j ) {\n");
      out.write("\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n");
      out.write("\t\t\t} );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tif ( !arguments.length ) {\n");
      out.write("\t\t\treturn this.attr( \"class\", \"\" );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tclasses = classesToArray( value );\n");
      out.write("\n");
      out.write("\t\tif ( classes.length ) {\n");
      out.write("\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n");
      out.write("\t\t\t\tcurValue = getClass( elem );\n");
      out.write("\n");
      out.write("\t\t\t\t// This expression is here for better compressibility (see addClass)\n");
      out.write("\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n");
      out.write("\n");
      out.write("\t\t\t\tif ( cur ) {\n");
      out.write("\t\t\t\t\tj = 0;\n");
      out.write("\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t// Remove *all* instances\n");
      out.write("\t\t\t\t\t\twhile ( cur.indexOf( \" \" + clazz + \" \" ) > -1 ) {\n");
      out.write("\t\t\t\t\t\t\tcur = cur.replace( \" \" + clazz + \" \", \" \" );\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n");
      out.write("\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n");
      out.write("\t\t\t\t\tif ( curValue !== finalValue ) {\n");
      out.write("\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\treturn this;\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\ttoggleClass: function( value, stateVal ) {\n");
      out.write("\t\tvar type = typeof value,\n");
      out.write("\t\t\tisValidValue = type === \"string\" || Array.isArray( value );\n");
      out.write("\n");
      out.write("\t\tif ( typeof stateVal === \"boolean\" && isValidValue ) {\n");
      out.write("\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tif ( isFunction( value ) ) {\n");
      out.write("\t\t\treturn this.each( function( i ) {\n");
      out.write("\t\t\t\tjQuery( this ).toggleClass(\n");
      out.write("\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n");
      out.write("\t\t\t\t\tstateVal\n");
      out.write("\t\t\t\t);\n");
      out.write("\t\t\t} );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\treturn this.each( function() {\n");
      out.write("\t\t\tvar className, i, self, classNames;\n");
      out.write("\n");
      out.write("\t\t\tif ( isValidValue ) {\n");
      out.write("\n");
      out.write("\t\t\t\t// Toggle individual class names\n");
      out.write("\t\t\t\ti = 0;\n");
      out.write("\t\t\t\tself = jQuery( this );\n");
      out.write("\t\t\t\tclassNames = classesToArray( value );\n");
      out.write("\n");
      out.write("\t\t\t\twhile ( ( className = classNames[ i++ ] ) ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t// Check each className given, space separated list\n");
      out.write("\t\t\t\t\tif ( self.hasClass( className ) ) {\n");
      out.write("\t\t\t\t\t\tself.removeClass( className );\n");
      out.write("\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\tself.addClass( className );\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Toggle whole class name\n");
      out.write("\t\t\t} else if ( value === undefined || type === \"boolean\" ) {\n");
      out.write("\t\t\t\tclassName = getClass( this );\n");
      out.write("\t\t\t\tif ( className ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t// Store className if set\n");
      out.write("\t\t\t\t\tdataPriv.set( this, \"__className__\", className );\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t// If the element has a class name or if we're passed `false`,\n");
      out.write("\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n");
      out.write("\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n");
      out.write("\t\t\t\t// falling back to the empty string if nothing was stored.\n");
      out.write("\t\t\t\tif ( this.setAttribute ) {\n");
      out.write("\t\t\t\t\tthis.setAttribute( \"class\",\n");
      out.write("\t\t\t\t\t\tclassName || value === false ?\n");
      out.write("\t\t\t\t\t\t\"\" :\n");
      out.write("\t\t\t\t\t\tdataPriv.get( this, \"__className__\" ) || \"\"\n");
      out.write("\t\t\t\t\t);\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t} );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\thasClass: function( selector ) {\n");
      out.write("\t\tvar className, elem,\n");
      out.write("\t\t\ti = 0;\n");
      out.write("\n");
      out.write("\t\tclassName = \" \" + selector + \" \";\n");
      out.write("\t\twhile ( ( elem = this[ i++ ] ) ) {\n");
      out.write("\t\t\tif ( elem.nodeType === 1 &&\n");
      out.write("\t\t\t\t( \" \" + stripAndCollapse( getClass( elem ) ) + \" \" ).indexOf( className ) > -1 ) {\n");
      out.write("\t\t\t\t\treturn true;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\treturn false;\n");
      out.write("\t}\n");
      out.write("} );\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("var rreturn = /\\r/g;\n");
      out.write("\n");
      out.write("jQuery.fn.extend( {\n");
      out.write("\tval: function( value ) {\n");
      out.write("\t\tvar hooks, ret, valueIsFunction,\n");
      out.write("\t\t\telem = this[ 0 ];\n");
      out.write("\n");
      out.write("\t\tif ( !arguments.length ) {\n");
      out.write("\t\t\tif ( elem ) {\n");
      out.write("\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n");
      out.write("\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n");
      out.write("\n");
      out.write("\t\t\t\tif ( hooks &&\n");
      out.write("\t\t\t\t\t\"get\" in hooks &&\n");
      out.write("\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n");
      out.write("\t\t\t\t) {\n");
      out.write("\t\t\t\t\treturn ret;\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\tret = elem.value;\n");
      out.write("\n");
      out.write("\t\t\t\t// Handle most common string cases\n");
      out.write("\t\t\t\tif ( typeof ret === \"string\" ) {\n");
      out.write("\t\t\t\t\treturn ret.replace( rreturn, \"\" );\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t// Handle cases where value is null/undef or number\n");
      out.write("\t\t\t\treturn ret == null ? \"\" : ret;\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\treturn;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tvalueIsFunction = isFunction( value );\n");
      out.write("\n");
      out.write("\t\treturn this.each( function( i ) {\n");
      out.write("\t\t\tvar val;\n");
      out.write("\n");
      out.write("\t\t\tif ( this.nodeType !== 1 ) {\n");
      out.write("\t\t\t\treturn;\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\tif ( valueIsFunction ) {\n");
      out.write("\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n");
      out.write("\t\t\t} else {\n");
      out.write("\t\t\t\tval = value;\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n");
      out.write("\t\t\tif ( val == null ) {\n");
      out.write("\t\t\t\tval = \"\";\n");
      out.write("\n");
      out.write("\t\t\t} else if ( typeof val === \"number\" ) {\n");
      out.write("\t\t\t\tval += \"\";\n");
      out.write("\n");
      out.write("\t\t\t} else if ( Array.isArray( val ) ) {\n");
      out.write("\t\t\t\tval = jQuery.map( val, function( value ) {\n");
      out.write("\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n");
      out.write("\t\t\t\t} );\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n");
      out.write("\n");
      out.write("\t\t\t// If set returns undefined, fall back to normal setting\n");
      out.write("\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n");
      out.write("\t\t\t\tthis.value = val;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t} );\n");
      out.write("\t}\n");
      out.write("} );\n");
      out.write("\n");
      out.write("jQuery.extend( {\n");
      out.write("\tvalHooks: {\n");
      out.write("\t\toption: {\n");
      out.write("\t\t\tget: function( elem ) {\n");
      out.write("\n");
      out.write("\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\n");
      out.write("\t\t\t\treturn val != null ?\n");
      out.write("\t\t\t\t\tval :\n");
      out.write("\n");
      out.write("\t\t\t\t\t// Support: IE <=10 - 11 only\n");
      out.write("\t\t\t\t\t// option.text throws exceptions (#14686, #14858)\n");
      out.write("\t\t\t\t\t// Strip and collapse whitespace\n");
      out.write("\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n");
      out.write("\t\t\t\t\tstripAndCollapse( jQuery.text( elem ) );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t},\n");
      out.write("\t\tselect: {\n");
      out.write("\t\t\tget: function( elem ) {\n");
      out.write("\t\t\t\tvar value, option, i,\n");
      out.write("\t\t\t\t\toptions = elem.options,\n");
      out.write("\t\t\t\t\tindex = elem.selectedIndex,\n");
      out.write("\t\t\t\t\tone = elem.type === \"select-one\",\n");
      out.write("\t\t\t\t\tvalues = one ? null : [],\n");
      out.write("\t\t\t\t\tmax = one ? index + 1 : options.length;\n");
      out.write("\n");
      out.write("\t\t\t\tif ( index < 0 ) {\n");
      out.write("\t\t\t\t\ti = max;\n");
      out.write("\n");
      out.write("\t\t\t\t} else {\n");
      out.write("\t\t\t\t\ti = one ? index : 0;\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t// Loop through all the selected options\n");
      out.write("\t\t\t\tfor ( ; i < max; i++ ) {\n");
      out.write("\t\t\t\t\toption = options[ i ];\n");
      out.write("\n");
      out.write("\t\t\t\t\t// Support: IE <=9 only\n");
      out.write("\t\t\t\t\t// IE8-9 doesn't update selected after form reset (#2551)\n");
      out.write("\t\t\t\t\tif ( ( option.selected || i === index ) &&\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n");
      out.write("\t\t\t\t\t\t\t!option.disabled &&\n");
      out.write("\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n");
      out.write("\t\t\t\t\t\t\t\t!nodeName( option.parentNode, \"optgroup\" ) ) ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t// Get the specific value for the option\n");
      out.write("\t\t\t\t\t\tvalue = jQuery( option ).val();\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t// We don't need an array for one selects\n");
      out.write("\t\t\t\t\t\tif ( one ) {\n");
      out.write("\t\t\t\t\t\t\treturn value;\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t// Multi-Selects return an array\n");
      out.write("\t\t\t\t\t\tvalues.push( value );\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\treturn values;\n");
      out.write("\t\t\t},\n");
      out.write("\n");
      out.write("\t\t\tset: function( elem, value ) {\n");
      out.write("\t\t\t\tvar optionSet, option,\n");
      out.write("\t\t\t\t\toptions = elem.options,\n");
      out.write("\t\t\t\t\tvalues = jQuery.makeArray( value ),\n");
      out.write("\t\t\t\t\ti = options.length;\n");
      out.write("\n");
      out.write("\t\t\t\twhile ( i-- ) {\n");
      out.write("\t\t\t\t\toption = options[ i ];\n");
      out.write("\n");
      out.write("\t\t\t\t\t/* eslint-disable no-cond-assign */\n");
      out.write("\n");
      out.write("\t\t\t\t\tif ( option.selected =\n");
      out.write("\t\t\t\t\t\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\n");
      out.write("\t\t\t\t\t) {\n");
      out.write("\t\t\t\t\t\toptionSet = true;\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t\t/* eslint-enable no-cond-assign */\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n");
      out.write("\t\t\t\tif ( !optionSet ) {\n");
      out.write("\t\t\t\t\telem.selectedIndex = -1;\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\treturn values;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("} );\n");
      out.write("\n");
      out.write("// Radios and checkboxes getter/setter\n");
      out.write("jQuery.each( [ \"radio\", \"checkbox\" ], function() {\n");
      out.write("\tjQuery.valHooks[ this ] = {\n");
      out.write("\t\tset: function( elem, value ) {\n");
      out.write("\t\t\tif ( Array.isArray( value ) ) {\n");
      out.write("\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t};\n");
      out.write("\tif ( !support.checkOn ) {\n");
      out.write("\t\tjQuery.valHooks[ this ].get = function( elem ) {\n");
      out.write("\t\t\treturn elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\n");
      out.write("\t\t};\n");
      out.write("\t}\n");
      out.write("} );\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// Return jQuery for attributes-only inclusion\n");
      out.write("\n");
      out.write("\n");
      out.write("support.focusin = \"onfocusin\" in window;\n");
      out.write("\n");
      out.write("\n");
      out.write("var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n");
      out.write("\tstopPropagationCallback = function( e ) {\n");
      out.write("\t\te.stopPropagation();\n");
      out.write("\t};\n");
      out.write("\n");
      out.write("jQuery.extend( jQuery.event, {\n");
      out.write("\n");
      out.write("\ttrigger: function( event, data, elem, onlyHandlers ) {\n");
      out.write("\n");
      out.write("\t\tvar i, cur, tmp, bubbleType, ontype, handle, special, lastElement,\n");
      out.write("\t\t\teventPath = [ elem || document ],\n");
      out.write("\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\n");
      out.write("\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\n");
      out.write("\n");
      out.write("\t\tcur = lastElement = tmp = elem = elem || document;\n");
      out.write("\n");
      out.write("\t\t// Don't do events on text and comment nodes\n");
      out.write("\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n");
      out.write("\t\t\treturn;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n");
      out.write("\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n");
      out.write("\t\t\treturn;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tif ( type.indexOf( \".\" ) > -1 ) {\n");
      out.write("\n");
      out.write("\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n");
      out.write("\t\t\tnamespaces = type.split( \".\" );\n");
      out.write("\t\t\ttype = namespaces.shift();\n");
      out.write("\t\t\tnamespaces.sort();\n");
      out.write("\t\t}\n");
      out.write("\t\tontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\n");
      out.write("\n");
      out.write("\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n");
      out.write("\t\tevent = event[ jQuery.expando ] ?\n");
      out.write("\t\t\tevent :\n");
      out.write("\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\n");
      out.write("\n");
      out.write("\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n");
      out.write("\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n");
      out.write("\t\tevent.namespace = namespaces.join( \".\" );\n");
      out.write("\t\tevent.rnamespace = event.namespace ?\n");
      out.write("\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" ) :\n");
      out.write("\t\t\tnull;\n");
      out.write("\n");
      out.write("\t\t// Clean up the event in case it is being reused\n");
      out.write("\t\tevent.result = undefined;\n");
      out.write("\t\tif ( !event.target ) {\n");
      out.write("\t\t\tevent.target = elem;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n");
      out.write("\t\tdata = data == null ?\n");
      out.write("\t\t\t[ event ] :\n");
      out.write("\t\t\tjQuery.makeArray( data, [ event ] );\n");
      out.write("\n");
      out.write("\t\t// Allow special events to draw outside the lines\n");
      out.write("\t\tspecial = jQuery.event.special[ type ] || {};\n");
      out.write("\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n");
      out.write("\t\t\treturn;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Determine event propagation path in advance, per W3C events spec (#9951)\n");
      out.write("\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n");
      out.write("\t\tif ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {\n");
      out.write("\n");
      out.write("\t\t\tbubbleType = special.delegateType || type;\n");
      out.write("\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\n");
      out.write("\t\t\t\tcur = cur.parentNode;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\tfor ( ; cur; cur = cur.parentNode ) {\n");
      out.write("\t\t\t\teventPath.push( cur );\n");
      out.write("\t\t\t\ttmp = cur;\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n");
      out.write("\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {\n");
      out.write("\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Fire handlers on the event path\n");
      out.write("\t\ti = 0;\n");
      out.write("\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n");
      out.write("\t\t\tlastElement = cur;\n");
      out.write("\t\t\tevent.type = i > 1 ?\n");
      out.write("\t\t\t\tbubbleType :\n");
      out.write("\t\t\t\tspecial.bindType || type;\n");
      out.write("\n");
      out.write("\t\t\t// jQuery handler\n");
      out.write("\t\t\thandle = ( dataPriv.get( cur, \"events\" ) || {} )[ event.type ] &&\n");
      out.write("\t\t\t\tdataPriv.get( cur, \"handle\" );\n");
      out.write("\t\t\tif ( handle ) {\n");
      out.write("\t\t\t\thandle.apply( cur, data );\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Native handler\n");
      out.write("\t\t\thandle = ontype && cur[ ontype ];\n");
      out.write("\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {\n");
      out.write("\t\t\t\tevent.result = handle.apply( cur, data );\n");
      out.write("\t\t\t\tif ( event.result === false ) {\n");
      out.write("\t\t\t\t\tevent.preventDefault();\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t\tevent.type = type;\n");
      out.write("\n");
      out.write("\t\t// If nobody prevented the default action, do it now\n");
      out.write("\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\n");
      out.write("\n");
      out.write("\t\t\tif ( ( !special._default ||\n");
      out.write("\t\t\t\tspecial._default.apply( eventPath.pop(), data ) === false ) &&\n");
      out.write("\t\t\t\tacceptData( elem ) ) {\n");
      out.write("\n");
      out.write("\t\t\t\t// Call a native DOM method on the target with the same name as the event.\n");
      out.write("\t\t\t\t// Don't do default actions on window, that's where global variables be (#6170)\n");
      out.write("\t\t\t\tif ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n");
      out.write("\t\t\t\t\ttmp = elem[ ontype ];\n");
      out.write("\n");
      out.write("\t\t\t\t\tif ( tmp ) {\n");
      out.write("\t\t\t\t\t\telem[ ontype ] = null;\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n");
      out.write("\t\t\t\t\tjQuery.event.triggered = type;\n");
      out.write("\n");
      out.write("\t\t\t\t\tif ( event.isPropagationStopped() ) {\n");
      out.write("\t\t\t\t\t\tlastElement.addEventListener( type, stopPropagationCallback );\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t\telem[ type ]();\n");
      out.write("\n");
      out.write("\t\t\t\t\tif ( event.isPropagationStopped() ) {\n");
      out.write("\t\t\t\t\t\tlastElement.removeEventListener( type, stopPropagationCallback );\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t\tjQuery.event.triggered = undefined;\n");
      out.write("\n");
      out.write("\t\t\t\t\tif ( tmp ) {\n");
      out.write("\t\t\t\t\t\telem[ ontype ] = tmp;\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\treturn event.result;\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\t// Piggyback on a donor event to simulate a different one\n");
      out.write("\t// Used only for `focus(in | out)` events\n");
      out.write("\tsimulate: function( type, elem, event ) {\n");
      out.write("\t\tvar e = jQuery.extend(\n");
      out.write("\t\t\tnew jQuery.Event(),\n");
      out.write("\t\t\tevent,\n");
      out.write("\t\t\t{\n");
      out.write("\t\t\t\ttype: type,\n");
      out.write("\t\t\t\tisSimulated: true\n");
      out.write("\t\t\t}\n");
      out.write("\t\t);\n");
      out.write("\n");
      out.write("\t\tjQuery.event.trigger( e, null, elem );\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("} );\n");
      out.write("\n");
      out.write("jQuery.fn.extend( {\n");
      out.write("\n");
      out.write("\ttrigger: function( type, data ) {\n");
      out.write("\t\treturn this.each( function() {\n");
      out.write("\t\t\tjQuery.event.trigger( type, data, this );\n");
      out.write("\t\t} );\n");
      out.write("\t},\n");
      out.write("\ttriggerHandler: function( type, data ) {\n");
      out.write("\t\tvar elem = this[ 0 ];\n");
      out.write("\t\tif ( elem ) {\n");
      out.write("\t\t\treturn jQuery.event.trigger( type, data, elem, true );\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("} );\n");
      out.write("\n");
      out.write("\n");
      out.write("// Support: Firefox <=44\n");
      out.write("// Firefox doesn't have focus(in | out) events\n");
      out.write("// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n");
      out.write("//\n");
      out.write("// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n");
      out.write("// focus(in | out) events fire after focus & blur events,\n");
      out.write("// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n");
      out.write("// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\n");
      out.write("if ( !support.focusin ) {\n");
      out.write("\tjQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {\n");
      out.write("\n");
      out.write("\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\n");
      out.write("\t\tvar handler = function( event ) {\n");
      out.write("\t\t\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );\n");
      out.write("\t\t};\n");
      out.write("\n");
      out.write("\t\tjQuery.event.special[ fix ] = {\n");
      out.write("\t\t\tsetup: function() {\n");
      out.write("\t\t\t\tvar doc = this.ownerDocument || this,\n");
      out.write("\t\t\t\t\tattaches = dataPriv.access( doc, fix );\n");
      out.write("\n");
      out.write("\t\t\t\tif ( !attaches ) {\n");
      out.write("\t\t\t\t\tdoc.addEventListener( orig, handler, true );\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\tdataPriv.access( doc, fix, ( attaches || 0 ) + 1 );\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tteardown: function() {\n");
      out.write("\t\t\t\tvar doc = this.ownerDocument || this,\n");
      out.write("\t\t\t\t\tattaches = dataPriv.access( doc, fix ) - 1;\n");
      out.write("\n");
      out.write("\t\t\t\tif ( !attaches ) {\n");
      out.write("\t\t\t\t\tdoc.removeEventListener( orig, handler, true );\n");
      out.write("\t\t\t\t\tdataPriv.remove( doc, fix );\n");
      out.write("\n");
      out.write("\t\t\t\t} else {\n");
      out.write("\t\t\t\t\tdataPriv.access( doc, fix, attaches );\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t};\n");
      out.write("\t} );\n");
      out.write("}\n");
      out.write("var location = window.location;\n");
      out.write("\n");
      out.write("var nonce = Date.now();\n");
      out.write("\n");
      out.write("var rquery = ( /\\?/ );\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// Cross-browser xml parsing\n");
      out.write("jQuery.parseXML = function( data ) {\n");
      out.write("\tvar xml;\n");
      out.write("\tif ( !data || typeof data !== \"string\" ) {\n");
      out.write("\t\treturn null;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// Support: IE 9 - 11 only\n");
      out.write("\t// IE throws on parseFromString with invalid input.\n");
      out.write("\ttry {\n");
      out.write("\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n");
      out.write("\t} catch ( e ) {\n");
      out.write("\t\txml = undefined;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tif ( !xml || xml.getElementsByTagName( \"parsererror\" ).length ) {\n");
      out.write("\t\tjQuery.error( \"Invalid XML: \" + data );\n");
      out.write("\t}\n");
      out.write("\treturn xml;\n");
      out.write("};\n");
      out.write("\n");
      out.write("\n");
      out.write("var\n");
      out.write("\trbracket = /\\[\\]$/,\n");
      out.write("\trCRLF = /\\r?\\n/g,\n");
      out.write("\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n");
      out.write("\trsubmittable = /^(?:input|select|textarea|keygen)/i;\n");
      out.write("\n");
      out.write("function buildParams( prefix, obj, traditional, add ) {\n");
      out.write("\tvar name;\n");
      out.write("\n");
      out.write("\tif ( Array.isArray( obj ) ) {\n");
      out.write("\n");
      out.write("\t\t// Serialize array item.\n");
      out.write("\t\tjQuery.each( obj, function( i, v ) {\n");
      out.write("\t\t\tif ( traditional || rbracket.test( prefix ) ) {\n");
      out.write("\n");
      out.write("\t\t\t\t// Treat each array item as a scalar.\n");
      out.write("\t\t\t\tadd( prefix, v );\n");
      out.write("\n");
      out.write("\t\t\t} else {\n");
      out.write("\n");
      out.write("\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n");
      out.write("\t\t\t\tbuildParams(\n");
      out.write("\t\t\t\t\tprefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\n");
      out.write("\t\t\t\t\tv,\n");
      out.write("\t\t\t\t\ttraditional,\n");
      out.write("\t\t\t\t\tadd\n");
      out.write("\t\t\t\t);\n");
      out.write("\t\t\t}\n");
      out.write("\t\t} );\n");
      out.write("\n");
      out.write("\t} else if ( !traditional && toType( obj ) === \"object\" ) {\n");
      out.write("\n");
      out.write("\t\t// Serialize object item.\n");
      out.write("\t\tfor ( name in obj ) {\n");
      out.write("\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t} else {\n");
      out.write("\n");
      out.write("\t\t// Serialize scalar item.\n");
      out.write("\t\tadd( prefix, obj );\n");
      out.write("\t}\n");
      out.write("}\n");
      out.write("\n");
      out.write("// Serialize an array of form elements or a set of\n");
      out.write("// key/values into a query string\n");
      out.write("jQuery.param = function( a, traditional ) {\n");
      out.write("\tvar prefix,\n");
      out.write("\t\ts = [],\n");
      out.write("\t\tadd = function( key, valueOrFunction ) {\n");
      out.write("\n");
      out.write("\t\t\t// If value is a function, invoke it and use its return value\n");
      out.write("\t\t\tvar value = isFunction( valueOrFunction ) ?\n");
      out.write("\t\t\t\tvalueOrFunction() :\n");
      out.write("\t\t\t\tvalueOrFunction;\n");
      out.write("\n");
      out.write("\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" +\n");
      out.write("\t\t\t\tencodeURIComponent( value == null ? \"\" : value );\n");
      out.write("\t\t};\n");
      out.write("\n");
      out.write("\tif ( a == null ) {\n");
      out.write("\t\treturn \"\";\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// If an array was passed in, assume that it is an array of form elements.\n");
      out.write("\tif ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n");
      out.write("\n");
      out.write("\t\t// Serialize the form elements\n");
      out.write("\t\tjQuery.each( a, function() {\n");
      out.write("\t\t\tadd( this.name, this.value );\n");
      out.write("\t\t} );\n");
      out.write("\n");
      out.write("\t} else {\n");
      out.write("\n");
      out.write("\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n");
      out.write("\t\t// did it), otherwise encode params recursively.\n");
      out.write("\t\tfor ( prefix in a ) {\n");
      out.write("\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// Return the resulting serialization\n");
      out.write("\treturn s.join( \"&\" );\n");
      out.write("};\n");
      out.write("\n");
      out.write("jQuery.fn.extend( {\n");
      out.write("\tserialize: function() {\n");
      out.write("\t\treturn jQuery.param( this.serializeArray() );\n");
      out.write("\t},\n");
      out.write("\tserializeArray: function() {\n");
      out.write("\t\treturn this.map( function() {\n");
      out.write("\n");
      out.write("\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n");
      out.write("\t\t\tvar elements = jQuery.prop( this, \"elements\" );\n");
      out.write("\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\n");
      out.write("\t\t} )\n");
      out.write("\t\t.filter( function() {\n");
      out.write("\t\t\tvar type = this.type;\n");
      out.write("\n");
      out.write("\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\n");
      out.write("\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\n");
      out.write("\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n");
      out.write("\t\t\t\t( this.checked || !rcheckableType.test( type ) );\n");
      out.write("\t\t} )\n");
      out.write("\t\t.map( function( i, elem ) {\n");
      out.write("\t\t\tvar val = jQuery( this ).val();\n");
      out.write("\n");
      out.write("\t\t\tif ( val == null ) {\n");
      out.write("\t\t\t\treturn null;\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\tif ( Array.isArray( val ) ) {\n");
      out.write("\t\t\t\treturn jQuery.map( val, function( val ) {\n");
      out.write("\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n");
      out.write("\t\t\t\t} );\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n");
      out.write("\t\t} ).get();\n");
      out.write("\t}\n");
      out.write("} );\n");
      out.write("\n");
      out.write("\n");
      out.write("var\n");
      out.write("\tr20 = /%20/g,\n");
      out.write("\trhash = /#.*$/,\n");
      out.write("\trantiCache = /([?&])_=[^&]*/,\n");
      out.write("\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n");
      out.write("\n");
      out.write("\t// #7653, #8125, #8152: local protocol detection\n");
      out.write("\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n");
      out.write("\trnoContent = /^(?:GET|HEAD)$/,\n");
      out.write("\trprotocol = /^\\/\\//,\n");
      out.write("\n");
      out.write("\t/* Prefilters\n");
      out.write("\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n");
      out.write("\t * 2) These are called:\n");
      out.write("\t *    - BEFORE asking for a transport\n");
      out.write("\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n");
      out.write("\t * 3) key is the dataType\n");
      out.write("\t * 4) the catchall symbol \"*\" can be used\n");
      out.write("\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n");
      out.write("\t */\n");
      out.write("\tprefilters = {},\n");
      out.write("\n");
      out.write("\t/* Transports bindings\n");
      out.write("\t * 1) key is the dataType\n");
      out.write("\t * 2) the catchall symbol \"*\" can be used\n");
      out.write("\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n");
      out.write("\t */\n");
      out.write("\ttransports = {},\n");
      out.write("\n");
      out.write("\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n");
      out.write("\tallTypes = \"*/\".concat( \"*\" ),\n");
      out.write("\n");
      out.write("\t// Anchor tag for parsing the document origin\n");
      out.write("\toriginAnchor = document.createElement( \"a\" );\n");
      out.write("\toriginAnchor.href = location.href;\n");
      out.write("\n");
      out.write("// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\n");
      out.write("function addToPrefiltersOrTransports( structure ) {\n");
      out.write("\n");
      out.write("\t// dataTypeExpression is optional and defaults to \"*\"\n");
      out.write("\treturn function( dataTypeExpression, func ) {\n");
      out.write("\n");
      out.write("\t\tif ( typeof dataTypeExpression !== \"string\" ) {\n");
      out.write("\t\t\tfunc = dataTypeExpression;\n");
      out.write("\t\t\tdataTypeExpression = \"*\";\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tvar dataType,\n");
      out.write("\t\t\ti = 0,\n");
      out.write("\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];\n");
      out.write("\n");
      out.write("\t\tif ( isFunction( func ) ) {\n");
      out.write("\n");
      out.write("\t\t\t// For each dataType in the dataTypeExpression\n");
      out.write("\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\n");
      out.write("\n");
      out.write("\t\t\t\t// Prepend if requested\n");
      out.write("\t\t\t\tif ( dataType[ 0 ] === \"+\" ) {\n");
      out.write("\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\n");
      out.write("\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n");
      out.write("\n");
      out.write("\t\t\t\t// Otherwise append\n");
      out.write("\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t};\n");
      out.write("}\n");
      out.write("\n");
      out.write("// Base inspection function for prefilters and transports\n");
      out.write("function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n");
      out.write("\n");
      out.write("\tvar inspected = {},\n");
      out.write("\t\tseekingTransport = ( structure === transports );\n");
      out.write("\n");
      out.write("\tfunction inspect( dataType ) {\n");
      out.write("\t\tvar selected;\n");
      out.write("\t\tinspected[ dataType ] = true;\n");
      out.write("\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n");
      out.write("\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n");
      out.write("\t\t\tif ( typeof dataTypeOrTransport === \"string\" &&\n");
      out.write("\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n");
      out.write("\n");
      out.write("\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\n");
      out.write("\t\t\t\tinspect( dataTypeOrTransport );\n");
      out.write("\t\t\t\treturn false;\n");
      out.write("\t\t\t} else if ( seekingTransport ) {\n");
      out.write("\t\t\t\treturn !( selected = dataTypeOrTransport );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t} );\n");
      out.write("\t\treturn selected;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n");
      out.write("}\n");
      out.write("\n");
      out.write("// A special extend for ajax options\n");
      out.write("// that takes \"flat\" options (not to be deep extended)\n");
      out.write("// Fixes #9887\n");
      out.write("function ajaxExtend( target, src ) {\n");
      out.write("\tvar key, deep,\n");
      out.write("\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n");
      out.write("\n");
      out.write("\tfor ( key in src ) {\n");
      out.write("\t\tif ( src[ key ] !== undefined ) {\n");
      out.write("\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\tif ( deep ) {\n");
      out.write("\t\tjQuery.extend( true, target, deep );\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\treturn target;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* Handles responses to an ajax request:\n");
      out.write(" * - finds the right dataType (mediates between content-type and expected dataType)\n");
      out.write(" * - returns the corresponding response\n");
      out.write(" */\n");
      out.write("function ajaxHandleResponses( s, jqXHR, responses ) {\n");
      out.write("\n");
      out.write("\tvar ct, type, finalDataType, firstDataType,\n");
      out.write("\t\tcontents = s.contents,\n");
      out.write("\t\tdataTypes = s.dataTypes;\n");
      out.write("\n");
      out.write("\t// Remove auto dataType and get content-type in the process\n");
      out.write("\twhile ( dataTypes[ 0 ] === \"*\" ) {\n");
      out.write("\t\tdataTypes.shift();\n");
      out.write("\t\tif ( ct === undefined ) {\n");
      out.write("\t\t\tct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// Check if we're dealing with a known content-type\n");
      out.write("\tif ( ct ) {\n");
      out.write("\t\tfor ( type in contents ) {\n");
      out.write("\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n");
      out.write("\t\t\t\tdataTypes.unshift( type );\n");
      out.write("\t\t\t\tbreak;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// Check to see if we have a response for the expected dataType\n");
      out.write("\tif ( dataTypes[ 0 ] in responses ) {\n");
      out.write("\t\tfinalDataType = dataTypes[ 0 ];\n");
      out.write("\t} else {\n");
      out.write("\n");
      out.write("\t\t// Try convertible dataTypes\n");
      out.write("\t\tfor ( type in responses ) {\n");
      out.write("\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\n");
      out.write("\t\t\t\tfinalDataType = type;\n");
      out.write("\t\t\t\tbreak;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\tif ( !firstDataType ) {\n");
      out.write("\t\t\t\tfirstDataType = type;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Or just use first one\n");
      out.write("\t\tfinalDataType = finalDataType || firstDataType;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// If we found a dataType\n");
      out.write("\t// We add the dataType to the list if needed\n");
      out.write("\t// and return the corresponding response\n");
      out.write("\tif ( finalDataType ) {\n");
      out.write("\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n");
      out.write("\t\t\tdataTypes.unshift( finalDataType );\n");
      out.write("\t\t}\n");
      out.write("\t\treturn responses[ finalDataType ];\n");
      out.write("\t}\n");
      out.write("}\n");
      out.write("\n");
      out.write("/* Chain conversions given the request and the original response\n");
      out.write(" * Also sets the responseXXX fields on the jqXHR instance\n");
      out.write(" */\n");
      out.write("function ajaxConvert( s, response, jqXHR, isSuccess ) {\n");
      out.write("\tvar conv2, current, conv, tmp, prev,\n");
      out.write("\t\tconverters = {},\n");
      out.write("\n");
      out.write("\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n");
      out.write("\t\tdataTypes = s.dataTypes.slice();\n");
      out.write("\n");
      out.write("\t// Create converters map with lowercased keys\n");
      out.write("\tif ( dataTypes[ 1 ] ) {\n");
      out.write("\t\tfor ( conv in s.converters ) {\n");
      out.write("\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tcurrent = dataTypes.shift();\n");
      out.write("\n");
      out.write("\t// Convert to each sequential dataType\n");
      out.write("\twhile ( current ) {\n");
      out.write("\n");
      out.write("\t\tif ( s.responseFields[ current ] ) {\n");
      out.write("\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Apply the dataFilter if provided\n");
      out.write("\t\tif ( !prev && isSuccess && s.dataFilter ) {\n");
      out.write("\t\t\tresponse = s.dataFilter( response, s.dataType );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tprev = current;\n");
      out.write("\t\tcurrent = dataTypes.shift();\n");
      out.write("\n");
      out.write("\t\tif ( current ) {\n");
      out.write("\n");
      out.write("\t\t\t// There's only work to do if current dataType is non-auto\n");
      out.write("\t\t\tif ( current === \"*\" ) {\n");
      out.write("\n");
      out.write("\t\t\t\tcurrent = prev;\n");
      out.write("\n");
      out.write("\t\t\t// Convert response if prev dataType is non-auto and differs from current\n");
      out.write("\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\n");
      out.write("\n");
      out.write("\t\t\t\t// Seek a direct converter\n");
      out.write("\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n");
      out.write("\n");
      out.write("\t\t\t\t// If none found, seek a pair\n");
      out.write("\t\t\t\tif ( !conv ) {\n");
      out.write("\t\t\t\t\tfor ( conv2 in converters ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t// If conv2 outputs current\n");
      out.write("\t\t\t\t\t\ttmp = conv2.split( \" \" );\n");
      out.write("\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t// If prev can be converted to accepted input\n");
      out.write("\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n");
      out.write("\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\n");
      out.write("\t\t\t\t\t\t\tif ( conv ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\t// Condense equivalence converters\n");
      out.write("\t\t\t\t\t\t\t\tif ( conv === true ) {\n");
      out.write("\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n");
      out.write("\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\n");
      out.write("\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\n");
      out.write("\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\n");
      out.write("\t\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t\t\tbreak;\n");
      out.write("\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t// Apply converter (if not an equivalence)\n");
      out.write("\t\t\t\tif ( conv !== true ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n");
      out.write("\t\t\t\t\tif ( conv && s.throws ) {\n");
      out.write("\t\t\t\t\t\tresponse = conv( response );\n");
      out.write("\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\ttry {\n");
      out.write("\t\t\t\t\t\t\tresponse = conv( response );\n");
      out.write("\t\t\t\t\t\t} catch ( e ) {\n");
      out.write("\t\t\t\t\t\t\treturn {\n");
      out.write("\t\t\t\t\t\t\t\tstate: \"parsererror\",\n");
      out.write("\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\n");
      out.write("\t\t\t\t\t\t\t};\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\treturn { state: \"success\", data: response };\n");
      out.write("}\n");
      out.write("\n");
      out.write("jQuery.extend( {\n");
      out.write("\n");
      out.write("\t// Counter for holding the number of active queries\n");
      out.write("\tactive: 0,\n");
      out.write("\n");
      out.write("\t// Last-Modified header cache for next request\n");
      out.write("\tlastModified: {},\n");
      out.write("\tetag: {},\n");
      out.write("\n");
      out.write("\tajaxSettings: {\n");
      out.write("\t\turl: location.href,\n");
      out.write("\t\ttype: \"GET\",\n");
      out.write("\t\tisLocal: rlocalProtocol.test( location.protocol ),\n");
      out.write("\t\tglobal: true,\n");
      out.write("\t\tprocessData: true,\n");
      out.write("\t\tasync: true,\n");
      out.write("\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n");
      out.write("\n");
      out.write("\t\t/*\n");
      out.write("\t\ttimeout: 0,\n");
      out.write("\t\tdata: null,\n");
      out.write("\t\tdataType: null,\n");
      out.write("\t\tusername: null,\n");
      out.write("\t\tpassword: null,\n");
      out.write("\t\tcache: null,\n");
      out.write("\t\tthrows: false,\n");
      out.write("\t\ttraditional: false,\n");
      out.write("\t\theaders: {},\n");
      out.write("\t\t*/\n");
      out.write("\n");
      out.write("\t\taccepts: {\n");
      out.write("\t\t\t\"*\": allTypes,\n");
      out.write("\t\t\ttext: \"text/plain\",\n");
      out.write("\t\t\thtml: \"text/html\",\n");
      out.write("\t\t\txml: \"application/xml, text/xml\",\n");
      out.write("\t\t\tjson: \"application/json, text/javascript\"\n");
      out.write("\t\t},\n");
      out.write("\n");
      out.write("\t\tcontents: {\n");
      out.write("\t\t\txml: /\\bxml\\b/,\n");
      out.write("\t\t\thtml: /\\bhtml/,\n");
      out.write("\t\t\tjson: /\\bjson\\b/\n");
      out.write("\t\t},\n");
      out.write("\n");
      out.write("\t\tresponseFields: {\n");
      out.write("\t\t\txml: \"responseXML\",\n");
      out.write("\t\t\ttext: \"responseText\",\n");
      out.write("\t\t\tjson: \"responseJSON\"\n");
      out.write("\t\t},\n");
      out.write("\n");
      out.write("\t\t// Data converters\n");
      out.write("\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n");
      out.write("\t\tconverters: {\n");
      out.write("\n");
      out.write("\t\t\t// Convert anything to text\n");
      out.write("\t\t\t\"* text\": String,\n");
      out.write("\n");
      out.write("\t\t\t// Text to html (true = no transformation)\n");
      out.write("\t\t\t\"text html\": true,\n");
      out.write("\n");
      out.write("\t\t\t// Evaluate text as a json expression\n");
      out.write("\t\t\t\"text json\": JSON.parse,\n");
      out.write("\n");
      out.write("\t\t\t// Parse text as xml\n");
      out.write("\t\t\t\"text xml\": jQuery.parseXML\n");
      out.write("\t\t},\n");
      out.write("\n");
      out.write("\t\t// For options that shouldn't be deep extended:\n");
      out.write("\t\t// you can add your own custom options here if\n");
      out.write("\t\t// and when you create one that shouldn't be\n");
      out.write("\t\t// deep extended (see ajaxExtend)\n");
      out.write("\t\tflatOptions: {\n");
      out.write("\t\t\turl: true,\n");
      out.write("\t\t\tcontext: true\n");
      out.write("\t\t}\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\t// Creates a full fledged settings object into target\n");
      out.write("\t// with both ajaxSettings and settings fields.\n");
      out.write("\t// If target is omitted, writes into ajaxSettings.\n");
      out.write("\tajaxSetup: function( target, settings ) {\n");
      out.write("\t\treturn settings ?\n");
      out.write("\n");
      out.write("\t\t\t// Building a settings object\n");
      out.write("\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n");
      out.write("\n");
      out.write("\t\t\t// Extending ajaxSettings\n");
      out.write("\t\t\tajaxExtend( jQuery.ajaxSettings, target );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n");
      out.write("\tajaxTransport: addToPrefiltersOrTransports( transports ),\n");
      out.write("\n");
      out.write("\t// Main method\n");
      out.write("\tajax: function( url, options ) {\n");
      out.write("\n");
      out.write("\t\t// If url is an object, simulate pre-1.5 signature\n");
      out.write("\t\tif ( typeof url === \"object\" ) {\n");
      out.write("\t\t\toptions = url;\n");
      out.write("\t\t\turl = undefined;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Force options to be an object\n");
      out.write("\t\toptions = options || {};\n");
      out.write("\n");
      out.write("\t\tvar transport,\n");
      out.write("\n");
      out.write("\t\t\t// URL without anti-cache param\n");
      out.write("\t\t\tcacheURL,\n");
      out.write("\n");
      out.write("\t\t\t// Response headers\n");
      out.write("\t\t\tresponseHeadersString,\n");
      out.write("\t\t\tresponseHeaders,\n");
      out.write("\n");
      out.write("\t\t\t// timeout handle\n");
      out.write("\t\t\ttimeoutTimer,\n");
      out.write("\n");
      out.write("\t\t\t// Url cleanup var\n");
      out.write("\t\t\turlAnchor,\n");
      out.write("\n");
      out.write("\t\t\t// Request state (becomes false upon send and true upon completion)\n");
      out.write("\t\t\tcompleted,\n");
      out.write("\n");
      out.write("\t\t\t// To know if global events are to be dispatched\n");
      out.write("\t\t\tfireGlobals,\n");
      out.write("\n");
      out.write("\t\t\t// Loop variable\n");
      out.write("\t\t\ti,\n");
      out.write("\n");
      out.write("\t\t\t// uncached part of the url\n");
      out.write("\t\t\tuncached,\n");
      out.write("\n");
      out.write("\t\t\t// Create the final options object\n");
      out.write("\t\t\ts = jQuery.ajaxSetup( {}, options ),\n");
      out.write("\n");
      out.write("\t\t\t// Callbacks context\n");
      out.write("\t\t\tcallbackContext = s.context || s,\n");
      out.write("\n");
      out.write("\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n");
      out.write("\t\t\tglobalEventContext = s.context &&\n");
      out.write("\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?\n");
      out.write("\t\t\t\t\tjQuery( callbackContext ) :\n");
      out.write("\t\t\t\t\tjQuery.event,\n");
      out.write("\n");
      out.write("\t\t\t// Deferreds\n");
      out.write("\t\t\tdeferred = jQuery.Deferred(),\n");
      out.write("\t\t\tcompleteDeferred = jQuery.Callbacks( \"once memory\" ),\n");
      out.write("\n");
      out.write("\t\t\t// Status-dependent callbacks\n");
      out.write("\t\t\tstatusCode = s.statusCode || {},\n");
      out.write("\n");
      out.write("\t\t\t// Headers (they are sent all at once)\n");
      out.write("\t\t\trequestHeaders = {},\n");
      out.write("\t\t\trequestHeadersNames = {},\n");
      out.write("\n");
      out.write("\t\t\t// Default abort message\n");
      out.write("\t\t\tstrAbort = \"canceled\",\n");
      out.write("\n");
      out.write("\t\t\t// Fake xhr\n");
      out.write("\t\t\tjqXHR = {\n");
      out.write("\t\t\t\treadyState: 0,\n");
      out.write("\n");
      out.write("\t\t\t\t// Builds headers hashtable if needed\n");
      out.write("\t\t\t\tgetResponseHeader: function( key ) {\n");
      out.write("\t\t\t\t\tvar match;\n");
      out.write("\t\t\t\t\tif ( completed ) {\n");
      out.write("\t\t\t\t\t\tif ( !responseHeaders ) {\n");
      out.write("\t\t\t\t\t\t\tresponseHeaders = {};\n");
      out.write("\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n");
      out.write("\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() + \" \" ] =\n");
      out.write("\t\t\t\t\t\t\t\t\t( responseHeaders[ match[ 1 ].toLowerCase() + \" \" ] || [] )\n");
      out.write("\t\t\t\t\t\t\t\t\t\t.concat( match[ 2 ] );\n");
      out.write("\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() + \" \" ];\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t\treturn match == null ? null : match.join( \", \" );\n");
      out.write("\t\t\t\t},\n");
      out.write("\n");
      out.write("\t\t\t\t// Raw string\n");
      out.write("\t\t\t\tgetAllResponseHeaders: function() {\n");
      out.write("\t\t\t\t\treturn completed ? responseHeadersString : null;\n");
      out.write("\t\t\t\t},\n");
      out.write("\n");
      out.write("\t\t\t\t// Caches the header\n");
      out.write("\t\t\t\tsetRequestHeader: function( name, value ) {\n");
      out.write("\t\t\t\t\tif ( completed == null ) {\n");
      out.write("\t\t\t\t\t\tname = requestHeadersNames[ name.toLowerCase() ] =\n");
      out.write("\t\t\t\t\t\t\trequestHeadersNames[ name.toLowerCase() ] || name;\n");
      out.write("\t\t\t\t\t\trequestHeaders[ name ] = value;\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t\treturn this;\n");
      out.write("\t\t\t\t},\n");
      out.write("\n");
      out.write("\t\t\t\t// Overrides response content-type header\n");
      out.write("\t\t\t\toverrideMimeType: function( type ) {\n");
      out.write("\t\t\t\t\tif ( completed == null ) {\n");
      out.write("\t\t\t\t\t\ts.mimeType = type;\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t\treturn this;\n");
      out.write("\t\t\t\t},\n");
      out.write("\n");
      out.write("\t\t\t\t// Status-dependent callbacks\n");
      out.write("\t\t\t\tstatusCode: function( map ) {\n");
      out.write("\t\t\t\t\tvar code;\n");
      out.write("\t\t\t\t\tif ( map ) {\n");
      out.write("\t\t\t\t\t\tif ( completed ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t// Execute the appropriate callbacks\n");
      out.write("\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\n");
      out.write("\t\t\t\t\t\t} else {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t// Lazy-add the new callbacks in a way that preserves old ones\n");
      out.write("\t\t\t\t\t\t\tfor ( code in map ) {\n");
      out.write("\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n");
      out.write("\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t\treturn this;\n");
      out.write("\t\t\t\t},\n");
      out.write("\n");
      out.write("\t\t\t\t// Cancel the request\n");
      out.write("\t\t\t\tabort: function( statusText ) {\n");
      out.write("\t\t\t\t\tvar finalText = statusText || strAbort;\n");
      out.write("\t\t\t\t\tif ( transport ) {\n");
      out.write("\t\t\t\t\t\ttransport.abort( finalText );\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t\tdone( 0, finalText );\n");
      out.write("\t\t\t\t\treturn this;\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t};\n");
      out.write("\n");
      out.write("\t\t// Attach deferreds\n");
      out.write("\t\tdeferred.promise( jqXHR );\n");
      out.write("\n");
      out.write("\t\t// Add protocol if not provided (prefilters might expect it)\n");
      out.write("\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\n");
      out.write("\t\t// We also use the url parameter if available\n");
      out.write("\t\ts.url = ( ( url || s.url || location.href ) + \"\" )\n");
      out.write("\t\t\t.replace( rprotocol, location.protocol + \"//\" );\n");
      out.write("\n");
      out.write("\t\t// Alias method option to type as per ticket #12004\n");
      out.write("\t\ts.type = options.method || options.type || s.method || s.type;\n");
      out.write("\n");
      out.write("\t\t// Extract dataTypes list\n");
      out.write("\t\ts.dataTypes = ( s.dataType || \"*\" ).toLowerCase().match( rnothtmlwhite ) || [ \"\" ];\n");
      out.write("\n");
      out.write("\t\t// A cross-domain request is in order when the origin doesn't match the current origin.\n");
      out.write("\t\tif ( s.crossDomain == null ) {\n");
      out.write("\t\t\turlAnchor = document.createElement( \"a\" );\n");
      out.write("\n");
      out.write("\t\t\t// Support: IE <=8 - 11, Edge 12 - 15\n");
      out.write("\t\t\t// IE throws exception on accessing the href property if url is malformed,\n");
      out.write("\t\t\t// e.g. http://example.com:80x/\n");
      out.write("\t\t\ttry {\n");
      out.write("\t\t\t\turlAnchor.href = s.url;\n");
      out.write("\n");
      out.write("\t\t\t\t// Support: IE <=8 - 11 only\n");
      out.write("\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative\n");
      out.write("\t\t\t\turlAnchor.href = urlAnchor.href;\n");
      out.write("\t\t\t\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !==\n");
      out.write("\t\t\t\t\turlAnchor.protocol + \"//\" + urlAnchor.host;\n");
      out.write("\t\t\t} catch ( e ) {\n");
      out.write("\n");
      out.write("\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\n");
      out.write("\t\t\t\t// it can be rejected by the transport if it is invalid\n");
      out.write("\t\t\t\ts.crossDomain = true;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Convert data if not already a string\n");
      out.write("\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\n");
      out.write("\t\t\ts.data = jQuery.param( s.data, s.traditional );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Apply prefilters\n");
      out.write("\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n");
      out.write("\n");
      out.write("\t\t// If request was aborted inside a prefilter, stop there\n");
      out.write("\t\tif ( completed ) {\n");
      out.write("\t\t\treturn jqXHR;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// We can fire global events as of now if asked to\n");
      out.write("\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n");
      out.write("\t\tfireGlobals = jQuery.event && s.global;\n");
      out.write("\n");
      out.write("\t\t// Watch for a new set of requests\n");
      out.write("\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\n");
      out.write("\t\t\tjQuery.event.trigger( \"ajaxStart\" );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Uppercase the type\n");
      out.write("\t\ts.type = s.type.toUpperCase();\n");
      out.write("\n");
      out.write("\t\t// Determine if request has content\n");
      out.write("\t\ts.hasContent = !rnoContent.test( s.type );\n");
      out.write("\n");
      out.write("\t\t// Save the URL in case we're toying with the If-Modified-Since\n");
      out.write("\t\t// and/or If-None-Match header later on\n");
      out.write("\t\t// Remove hash to simplify url manipulation\n");
      out.write("\t\tcacheURL = s.url.replace( rhash, \"\" );\n");
      out.write("\n");
      out.write("\t\t// More options handling for requests with no content\n");
      out.write("\t\tif ( !s.hasContent ) {\n");
      out.write("\n");
      out.write("\t\t\t// Remember the hash so we can put it back\n");
      out.write("\t\t\tuncached = s.url.slice( cacheURL.length );\n");
      out.write("\n");
      out.write("\t\t\t// If data is available and should be processed, append data to url\n");
      out.write("\t\t\tif ( s.data && ( s.processData || typeof s.data === \"string\" ) ) {\n");
      out.write("\t\t\t\tcacheURL += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data;\n");
      out.write("\n");
      out.write("\t\t\t\t// #9682: remove data so that it's not used in an eventual retry\n");
      out.write("\t\t\t\tdelete s.data;\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Add or update anti-cache param if needed\n");
      out.write("\t\t\tif ( s.cache === false ) {\n");
      out.write("\t\t\t\tcacheURL = cacheURL.replace( rantiCache, \"$1\" );\n");
      out.write("\t\t\t\tuncached = ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + ( nonce++ ) + uncached;\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Put hash and anti-cache on the URL that will be requested (gh-1732)\n");
      out.write("\t\t\ts.url = cacheURL + uncached;\n");
      out.write("\n");
      out.write("\t\t// Change '%20' to '+' if this is encoded form body content (gh-2658)\n");
      out.write("\t\t} else if ( s.data && s.processData &&\n");
      out.write("\t\t\t( s.contentType || \"\" ).indexOf( \"application/x-www-form-urlencoded\" ) === 0 ) {\n");
      out.write("\t\t\ts.data = s.data.replace( r20, \"+\" );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n");
      out.write("\t\tif ( s.ifModified ) {\n");
      out.write("\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\n");
      out.write("\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\tif ( jQuery.etag[ cacheURL ] ) {\n");
      out.write("\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Set the correct header, if data is being sent\n");
      out.write("\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n");
      out.write("\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Set the Accepts header for the server, depending on the dataType\n");
      out.write("\t\tjqXHR.setRequestHeader(\n");
      out.write("\t\t\t\"Accept\",\n");
      out.write("\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n");
      out.write("\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +\n");
      out.write("\t\t\t\t\t( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n");
      out.write("\t\t\t\ts.accepts[ \"*\" ]\n");
      out.write("\t\t);\n");
      out.write("\n");
      out.write("\t\t// Check for headers option\n");
      out.write("\t\tfor ( i in s.headers ) {\n");
      out.write("\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Allow custom headers/mimetypes and early abort\n");
      out.write("\t\tif ( s.beforeSend &&\n");
      out.write("\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {\n");
      out.write("\n");
      out.write("\t\t\t// Abort if not done already and return\n");
      out.write("\t\t\treturn jqXHR.abort();\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Aborting is no longer a cancellation\n");
      out.write("\t\tstrAbort = \"abort\";\n");
      out.write("\n");
      out.write("\t\t// Install callbacks on deferreds\n");
      out.write("\t\tcompleteDeferred.add( s.complete );\n");
      out.write("\t\tjqXHR.done( s.success );\n");
      out.write("\t\tjqXHR.fail( s.error );\n");
      out.write("\n");
      out.write("\t\t// Get transport\n");
      out.write("\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n");
      out.write("\n");
      out.write("\t\t// If no transport, we auto-abort\n");
      out.write("\t\tif ( !transport ) {\n");
      out.write("\t\t\tdone( -1, \"No Transport\" );\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\tjqXHR.readyState = 1;\n");
      out.write("\n");
      out.write("\t\t\t// Send global event\n");
      out.write("\t\t\tif ( fireGlobals ) {\n");
      out.write("\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// If request was aborted inside ajaxSend, stop there\n");
      out.write("\t\t\tif ( completed ) {\n");
      out.write("\t\t\t\treturn jqXHR;\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Timeout\n");
      out.write("\t\t\tif ( s.async && s.timeout > 0 ) {\n");
      out.write("\t\t\t\ttimeoutTimer = window.setTimeout( function() {\n");
      out.write("\t\t\t\t\tjqXHR.abort( \"timeout\" );\n");
      out.write("\t\t\t\t}, s.timeout );\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\ttry {\n");
      out.write("\t\t\t\tcompleted = false;\n");
      out.write("\t\t\t\ttransport.send( requestHeaders, done );\n");
      out.write("\t\t\t} catch ( e ) {\n");
      out.write("\n");
      out.write("\t\t\t\t// Rethrow post-completion exceptions\n");
      out.write("\t\t\t\tif ( completed ) {\n");
      out.write("\t\t\t\t\tthrow e;\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t// Propagate others as results\n");
      out.write("\t\t\t\tdone( -1, e );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Callback for when everything is done\n");
      out.write("\t\tfunction done( status, nativeStatusText, responses, headers ) {\n");
      out.write("\t\t\tvar isSuccess, success, error, response, modified,\n");
      out.write("\t\t\t\tstatusText = nativeStatusText;\n");
      out.write("\n");
      out.write("\t\t\t// Ignore repeat invocations\n");
      out.write("\t\t\tif ( completed ) {\n");
      out.write("\t\t\t\treturn;\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\tcompleted = true;\n");
      out.write("\n");
      out.write("\t\t\t// Clear timeout if it exists\n");
      out.write("\t\t\tif ( timeoutTimer ) {\n");
      out.write("\t\t\t\twindow.clearTimeout( timeoutTimer );\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Dereference transport for early garbage collection\n");
      out.write("\t\t\t// (no matter how long the jqXHR object will be used)\n");
      out.write("\t\t\ttransport = undefined;\n");
      out.write("\n");
      out.write("\t\t\t// Cache response headers\n");
      out.write("\t\t\tresponseHeadersString = headers || \"\";\n");
      out.write("\n");
      out.write("\t\t\t// Set readyState\n");
      out.write("\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n");
      out.write("\n");
      out.write("\t\t\t// Determine if successful\n");
      out.write("\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n");
      out.write("\n");
      out.write("\t\t\t// Get response data\n");
      out.write("\t\t\tif ( responses ) {\n");
      out.write("\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n");
      out.write("\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\n");
      out.write("\n");
      out.write("\t\t\t// If successful, handle type chaining\n");
      out.write("\t\t\tif ( isSuccess ) {\n");
      out.write("\n");
      out.write("\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n");
      out.write("\t\t\t\tif ( s.ifModified ) {\n");
      out.write("\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"Last-Modified\" );\n");
      out.write("\t\t\t\t\tif ( modified ) {\n");
      out.write("\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"etag\" );\n");
      out.write("\t\t\t\t\tif ( modified ) {\n");
      out.write("\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t// if no content\n");
      out.write("\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\n");
      out.write("\t\t\t\t\tstatusText = \"nocontent\";\n");
      out.write("\n");
      out.write("\t\t\t\t// if not modified\n");
      out.write("\t\t\t\t} else if ( status === 304 ) {\n");
      out.write("\t\t\t\t\tstatusText = \"notmodified\";\n");
      out.write("\n");
      out.write("\t\t\t\t// If we have data, let's convert it\n");
      out.write("\t\t\t\t} else {\n");
      out.write("\t\t\t\t\tstatusText = response.state;\n");
      out.write("\t\t\t\t\tsuccess = response.data;\n");
      out.write("\t\t\t\t\terror = response.error;\n");
      out.write("\t\t\t\t\tisSuccess = !error;\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t} else {\n");
      out.write("\n");
      out.write("\t\t\t\t// Extract error from statusText and normalize for non-aborts\n");
      out.write("\t\t\t\terror = statusText;\n");
      out.write("\t\t\t\tif ( status || !statusText ) {\n");
      out.write("\t\t\t\t\tstatusText = \"error\";\n");
      out.write("\t\t\t\t\tif ( status < 0 ) {\n");
      out.write("\t\t\t\t\t\tstatus = 0;\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Set data for the fake xhr object\n");
      out.write("\t\t\tjqXHR.status = status;\n");
      out.write("\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n");
      out.write("\n");
      out.write("\t\t\t// Success/Error\n");
      out.write("\t\t\tif ( isSuccess ) {\n");
      out.write("\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n");
      out.write("\t\t\t} else {\n");
      out.write("\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Status-dependent callbacks\n");
      out.write("\t\t\tjqXHR.statusCode( statusCode );\n");
      out.write("\t\t\tstatusCode = undefined;\n");
      out.write("\n");
      out.write("\t\t\tif ( fireGlobals ) {\n");
      out.write("\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n");
      out.write("\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Complete\n");
      out.write("\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n");
      out.write("\n");
      out.write("\t\t\tif ( fireGlobals ) {\n");
      out.write("\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n");
      out.write("\n");
      out.write("\t\t\t\t// Handle the global AJAX counter\n");
      out.write("\t\t\t\tif ( !( --jQuery.active ) ) {\n");
      out.write("\t\t\t\t\tjQuery.event.trigger( \"ajaxStop\" );\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\treturn jqXHR;\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tgetJSON: function( url, data, callback ) {\n");
      out.write("\t\treturn jQuery.get( url, data, callback, \"json\" );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tgetScript: function( url, callback ) {\n");
      out.write("\t\treturn jQuery.get( url, undefined, callback, \"script\" );\n");
      out.write("\t}\n");
      out.write("} );\n");
      out.write("\n");
      out.write("jQuery.each( [ \"get\", \"post\" ], function( i, method ) {\n");
      out.write("\tjQuery[ method ] = function( url, data, callback, type ) {\n");
      out.write("\n");
      out.write("\t\t// Shift arguments if data argument was omitted\n");
      out.write("\t\tif ( isFunction( data ) ) {\n");
      out.write("\t\t\ttype = type || callback;\n");
      out.write("\t\t\tcallback = data;\n");
      out.write("\t\t\tdata = undefined;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// The url can be an options object (which then must have .url)\n");
      out.write("\t\treturn jQuery.ajax( jQuery.extend( {\n");
      out.write("\t\t\turl: url,\n");
      out.write("\t\t\ttype: method,\n");
      out.write("\t\t\tdataType: type,\n");
      out.write("\t\t\tdata: data,\n");
      out.write("\t\t\tsuccess: callback\n");
      out.write("\t\t}, jQuery.isPlainObject( url ) && url ) );\n");
      out.write("\t};\n");
      out.write("} );\n");
      out.write("\n");
      out.write("\n");
      out.write("jQuery._evalUrl = function( url, options ) {\n");
      out.write("\treturn jQuery.ajax( {\n");
      out.write("\t\turl: url,\n");
      out.write("\n");
      out.write("\t\t// Make this explicit, since user can override this through ajaxSetup (#11264)\n");
      out.write("\t\ttype: \"GET\",\n");
      out.write("\t\tdataType: \"script\",\n");
      out.write("\t\tcache: true,\n");
      out.write("\t\tasync: false,\n");
      out.write("\t\tglobal: false,\n");
      out.write("\n");
      out.write("\t\t// Only evaluate the response if it is successful (gh-4126)\n");
      out.write("\t\t// dataFilter is not invoked for failure responses, so using it instead\n");
      out.write("\t\t// of the default converter is kludgy but it works.\n");
      out.write("\t\tconverters: {\n");
      out.write("\t\t\t\"text script\": function() {}\n");
      out.write("\t\t},\n");
      out.write("\t\tdataFilter: function( response ) {\n");
      out.write("\t\t\tjQuery.globalEval( response, options );\n");
      out.write("\t\t}\n");
      out.write("\t} );\n");
      out.write("};\n");
      out.write("\n");
      out.write("\n");
      out.write("jQuery.fn.extend( {\n");
      out.write("\twrapAll: function( html ) {\n");
      out.write("\t\tvar wrap;\n");
      out.write("\n");
      out.write("\t\tif ( this[ 0 ] ) {\n");
      out.write("\t\t\tif ( isFunction( html ) ) {\n");
      out.write("\t\t\t\thtml = html.call( this[ 0 ] );\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// The elements to wrap the target around\n");
      out.write("\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n");
      out.write("\n");
      out.write("\t\t\tif ( this[ 0 ].parentNode ) {\n");
      out.write("\t\t\t\twrap.insertBefore( this[ 0 ] );\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\twrap.map( function() {\n");
      out.write("\t\t\t\tvar elem = this;\n");
      out.write("\n");
      out.write("\t\t\t\twhile ( elem.firstElementChild ) {\n");
      out.write("\t\t\t\t\telem = elem.firstElementChild;\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\treturn elem;\n");
      out.write("\t\t\t} ).append( this );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\treturn this;\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\twrapInner: function( html ) {\n");
      out.write("\t\tif ( isFunction( html ) ) {\n");
      out.write("\t\t\treturn this.each( function( i ) {\n");
      out.write("\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );\n");
      out.write("\t\t\t} );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\treturn this.each( function() {\n");
      out.write("\t\t\tvar self = jQuery( this ),\n");
      out.write("\t\t\t\tcontents = self.contents();\n");
      out.write("\n");
      out.write("\t\t\tif ( contents.length ) {\n");
      out.write("\t\t\t\tcontents.wrapAll( html );\n");
      out.write("\n");
      out.write("\t\t\t} else {\n");
      out.write("\t\t\t\tself.append( html );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t} );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\twrap: function( html ) {\n");
      out.write("\t\tvar htmlIsFunction = isFunction( html );\n");
      out.write("\n");
      out.write("\t\treturn this.each( function( i ) {\n");
      out.write("\t\t\tjQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );\n");
      out.write("\t\t} );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tunwrap: function( selector ) {\n");
      out.write("\t\tthis.parent( selector ).not( \"body\" ).each( function() {\n");
      out.write("\t\t\tjQuery( this ).replaceWith( this.childNodes );\n");
      out.write("\t\t} );\n");
      out.write("\t\treturn this;\n");
      out.write("\t}\n");
      out.write("} );\n");
      out.write("\n");
      out.write("\n");
      out.write("jQuery.expr.pseudos.hidden = function( elem ) {\n");
      out.write("\treturn !jQuery.expr.pseudos.visible( elem );\n");
      out.write("};\n");
      out.write("jQuery.expr.pseudos.visible = function( elem ) {\n");
      out.write("\treturn !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\n");
      out.write("};\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("jQuery.ajaxSettings.xhr = function() {\n");
      out.write("\ttry {\n");
      out.write("\t\treturn new window.XMLHttpRequest();\n");
      out.write("\t} catch ( e ) {}\n");
      out.write("};\n");
      out.write("\n");
      out.write("var xhrSuccessStatus = {\n");
      out.write("\n");
      out.write("\t\t// File protocol always yields status code 0, assume 200\n");
      out.write("\t\t0: 200,\n");
      out.write("\n");
      out.write("\t\t// Support: IE <=9 only\n");
      out.write("\t\t// #1450: sometimes IE returns 1223 when it should be 204\n");
      out.write("\t\t1223: 204\n");
      out.write("\t},\n");
      out.write("\txhrSupported = jQuery.ajaxSettings.xhr();\n");
      out.write("\n");
      out.write("support.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\n");
      out.write("support.ajax = xhrSupported = !!xhrSupported;\n");
      out.write("\n");
      out.write("jQuery.ajaxTransport( function( options ) {\n");
      out.write("\tvar callback, errorCallback;\n");
      out.write("\n");
      out.write("\t// Cross domain only allowed if supported through XMLHttpRequest\n");
      out.write("\tif ( support.cors || xhrSupported && !options.crossDomain ) {\n");
      out.write("\t\treturn {\n");
      out.write("\t\t\tsend: function( headers, complete ) {\n");
      out.write("\t\t\t\tvar i,\n");
      out.write("\t\t\t\t\txhr = options.xhr();\n");
      out.write("\n");
      out.write("\t\t\t\txhr.open(\n");
      out.write("\t\t\t\t\toptions.type,\n");
      out.write("\t\t\t\t\toptions.url,\n");
      out.write("\t\t\t\t\toptions.async,\n");
      out.write("\t\t\t\t\toptions.username,\n");
      out.write("\t\t\t\t\toptions.password\n");
      out.write("\t\t\t\t);\n");
      out.write("\n");
      out.write("\t\t\t\t// Apply custom fields if provided\n");
      out.write("\t\t\t\tif ( options.xhrFields ) {\n");
      out.write("\t\t\t\t\tfor ( i in options.xhrFields ) {\n");
      out.write("\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t// Override mime type if needed\n");
      out.write("\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\n");
      out.write("\t\t\t\t\txhr.overrideMimeType( options.mimeType );\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t// X-Requested-With header\n");
      out.write("\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n");
      out.write("\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n");
      out.write("\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n");
      out.write("\t\t\t\t// For same-domain requests, won't change header if already provided.\n");
      out.write("\t\t\t\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\n");
      out.write("\t\t\t\t\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t// Set headers\n");
      out.write("\t\t\t\tfor ( i in headers ) {\n");
      out.write("\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t// Callback\n");
      out.write("\t\t\t\tcallback = function( type ) {\n");
      out.write("\t\t\t\t\treturn function() {\n");
      out.write("\t\t\t\t\t\tif ( callback ) {\n");
      out.write("\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =\n");
      out.write("\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.ontimeout =\n");
      out.write("\t\t\t\t\t\t\t\t\txhr.onreadystatechange = null;\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\tif ( type === \"abort\" ) {\n");
      out.write("\t\t\t\t\t\t\t\txhr.abort();\n");
      out.write("\t\t\t\t\t\t\t} else if ( type === \"error\" ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\t// Support: IE <=9 only\n");
      out.write("\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\n");
      out.write("\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\n");
      out.write("\t\t\t\t\t\t\t\tif ( typeof xhr.status !== \"number\" ) {\n");
      out.write("\t\t\t\t\t\t\t\t\tcomplete( 0, \"error\" );\n");
      out.write("\t\t\t\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\t\t\t\tcomplete(\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see #8605, #14207\n");
      out.write("\t\t\t\t\t\t\t\t\t\txhr.status,\n");
      out.write("\t\t\t\t\t\t\t\t\t\txhr.statusText\n");
      out.write("\t\t\t\t\t\t\t\t\t);\n");
      out.write("\t\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\t\t\tcomplete(\n");
      out.write("\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\n");
      out.write("\t\t\t\t\t\t\t\t\txhr.statusText,\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\t\t// Support: IE <=9 only\n");
      out.write("\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\n");
      out.write("\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\n");
      out.write("\t\t\t\t\t\t\t\t\t( xhr.responseType || \"text\" ) !== \"text\"  ||\n");
      out.write("\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== \"string\" ?\n");
      out.write("\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :\n");
      out.write("\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },\n");
      out.write("\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\n");
      out.write("\t\t\t\t\t\t\t\t);\n");
      out.write("\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t};\n");
      out.write("\t\t\t\t};\n");
      out.write("\n");
      out.write("\t\t\t\t// Listen to events\n");
      out.write("\t\t\t\txhr.onload = callback();\n");
      out.write("\t\t\t\terrorCallback = xhr.onerror = xhr.ontimeout = callback( \"error\" );\n");
      out.write("\n");
      out.write("\t\t\t\t// Support: IE 9 only\n");
      out.write("\t\t\t\t// Use onreadystatechange to replace onabort\n");
      out.write("\t\t\t\t// to handle uncaught aborts\n");
      out.write("\t\t\t\tif ( xhr.onabort !== undefined ) {\n");
      out.write("\t\t\t\t\txhr.onabort = errorCallback;\n");
      out.write("\t\t\t\t} else {\n");
      out.write("\t\t\t\t\txhr.onreadystatechange = function() {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t// Check readyState before timeout as it changes\n");
      out.write("\t\t\t\t\t\tif ( xhr.readyState === 4 ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t// Allow onerror to be called first,\n");
      out.write("\t\t\t\t\t\t\t// but that will not handle a native abort\n");
      out.write("\t\t\t\t\t\t\t// Also, save errorCallback to a variable\n");
      out.write("\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\n");
      out.write("\t\t\t\t\t\t\twindow.setTimeout( function() {\n");
      out.write("\t\t\t\t\t\t\t\tif ( callback ) {\n");
      out.write("\t\t\t\t\t\t\t\t\terrorCallback();\n");
      out.write("\t\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t\t} );\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t};\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t// Create the abort callback\n");
      out.write("\t\t\t\tcallback = callback( \"abort\" );\n");
      out.write("\n");
      out.write("\t\t\t\ttry {\n");
      out.write("\n");
      out.write("\t\t\t\t\t// Do send the request (this may raise an exception)\n");
      out.write("\t\t\t\t\txhr.send( options.hasContent && options.data || null );\n");
      out.write("\t\t\t\t} catch ( e ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t// #14683: Only rethrow if this hasn't been notified as an error yet\n");
      out.write("\t\t\t\t\tif ( callback ) {\n");
      out.write("\t\t\t\t\t\tthrow e;\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t},\n");
      out.write("\n");
      out.write("\t\t\tabort: function() {\n");
      out.write("\t\t\t\tif ( callback ) {\n");
      out.write("\t\t\t\t\tcallback();\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t};\n");
      out.write("\t}\n");
      out.write("} );\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\n");
      out.write("jQuery.ajaxPrefilter( function( s ) {\n");
      out.write("\tif ( s.crossDomain ) {\n");
      out.write("\t\ts.contents.script = false;\n");
      out.write("\t}\n");
      out.write("} );\n");
      out.write("\n");
      out.write("// Install script dataType\n");
      out.write("jQuery.ajaxSetup( {\n");
      out.write("\taccepts: {\n");
      out.write("\t\tscript: \"text/javascript, application/javascript, \" +\n");
      out.write("\t\t\t\"application/ecmascript, application/x-ecmascript\"\n");
      out.write("\t},\n");
      out.write("\tcontents: {\n");
      out.write("\t\tscript: /\\b(?:java|ecma)script\\b/\n");
      out.write("\t},\n");
      out.write("\tconverters: {\n");
      out.write("\t\t\"text script\": function( text ) {\n");
      out.write("\t\t\tjQuery.globalEval( text );\n");
      out.write("\t\t\treturn text;\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("} );\n");
      out.write("\n");
      out.write("// Handle cache's special case and crossDomain\n");
      out.write("jQuery.ajaxPrefilter( \"script\", function( s ) {\n");
      out.write("\tif ( s.cache === undefined ) {\n");
      out.write("\t\ts.cache = false;\n");
      out.write("\t}\n");
      out.write("\tif ( s.crossDomain ) {\n");
      out.write("\t\ts.type = \"GET\";\n");
      out.write("\t}\n");
      out.write("} );\n");
      out.write("\n");
      out.write("// Bind script tag hack transport\n");
      out.write("jQuery.ajaxTransport( \"script\", function( s ) {\n");
      out.write("\n");
      out.write("\t// This transport only deals with cross domain or forced-by-attrs requests\n");
      out.write("\tif ( s.crossDomain || s.scriptAttrs ) {\n");
      out.write("\t\tvar script, callback;\n");
      out.write("\t\treturn {\n");
      out.write("\t\t\tsend: function( _, complete ) {\n");
      out.write("\t\t\t\tscript = jQuery( \"<script>\" )\n");
      out.write("\t\t\t\t\t.attr( s.scriptAttrs || {} )\n");
      out.write("\t\t\t\t\t.prop( { charset: s.scriptCharset, src: s.url } )\n");
      out.write("\t\t\t\t\t.on( \"load error\", callback = function( evt ) {\n");
      out.write("\t\t\t\t\t\tscript.remove();\n");
      out.write("\t\t\t\t\t\tcallback = null;\n");
      out.write("\t\t\t\t\t\tif ( evt ) {\n");
      out.write("\t\t\t\t\t\t\tcomplete( evt.type === \"error\" ? 404 : 200, evt.type );\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t} );\n");
      out.write("\n");
      out.write("\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n");
      out.write("\t\t\t\tdocument.head.appendChild( script[ 0 ] );\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tabort: function() {\n");
      out.write("\t\t\t\tif ( callback ) {\n");
      out.write("\t\t\t\t\tcallback();\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t};\n");
      out.write("\t}\n");
      out.write("} );\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("var oldCallbacks = [],\n");
      out.write("\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n");
      out.write("\n");
      out.write("// Default jsonp settings\n");
      out.write("jQuery.ajaxSetup( {\n");
      out.write("\tjsonp: \"callback\",\n");
      out.write("\tjsonpCallback: function() {\n");
      out.write("\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce++ ) );\n");
      out.write("\t\tthis[ callback ] = true;\n");
      out.write("\t\treturn callback;\n");
      out.write("\t}\n");
      out.write("} );\n");
      out.write("\n");
      out.write("// Detect, normalize options and install callbacks for jsonp requests\n");
      out.write("jQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n");
      out.write("\n");
      out.write("\tvar callbackName, overwritten, responseContainer,\n");
      out.write("\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n");
      out.write("\t\t\t\"url\" :\n");
      out.write("\t\t\ttypeof s.data === \"string\" &&\n");
      out.write("\t\t\t\t( s.contentType || \"\" )\n");
      out.write("\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n");
      out.write("\t\t\t\trjsonp.test( s.data ) && \"data\"\n");
      out.write("\t\t);\n");
      out.write("\n");
      out.write("\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n");
      out.write("\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n");
      out.write("\n");
      out.write("\t\t// Get callback name, remembering preexisting value associated with it\n");
      out.write("\t\tcallbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?\n");
      out.write("\t\t\ts.jsonpCallback() :\n");
      out.write("\t\t\ts.jsonpCallback;\n");
      out.write("\n");
      out.write("\t\t// Insert callback into url or form data\n");
      out.write("\t\tif ( jsonProp ) {\n");
      out.write("\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n");
      out.write("\t\t} else if ( s.jsonp !== false ) {\n");
      out.write("\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Use data converter to retrieve json after script execution\n");
      out.write("\t\ts.converters[ \"script json\" ] = function() {\n");
      out.write("\t\t\tif ( !responseContainer ) {\n");
      out.write("\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\treturn responseContainer[ 0 ];\n");
      out.write("\t\t};\n");
      out.write("\n");
      out.write("\t\t// Force json dataType\n");
      out.write("\t\ts.dataTypes[ 0 ] = \"json\";\n");
      out.write("\n");
      out.write("\t\t// Install callback\n");
      out.write("\t\toverwritten = window[ callbackName ];\n");
      out.write("\t\twindow[ callbackName ] = function() {\n");
      out.write("\t\t\tresponseContainer = arguments;\n");
      out.write("\t\t};\n");
      out.write("\n");
      out.write("\t\t// Clean-up function (fires after converters)\n");
      out.write("\t\tjqXHR.always( function() {\n");
      out.write("\n");
      out.write("\t\t\t// If previous value didn't exist - remove it\n");
      out.write("\t\t\tif ( overwritten === undefined ) {\n");
      out.write("\t\t\t\tjQuery( window ).removeProp( callbackName );\n");
      out.write("\n");
      out.write("\t\t\t// Otherwise restore preexisting value\n");
      out.write("\t\t\t} else {\n");
      out.write("\t\t\t\twindow[ callbackName ] = overwritten;\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Save back as free\n");
      out.write("\t\t\tif ( s[ callbackName ] ) {\n");
      out.write("\n");
      out.write("\t\t\t\t// Make sure that re-using the options doesn't screw things around\n");
      out.write("\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n");
      out.write("\n");
      out.write("\t\t\t\t// Save the callback name for future use\n");
      out.write("\t\t\t\toldCallbacks.push( callbackName );\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Call if it was a function and we have a response\n");
      out.write("\t\t\tif ( responseContainer && isFunction( overwritten ) ) {\n");
      out.write("\t\t\t\toverwritten( responseContainer[ 0 ] );\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\tresponseContainer = overwritten = undefined;\n");
      out.write("\t\t} );\n");
      out.write("\n");
      out.write("\t\t// Delegate to script\n");
      out.write("\t\treturn \"script\";\n");
      out.write("\t}\n");
      out.write("} );\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// Support: Safari 8 only\n");
      out.write("// In Safari 8 documents created via document.implementation.createHTMLDocument\n");
      out.write("// collapse sibling forms: the second one becomes a child of the first one.\n");
      out.write("// Because of that, this security measure has to be disabled in Safari 8.\n");
      out.write("// https://bugs.webkit.org/show_bug.cgi?id=137337\n");
      out.write("support.createHTMLDocument = ( function() {\n");
      out.write("\tvar body = document.implementation.createHTMLDocument( \"\" ).body;\n");
      out.write("\tbody.innerHTML = \"<form></form><form></form>\";\n");
      out.write("\treturn body.childNodes.length === 2;\n");
      out.write("} )();\n");
      out.write("\n");
      out.write("\n");
      out.write("// Argument \"data\" should be string of html\n");
      out.write("// context (optional): If specified, the fragment will be created in this context,\n");
      out.write("// defaults to document\n");
      out.write("// keepScripts (optional): If true, will include scripts passed in the html string\n");
      out.write("jQuery.parseHTML = function( data, context, keepScripts ) {\n");
      out.write("\tif ( typeof data !== \"string\" ) {\n");
      out.write("\t\treturn [];\n");
      out.write("\t}\n");
      out.write("\tif ( typeof context === \"boolean\" ) {\n");
      out.write("\t\tkeepScripts = context;\n");
      out.write("\t\tcontext = false;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tvar base, parsed, scripts;\n");
      out.write("\n");
      out.write("\tif ( !context ) {\n");
      out.write("\n");
      out.write("\t\t// Stop scripts or inline event handlers from being executed immediately\n");
      out.write("\t\t// by using document.implementation\n");
      out.write("\t\tif ( support.createHTMLDocument ) {\n");
      out.write("\t\t\tcontext = document.implementation.createHTMLDocument( \"\" );\n");
      out.write("\n");
      out.write("\t\t\t// Set the base href for the created document\n");
      out.write("\t\t\t// so any parsed elements with URLs\n");
      out.write("\t\t\t// are based on the document's URL (gh-2965)\n");
      out.write("\t\t\tbase = context.createElement( \"base\" );\n");
      out.write("\t\t\tbase.href = document.location.href;\n");
      out.write("\t\t\tcontext.head.appendChild( base );\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\tcontext = document;\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tparsed = rsingleTag.exec( data );\n");
      out.write("\tscripts = !keepScripts && [];\n");
      out.write("\n");
      out.write("\t// Single tag\n");
      out.write("\tif ( parsed ) {\n");
      out.write("\t\treturn [ context.createElement( parsed[ 1 ] ) ];\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tparsed = buildFragment( [ data ], context, scripts );\n");
      out.write("\n");
      out.write("\tif ( scripts && scripts.length ) {\n");
      out.write("\t\tjQuery( scripts ).remove();\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\treturn jQuery.merge( [], parsed.childNodes );\n");
      out.write("};\n");
      out.write("\n");
      out.write("\n");
      out.write("/**\n");
      out.write(" * Load a url into a page\n");
      out.write(" */\n");
      out.write("jQuery.fn.load = function( url, params, callback ) {\n");
      out.write("\tvar selector, type, response,\n");
      out.write("\t\tself = this,\n");
      out.write("\t\toff = url.indexOf( \" \" );\n");
      out.write("\n");
      out.write("\tif ( off > -1 ) {\n");
      out.write("\t\tselector = stripAndCollapse( url.slice( off ) );\n");
      out.write("\t\turl = url.slice( 0, off );\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// If it's a function\n");
      out.write("\tif ( isFunction( params ) ) {\n");
      out.write("\n");
      out.write("\t\t// We assume that it's the callback\n");
      out.write("\t\tcallback = params;\n");
      out.write("\t\tparams = undefined;\n");
      out.write("\n");
      out.write("\t// Otherwise, build a param string\n");
      out.write("\t} else if ( params && typeof params === \"object\" ) {\n");
      out.write("\t\ttype = \"POST\";\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// If we have elements to modify, make the request\n");
      out.write("\tif ( self.length > 0 ) {\n");
      out.write("\t\tjQuery.ajax( {\n");
      out.write("\t\t\turl: url,\n");
      out.write("\n");
      out.write("\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\n");
      out.write("\t\t\t// Make value of this field explicit since\n");
      out.write("\t\t\t// user can override it through ajaxSetup method\n");
      out.write("\t\t\ttype: type || \"GET\",\n");
      out.write("\t\t\tdataType: \"html\",\n");
      out.write("\t\t\tdata: params\n");
      out.write("\t\t} ).done( function( responseText ) {\n");
      out.write("\n");
      out.write("\t\t\t// Save response for use in complete callback\n");
      out.write("\t\t\tresponse = arguments;\n");
      out.write("\n");
      out.write("\t\t\tself.html( selector ?\n");
      out.write("\n");
      out.write("\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n");
      out.write("\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n");
      out.write("\t\t\t\tjQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n");
      out.write("\n");
      out.write("\t\t\t\t// Otherwise use the full result\n");
      out.write("\t\t\t\tresponseText );\n");
      out.write("\n");
      out.write("\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n");
      out.write("\t\t// but they are ignored because response was set above.\n");
      out.write("\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n");
      out.write("\t\t} ).always( callback && function( jqXHR, status ) {\n");
      out.write("\t\t\tself.each( function() {\n");
      out.write("\t\t\t\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\n");
      out.write("\t\t\t} );\n");
      out.write("\t\t} );\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\treturn this;\n");
      out.write("};\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// Attach a bunch of functions for handling common AJAX events\n");
      out.write("jQuery.each( [\n");
      out.write("\t\"ajaxStart\",\n");
      out.write("\t\"ajaxStop\",\n");
      out.write("\t\"ajaxComplete\",\n");
      out.write("\t\"ajaxError\",\n");
      out.write("\t\"ajaxSuccess\",\n");
      out.write("\t\"ajaxSend\"\n");
      out.write("], function( i, type ) {\n");
      out.write("\tjQuery.fn[ type ] = function( fn ) {\n");
      out.write("\t\treturn this.on( type, fn );\n");
      out.write("\t};\n");
      out.write("} );\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("jQuery.expr.pseudos.animated = function( elem ) {\n");
      out.write("\treturn jQuery.grep( jQuery.timers, function( fn ) {\n");
      out.write("\t\treturn elem === fn.elem;\n");
      out.write("\t} ).length;\n");
      out.write("};\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("jQuery.offset = {\n");
      out.write("\tsetOffset: function( elem, options, i ) {\n");
      out.write("\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n");
      out.write("\t\t\tposition = jQuery.css( elem, \"position\" ),\n");
      out.write("\t\t\tcurElem = jQuery( elem ),\n");
      out.write("\t\t\tprops = {};\n");
      out.write("\n");
      out.write("\t\t// Set position first, in-case top/left are set even on static elem\n");
      out.write("\t\tif ( position === \"static\" ) {\n");
      out.write("\t\t\telem.style.position = \"relative\";\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tcurOffset = curElem.offset();\n");
      out.write("\t\tcurCSSTop = jQuery.css( elem, \"top\" );\n");
      out.write("\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\n");
      out.write("\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\n");
      out.write("\t\t\t( curCSSTop + curCSSLeft ).indexOf( \"auto\" ) > -1;\n");
      out.write("\n");
      out.write("\t\t// Need to be able to calculate position if either\n");
      out.write("\t\t// top or left is auto and position is either absolute or fixed\n");
      out.write("\t\tif ( calculatePosition ) {\n");
      out.write("\t\t\tcurPosition = curElem.position();\n");
      out.write("\t\t\tcurTop = curPosition.top;\n");
      out.write("\t\t\tcurLeft = curPosition.left;\n");
      out.write("\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\n");
      out.write("\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tif ( isFunction( options ) ) {\n");
      out.write("\n");
      out.write("\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n");
      out.write("\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tif ( options.top != null ) {\n");
      out.write("\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\n");
      out.write("\t\t}\n");
      out.write("\t\tif ( options.left != null ) {\n");
      out.write("\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tif ( \"using\" in options ) {\n");
      out.write("\t\t\toptions.using.call( elem, props );\n");
      out.write("\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\tcurElem.css( props );\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("};\n");
      out.write("\n");
      out.write("jQuery.fn.extend( {\n");
      out.write("\n");
      out.write("\t// offset() relates an element's border box to the document origin\n");
      out.write("\toffset: function( options ) {\n");
      out.write("\n");
      out.write("\t\t// Preserve chaining for setter\n");
      out.write("\t\tif ( arguments.length ) {\n");
      out.write("\t\t\treturn options === undefined ?\n");
      out.write("\t\t\t\tthis :\n");
      out.write("\t\t\t\tthis.each( function( i ) {\n");
      out.write("\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\n");
      out.write("\t\t\t\t} );\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tvar rect, win,\n");
      out.write("\t\t\telem = this[ 0 ];\n");
      out.write("\n");
      out.write("\t\tif ( !elem ) {\n");
      out.write("\t\t\treturn;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n");
      out.write("\t\t// Support: IE <=11 only\n");
      out.write("\t\t// Running getBoundingClientRect on a\n");
      out.write("\t\t// disconnected node in IE throws an error\n");
      out.write("\t\tif ( !elem.getClientRects().length ) {\n");
      out.write("\t\t\treturn { top: 0, left: 0 };\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Get document-relative position by adding viewport scroll to viewport-relative gBCR\n");
      out.write("\t\trect = elem.getBoundingClientRect();\n");
      out.write("\t\twin = elem.ownerDocument.defaultView;\n");
      out.write("\t\treturn {\n");
      out.write("\t\t\ttop: rect.top + win.pageYOffset,\n");
      out.write("\t\t\tleft: rect.left + win.pageXOffset\n");
      out.write("\t\t};\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\t// position() relates an element's margin box to its offset parent's padding box\n");
      out.write("\t// This corresponds to the behavior of CSS absolute positioning\n");
      out.write("\tposition: function() {\n");
      out.write("\t\tif ( !this[ 0 ] ) {\n");
      out.write("\t\t\treturn;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tvar offsetParent, offset, doc,\n");
      out.write("\t\t\telem = this[ 0 ],\n");
      out.write("\t\t\tparentOffset = { top: 0, left: 0 };\n");
      out.write("\n");
      out.write("\t\t// position:fixed elements are offset from the viewport, which itself always has zero offset\n");
      out.write("\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n");
      out.write("\n");
      out.write("\t\t\t// Assume position:fixed implies availability of getBoundingClientRect\n");
      out.write("\t\t\toffset = elem.getBoundingClientRect();\n");
      out.write("\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\toffset = this.offset();\n");
      out.write("\n");
      out.write("\t\t\t// Account for the *real* offset parent, which can be the document or its root element\n");
      out.write("\t\t\t// when a statically positioned element is identified\n");
      out.write("\t\t\tdoc = elem.ownerDocument;\n");
      out.write("\t\t\toffsetParent = elem.offsetParent || doc.documentElement;\n");
      out.write("\t\t\twhile ( offsetParent &&\n");
      out.write("\t\t\t\t( offsetParent === doc.body || offsetParent === doc.documentElement ) &&\n");
      out.write("\t\t\t\tjQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n");
      out.write("\n");
      out.write("\t\t\t\toffsetParent = offsetParent.parentNode;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\tif ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {\n");
      out.write("\n");
      out.write("\t\t\t\t// Incorporate borders into its offset, since they are outside its content origin\n");
      out.write("\t\t\t\tparentOffset = jQuery( offsetParent ).offset();\n");
      out.write("\t\t\t\tparentOffset.top += jQuery.css( offsetParent, \"borderTopWidth\", true );\n");
      out.write("\t\t\t\tparentOffset.left += jQuery.css( offsetParent, \"borderLeftWidth\", true );\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Subtract parent offsets and element margins\n");
      out.write("\t\treturn {\n");
      out.write("\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n");
      out.write("\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\n");
      out.write("\t\t};\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\t// This method will return documentElement in the following cases:\n");
      out.write("\t// 1) For the element inside the iframe without offsetParent, this method will return\n");
      out.write("\t//    documentElement of the parent window\n");
      out.write("\t// 2) For the hidden or detached element\n");
      out.write("\t// 3) For body or html element, i.e. in case of the html node - it will return itself\n");
      out.write("\t//\n");
      out.write("\t// but those exceptions were never presented as a real life use-cases\n");
      out.write("\t// and might be considered as more preferable results.\n");
      out.write("\t//\n");
      out.write("\t// This logic, however, is not guaranteed and can change at any point in the future\n");
      out.write("\toffsetParent: function() {\n");
      out.write("\t\treturn this.map( function() {\n");
      out.write("\t\t\tvar offsetParent = this.offsetParent;\n");
      out.write("\n");
      out.write("\t\t\twhile ( offsetParent && jQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n");
      out.write("\t\t\t\toffsetParent = offsetParent.offsetParent;\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\treturn offsetParent || documentElement;\n");
      out.write("\t\t} );\n");
      out.write("\t}\n");
      out.write("} );\n");
      out.write("\n");
      out.write("// Create scrollLeft and scrollTop methods\n");
      out.write("jQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\n");
      out.write("\tvar top = \"pageYOffset\" === prop;\n");
      out.write("\n");
      out.write("\tjQuery.fn[ method ] = function( val ) {\n");
      out.write("\t\treturn access( this, function( elem, method, val ) {\n");
      out.write("\n");
      out.write("\t\t\t// Coalesce documents and windows\n");
      out.write("\t\t\tvar win;\n");
      out.write("\t\t\tif ( isWindow( elem ) ) {\n");
      out.write("\t\t\t\twin = elem;\n");
      out.write("\t\t\t} else if ( elem.nodeType === 9 ) {\n");
      out.write("\t\t\t\twin = elem.defaultView;\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\tif ( val === undefined ) {\n");
      out.write("\t\t\t\treturn win ? win[ prop ] : elem[ method ];\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\tif ( win ) {\n");
      out.write("\t\t\t\twin.scrollTo(\n");
      out.write("\t\t\t\t\t!top ? val : win.pageXOffset,\n");
      out.write("\t\t\t\t\ttop ? val : win.pageYOffset\n");
      out.write("\t\t\t\t);\n");
      out.write("\n");
      out.write("\t\t\t} else {\n");
      out.write("\t\t\t\telem[ method ] = val;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}, method, val, arguments.length );\n");
      out.write("\t};\n");
      out.write("} );\n");
      out.write("\n");
      out.write("// Support: Safari <=7 - 9.1, Chrome <=37 - 49\n");
      out.write("// Add the top/left cssHooks using jQuery.fn.position\n");
      out.write("// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n");
      out.write("// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n");
      out.write("// getComputedStyle returns percent when specified for top/left/bottom/right;\n");
      out.write("// rather than make the css module depend on the offset module, just check for it here\n");
      out.write("jQuery.each( [ \"top\", \"left\" ], function( i, prop ) {\n");
      out.write("\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n");
      out.write("\t\tfunction( elem, computed ) {\n");
      out.write("\t\t\tif ( computed ) {\n");
      out.write("\t\t\t\tcomputed = curCSS( elem, prop );\n");
      out.write("\n");
      out.write("\t\t\t\t// If curCSS returns percentage, fallback to offset\n");
      out.write("\t\t\t\treturn rnumnonpx.test( computed ) ?\n");
      out.write("\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\n");
      out.write("\t\t\t\t\tcomputed;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t);\n");
      out.write("} );\n");
      out.write("\n");
      out.write("\n");
      out.write("// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\n");
      out.write("jQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n");
      out.write("\tjQuery.each( { padding: \"inner\" + name, content: type, \"\": \"outer\" + name },\n");
      out.write("\t\tfunction( defaultExtra, funcName ) {\n");
      out.write("\n");
      out.write("\t\t// Margin is only for outerHeight, outerWidth\n");
      out.write("\t\tjQuery.fn[ funcName ] = function( margin, value ) {\n");
      out.write("\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n");
      out.write("\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n");
      out.write("\n");
      out.write("\t\t\treturn access( this, function( elem, type, value ) {\n");
      out.write("\t\t\t\tvar doc;\n");
      out.write("\n");
      out.write("\t\t\t\tif ( isWindow( elem ) ) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n");
      out.write("\t\t\t\t\treturn funcName.indexOf( \"outer\" ) === 0 ?\n");
      out.write("\t\t\t\t\t\telem[ \"inner\" + name ] :\n");
      out.write("\t\t\t\t\t\telem.document.documentElement[ \"client\" + name ];\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t// Get document width or height\n");
      out.write("\t\t\t\tif ( elem.nodeType === 9 ) {\n");
      out.write("\t\t\t\t\tdoc = elem.documentElement;\n");
      out.write("\n");
      out.write("\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n");
      out.write("\t\t\t\t\t// whichever is greatest\n");
      out.write("\t\t\t\t\treturn Math.max(\n");
      out.write("\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n");
      out.write("\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n");
      out.write("\t\t\t\t\t\tdoc[ \"client\" + name ]\n");
      out.write("\t\t\t\t\t);\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\treturn value === undefined ?\n");
      out.write("\n");
      out.write("\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n");
      out.write("\t\t\t\t\tjQuery.css( elem, type, extra ) :\n");
      out.write("\n");
      out.write("\t\t\t\t\t// Set width or height on the element\n");
      out.write("\t\t\t\t\tjQuery.style( elem, type, value, extra );\n");
      out.write("\t\t\t}, type, chainable ? margin : undefined, chainable );\n");
      out.write("\t\t};\n");
      out.write("\t} );\n");
      out.write("} );\n");
      out.write("\n");
      out.write("\n");
      out.write("jQuery.each( ( \"blur focus focusin focusout resize scroll click dblclick \" +\n");
      out.write("\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n");
      out.write("\t\"change select submit keydown keypress keyup contextmenu\" ).split( \" \" ),\n");
      out.write("\tfunction( i, name ) {\n");
      out.write("\n");
      out.write("\t// Handle event binding\n");
      out.write("\tjQuery.fn[ name ] = function( data, fn ) {\n");
      out.write("\t\treturn arguments.length > 0 ?\n");
      out.write("\t\t\tthis.on( name, null, data, fn ) :\n");
      out.write("\t\t\tthis.trigger( name );\n");
      out.write("\t};\n");
      out.write("} );\n");
      out.write("\n");
      out.write("jQuery.fn.extend( {\n");
      out.write("\thover: function( fnOver, fnOut ) {\n");
      out.write("\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n");
      out.write("\t}\n");
      out.write("} );\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("jQuery.fn.extend( {\n");
      out.write("\n");
      out.write("\tbind: function( types, data, fn ) {\n");
      out.write("\t\treturn this.on( types, null, data, fn );\n");
      out.write("\t},\n");
      out.write("\tunbind: function( types, fn ) {\n");
      out.write("\t\treturn this.off( types, null, fn );\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tdelegate: function( selector, types, data, fn ) {\n");
      out.write("\t\treturn this.on( types, selector, data, fn );\n");
      out.write("\t},\n");
      out.write("\tundelegate: function( selector, types, fn ) {\n");
      out.write("\n");
      out.write("\t\t// ( namespace ) or ( selector, types [, fn] )\n");
      out.write("\t\treturn arguments.length === 1 ?\n");
      out.write("\t\t\tthis.off( selector, \"**\" ) :\n");
      out.write("\t\t\tthis.off( types, selector || \"**\", fn );\n");
      out.write("\t}\n");
      out.write("} );\n");
      out.write("\n");
      out.write("// Bind a function to a context, optionally partially applying any\n");
      out.write("// arguments.\n");
      out.write("// jQuery.proxy is deprecated to promote standards (specifically Function#bind)\n");
      out.write("// However, it is not slated for removal any time soon\n");
      out.write("jQuery.proxy = function( fn, context ) {\n");
      out.write("\tvar tmp, args, proxy;\n");
      out.write("\n");
      out.write("\tif ( typeof context === \"string\" ) {\n");
      out.write("\t\ttmp = fn[ context ];\n");
      out.write("\t\tcontext = fn;\n");
      out.write("\t\tfn = tmp;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// Quick check to determine if target is callable, in the spec\n");
      out.write("\t// this throws a TypeError, but we will just return undefined.\n");
      out.write("\tif ( !isFunction( fn ) ) {\n");
      out.write("\t\treturn undefined;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t// Simulated bind\n");
      out.write("\targs = slice.call( arguments, 2 );\n");
      out.write("\tproxy = function() {\n");
      out.write("\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n");
      out.write("\t};\n");
      out.write("\n");
      out.write("\t// Set the guid of unique handler to the same of original handler, so it can be removed\n");
      out.write("\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n");
      out.write("\n");
      out.write("\treturn proxy;\n");
      out.write("};\n");
      out.write("\n");
      out.write("jQuery.holdReady = function( hold ) {\n");
      out.write("\tif ( hold ) {\n");
      out.write("\t\tjQuery.readyWait++;\n");
      out.write("\t} else {\n");
      out.write("\t\tjQuery.ready( true );\n");
      out.write("\t}\n");
      out.write("};\n");
      out.write("jQuery.isArray = Array.isArray;\n");
      out.write("jQuery.parseJSON = JSON.parse;\n");
      out.write("jQuery.nodeName = nodeName;\n");
      out.write("jQuery.isFunction = isFunction;\n");
      out.write("jQuery.isWindow = isWindow;\n");
      out.write("jQuery.camelCase = camelCase;\n");
      out.write("jQuery.type = toType;\n");
      out.write("\n");
      out.write("jQuery.now = Date.now;\n");
      out.write("\n");
      out.write("jQuery.isNumeric = function( obj ) {\n");
      out.write("\n");
      out.write("\t// As of jQuery 3.0, isNumeric is limited to\n");
      out.write("\t// strings and numbers (primitives or objects)\n");
      out.write("\t// that can be coerced to finite numbers (gh-2662)\n");
      out.write("\tvar type = jQuery.type( obj );\n");
      out.write("\treturn ( type === \"number\" || type === \"string\" ) &&\n");
      out.write("\n");
      out.write("\t\t// parseFloat NaNs numeric-cast false positives (\"\")\n");
      out.write("\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n");
      out.write("\t\t// subtraction forces infinities to NaN\n");
      out.write("\t\t!isNaN( obj - parseFloat( obj ) );\n");
      out.write("};\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("// Register as a named AMD module, since jQuery can be concatenated with other\n");
      out.write("// files that may use define, but not via a proper concatenation script that\n");
      out.write("// understands anonymous AMD modules. A named AMD is safest and most robust\n");
      out.write("// way to register. Lowercase jquery is used because AMD module names are\n");
      out.write("// derived from file names, and jQuery is normally delivered in a lowercase\n");
      out.write("// file name. Do this after creating the global so that if an AMD module wants\n");
      out.write("// to call noConflict to hide this version of jQuery, it will work.\n");
      out.write("\n");
      out.write("// Note that for maximum portability, libraries that are not jQuery should\n");
      out.write("// declare themselves as anonymous modules, and avoid setting a global if an\n");
      out.write("// AMD loader is present. jQuery is a special case. For more information, see\n");
      out.write("// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n");
      out.write("\n");
      out.write("if ( typeof define === \"function\" && define.amd ) {\n");
      out.write("\tdefine( \"jquery\", [], function() {\n");
      out.write("\t\treturn jQuery;\n");
      out.write("\t} );\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("var\n");
      out.write("\n");
      out.write("\t// Map over jQuery in case of overwrite\n");
      out.write("\t_jQuery = window.jQuery,\n");
      out.write("\n");
      out.write("\t// Map over the $ in case of overwrite\n");
      out.write("\t_$ = window.$;\n");
      out.write("\n");
      out.write("jQuery.noConflict = function( deep ) {\n");
      out.write("\tif ( window.$ === jQuery ) {\n");
      out.write("\t\twindow.$ = _$;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tif ( deep && window.jQuery === jQuery ) {\n");
      out.write("\t\twindow.jQuery = _jQuery;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\treturn jQuery;\n");
      out.write("};\n");
      out.write("\n");
      out.write("// Expose jQuery and $ identifiers, even in AMD\n");
      out.write("// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n");
      out.write("// and CommonJS for browser emulators (#13566)\n");
      out.write("if ( !noGlobal ) {\n");
      out.write("\twindow.jQuery = window.$ = jQuery;\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("return jQuery;\n");
      out.write("} );\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("\r\n");
      out.write("<meta charset=\"utf-8\">\r\n");
      out.write("<meta name=\"viewport\"\r\n");
      out.write("\tcontent=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\r\n");
      out.write("<meta name=\"description\" content=\"\">\r\n");
      out.write("<meta name=\"author\" content=\"\">\r\n");
      out.write("\r\n");
      out.write("<title>Encore Tours</title>\r\n");
      out.write("\r\n");
      out.write("<!-- 링크 순서 중요합니다. <<< 4조, 순서 지켜주세용 -->\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t\r\n");
      out.write("\t<!-- Footer -->\r\n");
      out.write("\t<footer class=\"footer text-center\">\r\n");
      out.write("\t\t<div class=\"container\">\r\n");
      out.write("\t\t\t<div class=\"row\">\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<!-- Footer Location -->\r\n");
      out.write("\t\t\t\t<div class=\"col-lg-4 mb-5 mb-lg-0\">\r\n");
      out.write("\t\t\t\t\t<h4 class=\"text-uppercase mb-4\">Location</h4>\r\n");
      out.write("\t\t\t\t\t<p class=\"lead mb-0\">\r\n");
      out.write("\t\t\t\t\t\tSeocho 1(il)-dong, Seocho-gu, Seoul <br>335 Hyoryeong-ro\r\n");
      out.write("\t\t\t\t\t</p>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<!-- Footer Social Icons -->\r\n");
      out.write("\t\t\t\t<div class=\"col-lg-4 mb-5 mb-lg-0\">\r\n");
      out.write("\t\t\t\t\t<h4 class=\"text-uppercase mb-4\">SHARE</h4>\r\n");
      out.write("\t\t\t\t\t<a class=\"btn btn-outline-light btn-social mx-1\" href=\"#\"> <i\r\n");
      out.write("\t\t\t\t\t\tclass=\"fab fa-fw fa-facebook-f\"></i>\r\n");
      out.write("\t\t\t\t\t</a> <a class=\"btn btn-outline-light btn-social mx-1\" href=\"#\"> <i\r\n");
      out.write("\t\t\t\t\t\tclass=\"fab fa-fw fa-twitter\"></i>\r\n");
      out.write("\t\t\t\t\t</a> <a class=\"btn btn-outline-light btn-social mx-1\" href=\"#\"> <i\r\n");
      out.write("\t\t\t\t\t\tclass=\"fab fa-fw fa-linkedin-in\"></i>\r\n");
      out.write("\t\t\t\t\t</a>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<!-- Footer About Text -->\r\n");
      out.write("\t\t\t\t<div class=\"col-lg-4\">\r\n");
      out.write("\t\t\t\t\t<h4 class=\"text-uppercase mb-4\">About Encore Tours</h4>\r\n");
      out.write("\t\t\t\t\t<p class=\"lead mb-0\">\r\n");
      out.write("\t\t\t\t\t\t설명설명설명설명설명설명 <br />\r\n");
      out.write("\t\t\t\t\t\t<a href=\"\">Start Encore Tours</a>.\r\n");
      out.write("\t\t\t\t\t</p>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</footer>\r\n");
      out.write("\r\n");
      out.write("\t<!-- Copyright Section -->\r\n");
      out.write("\t<section class=\"copyright py-4 text-center text-white\">\r\n");
      out.write("\t\t<div class=\"container\">\r\n");
      out.write("\t\t\t<small>Copyright &copy; Encore Tours 2019</small>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</section>\r\n");
      out.write("\t\r\n");
      out.write("\t<!-- 하기 링크 위치 고정 (body 가장 하단에) -->\r\n");
      out.write("\t<!-- Plugin JavaScript -->\r\n");
      out.write("\t<script src=\"/team4_jeju/resources/js/jquery.easing_gyubeom.js\"></script>\r\n");
      out.write("\r\n");
      out.write("\t<!-- Contact Form JavaScript -->\r\n");
      out.write("\t<script src=\"/team4_jeju/resources/js/jqBootstrapValidation_gyubeom.js\"></script>\r\n");
      out.write("\t<script src=\"/team4_jeju/resources/js/contact_me_gyubeom.js\"></script>\r\n");
      out.write("\r\n");
      out.write("\t<!-- Custom scripts for this template -->\r\n");
      out.write("\t<script src=\"/team4_jeju/resources/js/main_nav_gyubeom.js\"></script>\r\n");
      out.write("\t\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
